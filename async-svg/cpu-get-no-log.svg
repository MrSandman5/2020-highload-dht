<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1253"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1253"> </text>
<g id="frames">
<g>
<title>all (128 samples, 100.00%)</title><rect x="10.0" y="1219.0" width="1180.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="13.0" y="1230.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.78%)</title><rect x="10.0" y="1203.0" width="9.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (1 samples, 0.78%)</title><rect x="10.0" y="1187.0" width="9.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (78 samples, 60.94%)</title><rect x="19.2" y="1203.0" width="719.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.2" y="1214.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (18 samples, 14.06%)</title><rect x="19.2" y="1187.0" width="166.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.2" y="1198.0">one/nio/net/NativeSel..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (4 samples, 3.12%)</title><rect x="19.2" y="1171.0" width="36.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.2" y="1182.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.78%)</title><rect x="28.4" y="1155.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.4" y="1166.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.access$100 (2 samples, 1.56%)</title><rect x="37.7" y="1155.0" width="18.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.7" y="1166.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (14 samples, 10.94%)</title><rect x="56.1" y="1171.0" width="129.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="59.1" y="1182.0">one/nio/net/Nati..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (2 samples, 1.56%)</title><rect x="65.3" y="1155.0" width="18.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="68.3" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.56%)</title><rect x="83.8" y="1155.0" width="18.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="86.8" y="1166.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.78%)</title><rect x="93.0" y="1139.0" width="9.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="96.0" y="1150.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 1.56%)</title><rect x="102.2" y="1155.0" width="18.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="105.2" y="1166.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 1.56%)</title><rect x="120.6" y="1155.0" width="18.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="123.6" y="1166.0"></text>
</g>
<g>
<title>epoll_wait (5 samples, 3.91%)</title><rect x="139.1" y="1155.0" width="46.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="142.1" y="1166.0">epol..</text>
</g>
<g>
<title>one/nio/net/Session.process (60 samples, 46.88%)</title><rect x="185.2" y="1187.0" width="553.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="188.2" y="1198.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (59 samples, 46.09%)</title><rect x="194.4" y="1171.0" width="543.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="197.4" y="1182.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (45 samples, 35.16%)</title><rect x="203.6" y="1155.0" width="414.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="206.6" y="1166.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (40 samples, 31.25%)</title><rect x="231.2" y="1139.0" width="368.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="234.2" y="1150.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (40 samples, 31.25%)</title><rect x="231.2" y="1123.0" width="368.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.2" y="1134.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_response.handleRequest (35 samples, 27.34%)</title><rect x="231.2" y="1107.0" width="322.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.2" y="1118.0">RequestHandler1_response.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (13 samples, 10.16%)</title><rect x="231.2" y="1091.0" width="119.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="234.2" y="1102.0">one/nio/http/Ht..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.78%)</title><rect x="240.5" y="1075.0" width="9.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.78%)</title><rect x="240.5" y="1059.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.78%)</title><rect x="240.5" y="1043.0" width="9.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="243.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.78%)</title><rect x="240.5" y="1027.0" width="9.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="243.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.78%)</title><rect x="240.5" y="1011.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.78%)</title><rect x="240.5" y="995.0" width="9.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="243.5" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (10 samples, 7.81%)</title><rect x="249.7" y="1075.0" width="92.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.7" y="1086.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 3.91%)</title><rect x="249.7" y="1059.0" width="46.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="252.7" y="1070.0">one/..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 3.91%)</title><rect x="249.7" y="1043.0" width="46.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="252.7" y="1054.0">one/..</text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 3.91%)</title><rect x="249.7" y="1027.0" width="46.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="252.7" y="1038.0">one/..</text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 3.91%)</title><rect x="249.7" y="1011.0" width="46.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.7" y="1022.0">java..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.78%)</title><rect x="286.6" y="995.0" width="9.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="289.6" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (5 samples, 3.91%)</title><rect x="295.8" y="1059.0" width="46.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.8" y="1070.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (5 samples, 3.91%)</title><rect x="295.8" y="1043.0" width="46.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="298.8" y="1054.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (5 samples, 3.91%)</title><rect x="295.8" y="1027.0" width="46.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="298.8" y="1038.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (5 samples, 3.91%)</title><rect x="295.8" y="1011.0" width="46.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="298.8" y="1022.0">one/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 1.56%)</title><rect x="305.0" y="995.0" width="18.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="308.0" y="1006.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.78%)</title><rect x="314.2" y="979.0" width="9.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="317.2" y="990.0"></text>
</g>
<g>
<title>__libc_send (2 samples, 1.56%)</title><rect x="323.4" y="995.0" width="18.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="326.4" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.78%)</title><rect x="341.9" y="1075.0" width="9.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="344.9" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.78%)</title><rect x="351.1" y="1091.0" width="9.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="354.1" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.78%)</title><rect x="351.1" y="1075.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="354.1" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (21 samples, 16.41%)</title><rect x="360.3" y="1091.0" width="193.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="363.3" y="1102.0">ru/mail/polis/service/mrs..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 1.56%)</title><rect x="360.3" y="1075.0" width="18.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="363.3" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.78%)</title><rect x="369.5" y="1059.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="372.5" y="1070.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.78%)</title><rect x="369.5" y="1043.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="372.5" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.78%)</title><rect x="369.5" y="1027.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="372.5" y="1038.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.78%)</title><rect x="369.5" y="1011.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="372.5" y="1022.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.78%)</title><rect x="369.5" y="995.0" width="9.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="372.5" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.get (18 samples, 14.06%)</title><rect x="378.8" y="1075.0" width="165.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="381.8" y="1086.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (17 samples, 13.28%)</title><rect x="378.8" y="1059.0" width="156.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="381.8" y="1070.0">ru/mail/polis/dao/DA..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (4 samples, 3.12%)</title><rect x="378.8" y="1043.0" width="36.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="381.8" y="1054.0">com..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (4 samples, 3.12%)</title><rect x="378.8" y="1027.0" width="36.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="381.8" y="1038.0">com..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (4 samples, 3.12%)</title><rect x="378.8" y="1011.0" width="36.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="381.8" y="1022.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (4 samples, 3.12%)</title><rect x="378.8" y="995.0" width="36.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="381.8" y="1006.0">com..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (4 samples, 3.12%)</title><rect x="378.8" y="979.0" width="36.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="381.8" y="990.0">ru/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3 samples, 2.34%)</title><rect x="378.8" y="963.0" width="27.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="381.8" y="974.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (3 samples, 2.34%)</title><rect x="378.8" y="947.0" width="27.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="381.8" y="958.0">c..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (3 samples, 2.34%)</title><rect x="378.8" y="931.0" width="27.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="381.8" y="942.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (2 samples, 1.56%)</title><rect x="378.8" y="915.0" width="18.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="381.8" y="926.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (2 samples, 1.56%)</title><rect x="378.8" y="899.0" width="18.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="381.8" y="910.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (2 samples, 1.56%)</title><rect x="378.8" y="883.0" width="18.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="381.8" y="894.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.78%)</title><rect x="397.2" y="915.0" width="9.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="400.2" y="926.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.78%)</title><rect x="397.2" y="899.0" width="9.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="400.2" y="910.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (1 samples, 0.78%)</title><rect x="397.2" y="883.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="400.2" y="894.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.78%)</title><rect x="397.2" y="867.0" width="9.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="400.2" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$60/369137200.apply (1 samples, 0.78%)</title><rect x="406.4" y="963.0" width="9.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="409.4" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (1 samples, 0.78%)</title><rect x="406.4" y="947.0" width="9.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="409.4" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.78%)</title><rect x="406.4" y="931.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="409.4" y="942.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.78%)</title><rect x="415.6" y="1043.0" width="9.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="418.6" y="1054.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (1 samples, 0.78%)</title><rect x="415.6" y="1027.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="418.6" y="1038.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.78%)</title><rect x="415.6" y="1011.0" width="9.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="418.6" y="1022.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1 samples, 0.78%)</title><rect x="415.6" y="995.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="418.6" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.78%)</title><rect x="424.8" y="1043.0" width="9.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="427.8" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.iterator (11 samples, 8.59%)</title><rect x="434.1" y="1043.0" width="101.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="437.1" y="1054.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.cellIterator (11 samples, 8.59%)</title><rect x="434.1" y="1027.0" width="101.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="437.1" y="1038.0">ru/mail/poli..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 1.56%)</title><rect x="434.1" y="1011.0" width="18.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="437.1" y="1022.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (2 samples, 1.56%)</title><rect x="434.1" y="995.0" width="18.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="437.1" y="1006.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (2 samples, 1.56%)</title><rect x="434.1" y="979.0" width="18.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="437.1" y="990.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (2 samples, 1.56%)</title><rect x="434.1" y="963.0" width="18.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="437.1" y="974.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.&lt;init&gt; (1 samples, 0.78%)</title><rect x="434.1" y="947.0" width="9.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="437.1" y="958.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (1 samples, 0.78%)</title><rect x="434.1" y="931.0" width="9.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="437.1" y="942.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absHighest (1 samples, 0.78%)</title><rect x="443.3" y="947.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="446.3" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.78%)</title><rect x="443.3" y="931.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="446.3" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.78%)</title><rect x="452.5" y="1011.0" width="9.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="455.5" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.78%)</title><rect x="452.5" y="995.0" width="9.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.5" y="1006.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.78%)</title><rect x="452.5" y="979.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="455.5" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (1 samples, 0.78%)</title><rect x="461.7" y="1011.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="464.7" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (1 samples, 0.78%)</title><rect x="461.7" y="995.0" width="9.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="464.7" y="1006.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (1 samples, 0.78%)</title><rect x="461.7" y="979.0" width="9.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="464.7" y="990.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (1 samples, 0.78%)</title><rect x="461.7" y="963.0" width="9.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="464.7" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.iterator (7 samples, 5.47%)</title><rect x="470.9" y="1011.0" width="64.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="473.9" y="1022.0">ru/mail..</text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (5 samples, 3.91%)</title><rect x="470.9" y="995.0" width="46.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="473.9" y="1006.0">java..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.&lt;init&gt; (2 samples, 1.56%)</title><rect x="470.9" y="979.0" width="18.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="473.9" y="990.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (2 samples, 1.56%)</title><rect x="470.9" y="963.0" width="18.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="473.9" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.hasNext (1 samples, 0.78%)</title><rect x="480.2" y="947.0" width="9.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="483.2" y="958.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (3 samples, 2.34%)</title><rect x="489.4" y="979.0" width="27.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="492.4" y="990.0">j..</text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (3 samples, 2.34%)</title><rect x="489.4" y="963.0" width="27.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="492.4" y="974.0">j..</text>
</g>
<g>
<title>java/util/TreeMap.compare (3 samples, 2.34%)</title><rect x="489.4" y="947.0" width="27.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="492.4" y="958.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 2.34%)</title><rect x="489.4" y="931.0" width="27.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="492.4" y="942.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 2.34%)</title><rect x="489.4" y="915.0" width="27.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="492.4" y="926.0">j..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 2.34%)</title><rect x="489.4" y="899.0" width="27.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="492.4" y="910.0">j..</text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (1 samples, 0.78%)</title><rect x="517.0" y="995.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="520.0" y="1006.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.&lt;init&gt; (1 samples, 0.78%)</title><rect x="517.0" y="979.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="520.0" y="990.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$EntrySetView.&lt;init&gt; (1 samples, 0.78%)</title><rect x="517.0" y="963.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="520.0" y="974.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.78%)</title><rect x="526.2" y="995.0" width="9.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="529.2" y="1006.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.78%)</title><rect x="526.2" y="979.0" width="9.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="529.2" y="990.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (1 samples, 0.78%)</title><rect x="526.2" y="963.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="529.2" y="974.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (1 samples, 0.78%)</title><rect x="526.2" y="947.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="529.2" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.toByteArray (1 samples, 0.78%)</title><rect x="535.5" y="1059.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="538.5" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.78%)</title><rect x="535.5" y="1043.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="538.5" y="1054.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.78%)</title><rect x="535.5" y="1027.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="538.5" y="1038.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (1 samples, 0.78%)</title><rect x="535.5" y="1011.0" width="9.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="538.5" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.put (1 samples, 0.78%)</title><rect x="544.7" y="1075.0" width="9.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="547.7" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.upsert (1 samples, 0.78%)</title><rect x="544.7" y="1059.0" width="9.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="547.7" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.upsert (1 samples, 0.78%)</title><rect x="544.7" y="1043.0" width="9.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="547.7" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 1.56%)</title><rect x="553.9" y="1107.0" width="18.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="556.9" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 1.56%)</title><rect x="553.9" y="1091.0" width="18.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="556.9" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 1.56%)</title><rect x="553.9" y="1075.0" width="18.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="556.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 1.56%)</title><rect x="553.9" y="1059.0" width="18.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="556.9" y="1070.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.78%)</title><rect x="563.1" y="1043.0" width="9.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="566.1" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 2.34%)</title><rect x="572.3" y="1107.0" width="27.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="575.3" y="1118.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 2.34%)</title><rect x="572.3" y="1091.0" width="27.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="575.3" y="1102.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 2.34%)</title><rect x="572.3" y="1075.0" width="27.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="575.3" y="1086.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.78%)</title><rect x="581.6" y="1059.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="584.6" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.78%)</title><rect x="590.8" y="1059.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="593.8" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.78%)</title><rect x="600.0" y="1139.0" width="9.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="603.0" y="1150.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.78%)</title><rect x="600.0" y="1123.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="603.0" y="1134.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.78%)</title><rect x="609.2" y="1139.0" width="9.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="612.2" y="1150.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.78%)</title><rect x="609.2" y="1123.0" width="9.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="612.2" y="1134.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (13 samples, 10.16%)</title><rect x="618.4" y="1155.0" width="119.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="621.4" y="1166.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (13 samples, 10.16%)</title><rect x="618.4" y="1139.0" width="119.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="621.4" y="1150.0">one/nio/net/Nat..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (7 samples, 5.47%)</title><rect x="627.7" y="1123.0" width="64.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="630.7" y="1134.0">Java_on..</text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 1.56%)</title><rect x="646.1" y="1107.0" width="18.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="649.1" y="1118.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 2.34%)</title><rect x="664.5" y="1107.0" width="27.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="667.5" y="1118.0">j..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.78%)</title><rect x="673.8" y="1091.0" width="9.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="676.8" y="1102.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.78%)</title><rect x="683.0" y="1091.0" width="9.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="686.0" y="1102.0"></text>
</g>
<g>
<title>__recv (5 samples, 3.91%)</title><rect x="692.2" y="1123.0" width="46.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="695.2" y="1134.0">__recv</text>
</g>
<g>
<title>start_thread (49 samples, 38.28%)</title><rect x="738.3" y="1203.0" width="451.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="741.3" y="1214.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (49 samples, 38.28%)</title><rect x="738.3" y="1187.0" width="451.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="741.3" y="1198.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (49 samples, 38.28%)</title><rect x="738.3" y="1171.0" width="451.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="741.3" y="1182.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 6.25%)</title><rect x="738.3" y="1155.0" width="73.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="741.3" y="1166.0">GangWork..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 6.25%)</title><rect x="738.3" y="1139.0" width="73.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="741.3" y="1150.0">G1ParTas..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 3.91%)</title><rect x="738.3" y="1123.0" width="46.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="741.3" y="1134.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.56%)</title><rect x="738.3" y="1107.0" width="18.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="741.3" y="1118.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.78%)</title><rect x="747.5" y="1091.0" width="9.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="750.5" y="1102.0"></text>
</g>
<g>
<title>EnableIf&lt;!IsSame&lt;G1ScanEvacuatedObjClosure, OopClosure&gt;::value, void&gt;::type call_do_oop&lt;unsigned int, G1ScanEvacuatedObjClosure, OopClosure, G1ScanEvacuatedObjClosure&gt;(void (G1ScanEvacuatedObjClosure::*)(unsigned int*), void (OopClosure::*)(unsigned int*), G1ScanEvacuatedObjClosure*, unsigned int*) (1 samples, 0.78%)</title><rect x="747.5" y="1075.0" width="9.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="750.5" y="1086.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 2.34%)</title><rect x="756.7" y="1107.0" width="27.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="759.7" y="1118.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.78%)</title><rect x="775.2" y="1091.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="778.2" y="1102.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (3 samples, 2.34%)</title><rect x="784.4" y="1123.0" width="27.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="787.4" y="1134.0">G..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 2.34%)</title><rect x="784.4" y="1107.0" width="27.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="787.4" y="1118.0">G..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (3 samples, 2.34%)</title><rect x="784.4" y="1091.0" width="27.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="787.4" y="1102.0">G..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (3 samples, 2.34%)</title><rect x="784.4" y="1075.0" width="27.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="787.4" y="1086.0">D..</text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 2.34%)</title><rect x="784.4" y="1059.0" width="27.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="787.4" y="1070.0">G..</text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.78%)</title><rect x="784.4" y="1043.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="787.4" y="1054.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.78%)</title><rect x="784.4" y="1027.0" width="9.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="787.4" y="1038.0"></text>
</g>
<g>
<title>G1ScanClosureBase::trim_queue_partially() (2 samples, 1.56%)</title><rect x="793.6" y="1043.0" width="18.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="796.6" y="1054.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.78%)</title><rect x="802.8" y="1027.0" width="9.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="805.8" y="1038.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (41 samples, 32.03%)</title><rect x="812.0" y="1155.0" width="378.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="815.0" y="1166.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (41 samples, 32.03%)</title><rect x="812.0" y="1139.0" width="378.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="815.0" y="1150.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (41 samples, 32.03%)</title><rect x="812.0" y="1123.0" width="378.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="815.0" y="1134.0">CompileBroker::invoke_compiler_on_method(CompileTas..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (40 samples, 31.25%)</title><rect x="812.0" y="1107.0" width="368.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="815.0" y="1118.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int,..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (40 samples, 31.25%)</title><rect x="812.0" y="1091.0" width="368.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="815.0" y="1102.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, i..</text>
</g>
<g>
<title>Compile::Code_Gen() (19 samples, 14.84%)</title><rect x="812.0" y="1075.0" width="175.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="815.0" y="1086.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.56%)</title><rect x="812.0" y="1059.0" width="18.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="815.0" y="1070.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.56%)</title><rect x="812.0" y="1043.0" width="18.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="815.0" y="1054.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.78%)</title><rect x="821.2" y="1027.0" width="9.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="824.2" y="1038.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.78%)</title><rect x="821.2" y="1011.0" width="9.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="824.2" y="1022.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.78%)</title><rect x="821.2" y="995.0" width="9.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="824.2" y="1006.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.78%)</title><rect x="821.2" y="979.0" width="9.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="824.2" y="990.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.78%)</title><rect x="821.2" y="963.0" width="9.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="824.2" y="974.0"></text>
</g>
<g>
<title>State::_sub_Op_URShiftL(Node const*) (1 samples, 0.78%)</title><rect x="821.2" y="947.0" width="9.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="824.2" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 3.12%)</title><rect x="830.5" y="1059.0" width="36.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="833.5" y="1070.0">Pha..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 3.12%)</title><rect x="830.5" y="1043.0" width="36.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="833.5" y="1054.0">Pha..</text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.78%)</title><rect x="830.5" y="1027.0" width="9.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="833.5" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.78%)</title><rect x="839.7" y="1027.0" width="9.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="842.7" y="1038.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.78%)</title><rect x="839.7" y="1011.0" width="9.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="842.7" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.78%)</title><rect x="848.9" y="1027.0" width="9.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="851.9" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.78%)</title><rect x="848.9" y="1011.0" width="9.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="851.9" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.78%)</title><rect x="858.1" y="1027.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="861.1" y="1038.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.78%)</title><rect x="858.1" y="1011.0" width="9.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="861.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (13 samples, 10.16%)</title><rect x="867.3" y="1059.0" width="119.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="870.3" y="1070.0">PhaseChaitin::R..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.78%)</title><rect x="867.3" y="1043.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="870.3" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 1.56%)</title><rect x="876.6" y="1043.0" width="18.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="879.6" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.78%)</title><rect x="885.8" y="1027.0" width="9.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="888.8" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 2.34%)</title><rect x="895.0" y="1043.0" width="27.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="898.0" y="1054.0">P..</text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 1.56%)</title><rect x="904.2" y="1027.0" width="18.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="907.2" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 3.12%)</title><rect x="922.7" y="1043.0" width="36.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="925.7" y="1054.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 3.12%)</title><rect x="922.7" y="1027.0" width="36.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="925.7" y="1038.0">Pha..</text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.78%)</title><rect x="959.5" y="1043.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.5" y="1054.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.78%)</title><rect x="959.5" y="1027.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="962.5" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.78%)</title><rect x="959.5" y="1011.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="962.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.78%)</title><rect x="959.5" y="995.0" width="9.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="962.5" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.78%)</title><rect x="968.8" y="1043.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="971.8" y="1054.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.78%)</title><rect x="978.0" y="1043.0" width="9.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="981.0" y="1054.0"></text>
</g>
<g>
<title>Compile::Optimize() (16 samples, 12.50%)</title><rect x="987.2" y="1075.0" width="147.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="990.2" y="1086.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (3 samples, 2.34%)</title><rect x="987.2" y="1059.0" width="27.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="990.2" y="1070.0">C..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (3 samples, 2.34%)</title><rect x="987.2" y="1043.0" width="27.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="990.2" y="1054.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.78%)</title><rect x="987.2" y="1027.0" width="9.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="990.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 1.56%)</title><rect x="996.4" y="1027.0" width="18.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="999.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.78%)</title><rect x="996.4" y="1011.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="999.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.78%)</title><rect x="996.4" y="995.0" width="9.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="999.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.78%)</title><rect x="1005.6" y="1011.0" width="9.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1008.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.78%)</title><rect x="1005.6" y="995.0" width="9.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1008.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.78%)</title><rect x="1014.8" y="1059.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1017.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.78%)</title><rect x="1014.8" y="1043.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1017.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.78%)</title><rect x="1014.8" y="1027.0" width="9.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1017.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (6 samples, 4.69%)</title><rect x="1024.1" y="1059.0" width="55.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1027.1" y="1070.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.78%)</title><rect x="1024.1" y="1043.0" width="9.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1027.1" y="1054.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.78%)</title><rect x="1024.1" y="1027.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1027.1" y="1038.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.78%)</title><rect x="1024.1" y="1011.0" width="9.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1027.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.78%)</title><rect x="1033.3" y="1043.0" width="9.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1036.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.78%)</title><rect x="1042.5" y="1043.0" width="9.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1045.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.78%)</title><rect x="1042.5" y="1027.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1045.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 1.56%)</title><rect x="1051.7" y="1043.0" width="18.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.78%)</title><rect x="1051.7" y="1027.0" width="9.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1054.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.78%)</title><rect x="1051.7" y="1011.0" width="9.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1054.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.78%)</title><rect x="1060.9" y="1027.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1063.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.78%)</title><rect x="1070.2" y="1043.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1073.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.78%)</title><rect x="1070.2" y="1027.0" width="9.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1073.2" y="1038.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.78%)</title><rect x="1070.2" y="1011.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1073.2" y="1022.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.78%)</title><rect x="1070.2" y="995.0" width="9.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1073.2" y="1006.0"></text>
</g>
<g>
<title>TypePtr::remove_speculative() const (1 samples, 0.78%)</title><rect x="1070.2" y="979.0" width="9.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1073.2" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 3.91%)</title><rect x="1079.4" y="1059.0" width="46.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1082.4" y="1070.0">Phas..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 3.91%)</title><rect x="1079.4" y="1043.0" width="46.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1082.4" y="1054.0">Phas..</text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseGVN*) const (1 samples, 0.78%)</title><rect x="1079.4" y="1027.0" width="9.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1082.4" y="1038.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.78%)</title><rect x="1079.4" y="1011.0" width="9.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1082.4" y="1022.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.78%)</title><rect x="1079.4" y="995.0" width="9.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1082.4" y="1006.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.78%)</title><rect x="1079.4" y="979.0" width="9.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1082.4" y="990.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.78%)</title><rect x="1088.6" y="1027.0" width="9.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1091.6" y="1038.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.78%)</title><rect x="1097.8" y="1027.0" width="9.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1100.8" y="1038.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.78%)</title><rect x="1097.8" y="1011.0" width="9.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1100.8" y="1022.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.78%)</title><rect x="1107.0" y="1027.0" width="9.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.0" y="1038.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.78%)</title><rect x="1107.0" y="1011.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.0" y="1022.0"></text>
</g>
<g>
<title>PhiNode::simple_data_loop_check(Node*) const (1 samples, 0.78%)</title><rect x="1107.0" y="995.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.0" y="1006.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.78%)</title><rect x="1116.2" y="1027.0" width="9.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.2" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.78%)</title><rect x="1116.2" y="1011.0" width="9.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.2" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.78%)</title><rect x="1116.2" y="995.0" width="9.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.2" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.78%)</title><rect x="1116.2" y="979.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.2" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.78%)</title><rect x="1116.2" y="963.0" width="9.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.2" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.78%)</title><rect x="1116.2" y="947.0" width="9.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.2" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.78%)</title><rect x="1116.2" y="931.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.2" y="942.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.78%)</title><rect x="1116.2" y="915.0" width="9.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.2" y="926.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.78%)</title><rect x="1116.2" y="899.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.2" y="910.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.78%)</title><rect x="1125.5" y="1059.0" width="9.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.78%)</title><rect x="1125.5" y="1043.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.78%)</title><rect x="1125.5" y="1027.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.5" y="1038.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseGVN*) const (1 samples, 0.78%)</title><rect x="1125.5" y="1011.0" width="9.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.5" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 3.91%)</title><rect x="1134.7" y="1075.0" width="46.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.7" y="1086.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 3.91%)</title><rect x="1134.7" y="1059.0" width="46.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.7" y="1070.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 3.91%)</title><rect x="1134.7" y="1043.0" width="46.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.7" y="1054.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 3.91%)</title><rect x="1134.7" y="1027.0" width="46.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.7" y="1038.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 3.91%)</title><rect x="1134.7" y="1011.0" width="46.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.7" y="1022.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 3.12%)</title><rect x="1134.7" y="995.0" width="36.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.7" y="1006.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.78%)</title><rect x="1134.7" y="979.0" width="9.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.7" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.78%)</title><rect x="1134.7" y="963.0" width="9.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.78%)</title><rect x="1134.7" y="947.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.78%)</title><rect x="1134.7" y="931.0" width="9.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.78%)</title><rect x="1134.7" y="915.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.78%)</title><rect x="1134.7" y="899.0" width="9.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.7" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.78%)</title><rect x="1134.7" y="883.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.7" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.78%)</title><rect x="1134.7" y="867.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.78%)</title><rect x="1134.7" y="851.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.78%)</title><rect x="1134.7" y="835.0" width="9.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.78%)</title><rect x="1134.7" y="819.0" width="9.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.78%)</title><rect x="1134.7" y="803.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.7" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.78%)</title><rect x="1134.7" y="787.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.7" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.78%)</title><rect x="1134.7" y="771.0" width="9.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.7" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.78%)</title><rect x="1134.7" y="755.0" width="9.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.78%)</title><rect x="1134.7" y="739.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.78%)</title><rect x="1134.7" y="723.0" width="9.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.78%)</title><rect x="1134.7" y="707.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.7" y="718.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.78%)</title><rect x="1134.7" y="691.0" width="9.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.7" y="702.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.78%)</title><rect x="1134.7" y="675.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.7" y="686.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.78%)</title><rect x="1134.7" y="659.0" width="9.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.7" y="670.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.78%)</title><rect x="1134.7" y="643.0" width="9.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1137.7" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 2.34%)</title><rect x="1143.9" y="979.0" width="27.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.9" y="990.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.34%)</title><rect x="1143.9" y="963.0" width="27.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.9" y="974.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.34%)</title><rect x="1143.9" y="947.0" width="27.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.9" y="958.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.34%)</title><rect x="1143.9" y="931.0" width="27.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.9" y="942.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.34%)</title><rect x="1143.9" y="915.0" width="27.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.9" y="926.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.34%)</title><rect x="1143.9" y="899.0" width="27.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.9" y="910.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.34%)</title><rect x="1143.9" y="883.0" width="27.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.9" y="894.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.78%)</title><rect x="1143.9" y="867.0" width="9.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.9" y="878.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.78%)</title><rect x="1143.9" y="851.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.9" y="862.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.78%)</title><rect x="1143.9" y="835.0" width="9.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.9" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.78%)</title><rect x="1143.9" y="819.0" width="9.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.9" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.78%)</title><rect x="1143.9" y="803.0" width="9.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.9" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.78%)</title><rect x="1143.9" y="787.0" width="9.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.9" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.78%)</title><rect x="1143.9" y="771.0" width="9.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.9" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.78%)</title><rect x="1143.9" y="755.0" width="9.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.9" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.78%)</title><rect x="1143.9" y="739.0" width="9.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.9" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.78%)</title><rect x="1143.9" y="723.0" width="9.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.56%)</title><rect x="1153.1" y="867.0" width="18.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.1" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.56%)</title><rect x="1153.1" y="851.0" width="18.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.56%)</title><rect x="1153.1" y="835.0" width="18.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.56%)</title><rect x="1153.1" y="819.0" width="18.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.56%)</title><rect x="1153.1" y="803.0" width="18.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.56%)</title><rect x="1153.1" y="787.0" width="18.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.1" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.78%)</title><rect x="1153.1" y="771.0" width="9.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.1" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.78%)</title><rect x="1153.1" y="755.0" width="9.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.78%)</title><rect x="1153.1" y="739.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.78%)</title><rect x="1153.1" y="723.0" width="9.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.78%)</title><rect x="1153.1" y="707.0" width="9.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.78%)</title><rect x="1153.1" y="691.0" width="9.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.1" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.78%)</title><rect x="1153.1" y="675.0" width="9.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.1" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.78%)</title><rect x="1153.1" y="659.0" width="9.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.78%)</title><rect x="1153.1" y="643.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.78%)</title><rect x="1153.1" y="627.0" width="9.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.78%)</title><rect x="1153.1" y="611.0" width="9.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.78%)</title><rect x="1153.1" y="595.0" width="9.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.1" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.78%)</title><rect x="1153.1" y="579.0" width="9.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.78%)</title><rect x="1153.1" y="563.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.78%)</title><rect x="1153.1" y="547.0" width="9.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.78%)</title><rect x="1153.1" y="531.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.78%)</title><rect x="1153.1" y="515.0" width="9.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.78%)</title><rect x="1153.1" y="499.0" width="9.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.78%)</title><rect x="1153.1" y="483.0" width="9.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.1" y="494.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.78%)</title><rect x="1153.1" y="467.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.1" y="478.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.78%)</title><rect x="1153.1" y="451.0" width="9.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.1" y="462.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.78%)</title><rect x="1153.1" y="435.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.1" y="446.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.78%)</title><rect x="1153.1" y="419.0" width="9.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1156.1" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.78%)</title><rect x="1162.3" y="771.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.3" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.78%)</title><rect x="1162.3" y="755.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.3" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.78%)</title><rect x="1162.3" y="739.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.78%)</title><rect x="1162.3" y="723.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.78%)</title><rect x="1162.3" y="707.0" width="9.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.78%)</title><rect x="1162.3" y="691.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.78%)</title><rect x="1162.3" y="675.0" width="9.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.3" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.78%)</title><rect x="1162.3" y="659.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.3" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.78%)</title><rect x="1162.3" y="643.0" width="9.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.78%)</title><rect x="1162.3" y="627.0" width="9.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.78%)</title><rect x="1162.3" y="611.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.78%)</title><rect x="1162.3" y="595.0" width="9.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.78%)</title><rect x="1162.3" y="579.0" width="9.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.78%)</title><rect x="1162.3" y="563.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.3" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.78%)</title><rect x="1162.3" y="547.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.78%)</title><rect x="1162.3" y="531.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.78%)</title><rect x="1162.3" y="515.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.78%)</title><rect x="1162.3" y="499.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.78%)</title><rect x="1162.3" y="483.0" width="9.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.3" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.78%)</title><rect x="1162.3" y="467.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.3" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.78%)</title><rect x="1162.3" y="451.0" width="9.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.78%)</title><rect x="1162.3" y="435.0" width="9.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.78%)</title><rect x="1162.3" y="419.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.78%)</title><rect x="1162.3" y="403.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.78%)</title><rect x="1162.3" y="387.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.78%)</title><rect x="1162.3" y="371.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.78%)</title><rect x="1162.3" y="355.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.3" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.78%)</title><rect x="1162.3" y="339.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.78%)</title><rect x="1162.3" y="323.0" width="9.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.78%)</title><rect x="1162.3" y="307.0" width="9.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.78%)</title><rect x="1162.3" y="291.0" width="9.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.78%)</title><rect x="1162.3" y="275.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.3" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.78%)</title><rect x="1162.3" y="259.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.3" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.78%)</title><rect x="1162.3" y="243.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.78%)</title><rect x="1162.3" y="227.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.78%)</title><rect x="1162.3" y="211.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.78%)</title><rect x="1162.3" y="195.0" width="9.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.78%)</title><rect x="1162.3" y="179.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.78%)</title><rect x="1162.3" y="163.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.3" y="174.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.78%)</title><rect x="1162.3" y="147.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.3" y="158.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.78%)</title><rect x="1162.3" y="131.0" width="9.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.3" y="142.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.78%)</title><rect x="1162.3" y="115.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.3" y="126.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.78%)</title><rect x="1162.3" y="99.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.3" y="110.0"></text>
</g>
<g>
<title>GraphKit::final_sync(IdealKit&amp;) (1 samples, 0.78%)</title><rect x="1162.3" y="83.0" width="9.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.3" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.78%)</title><rect x="1162.3" y="67.0" width="9.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.3" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.78%)</title><rect x="1162.3" y="51.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.3" y="62.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.78%)</title><rect x="1162.3" y="35.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.78%)</title><rect x="1171.6" y="995.0" width="9.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.6" y="1006.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.78%)</title><rect x="1171.6" y="979.0" width="9.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.6" y="990.0"></text>
</g>
<g>
<title>Compile::static_subtype_check(ciKlass*, ciKlass*) (1 samples, 0.78%)</title><rect x="1171.6" y="963.0" width="9.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.6" y="974.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.78%)</title><rect x="1180.8" y="1107.0" width="9.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="1118.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.78%)</title><rect x="1180.8" y="1091.0" width="9.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.8" y="1102.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.78%)</title><rect x="1180.8" y="1075.0" width="9.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.8" y="1086.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (1 samples, 0.78%)</title><rect x="1180.8" y="1059.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.8" y="1070.0"></text>
</g>
</g>
</svg>
