<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="389"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="389"> </text>
<g id="frames">
<g>
<title>all (874 samples, 100.00%)</title><rect x="10.0" y="355.0" width="1180.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.0" y="366.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (502 samples, 57.44%)</title><rect x="10.0" y="339.0" width="677.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="350.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (502 samples, 57.44%)</title><rect x="10.0" y="323.0" width="677.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="334.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (502 samples, 57.44%)</title><rect x="10.0" y="307.0" width="677.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.11%)</title><rect x="11.4" y="291.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="14.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.11%)</title><rect x="11.4" y="275.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.11%)</title><rect x="11.4" y="259.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="14.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.11%)</title><rect x="11.4" y="243.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.4" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.11%)</title><rect x="11.4" y="227.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="14.4" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.11%)</title><rect x="11.4" y="211.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="14.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.34%)</title><rect x="12.7" y="291.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.34%)</title><rect x="12.7" y="275.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (248 samples, 28.38%)</title><rect x="16.8" y="291.0" width="334.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.8" y="302.0">java/util/concurrent/ThreadPoolExecutor.getTask</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (244 samples, 27.92%)</title><rect x="22.2" y="275.0" width="329.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.2" y="286.0">java/util/concurrent/ArrayBlockingQueue.take</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (5 samples, 0.57%)</title><rect x="28.9" y="259.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.57%)</title><rect x="28.9" y="243.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.57%)</title><rect x="28.9" y="227.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 0.57%)</title><rect x="28.9" y="211.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.23%)</title><rect x="33.0" y="195.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (182 samples, 20.82%)</title><rect x="35.7" y="259.0" width="245.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="38.7" y="270.0">java/util/concurrent/locks/Abstra..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (13 samples, 1.49%)</title><rect x="42.4" y="243.0" width="17.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="45.4" y="254.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (13 samples, 1.49%)</title><rect x="42.4" y="227.0" width="17.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.46%)</title><rect x="60.0" y="243.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="63.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.46%)</title><rect x="60.0" y="227.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="63.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.46%)</title><rect x="60.0" y="211.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="63.0" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.23%)</title><rect x="62.7" y="195.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="65.7" y="206.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.11%)</title><rect x="62.7" y="179.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="65.7" y="190.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.11%)</title><rect x="62.7" y="163.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="65.7" y="174.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.11%)</title><rect x="64.0" y="179.0" width="1.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="67.0" y="190.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.11%)</title><rect x="64.0" y="163.0" width="1.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="67.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (24 samples, 2.75%)</title><rect x="65.4" y="243.0" width="32.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="68.4" y="254.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (24 samples, 2.75%)</title><rect x="65.4" y="227.0" width="32.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.4" y="238.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 1.95%)</title><rect x="72.1" y="211.0" width="23.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.1" y="222.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 1.95%)</title><rect x="72.1" y="195.0" width="23.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.1" y="206.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.11%)</title><rect x="74.8" y="179.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="77.8" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (14 samples, 1.60%)</title><rect x="76.2" y="179.0" width="18.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.2" y="190.0"></text>
</g>
<g>
<title>Unsafe_Unpark (8 samples, 0.92%)</title><rect x="76.2" y="163.0" width="10.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="79.2" y="174.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.23%)</title><rect x="76.2" y="147.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="79.2" y="158.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.11%)</title><rect x="78.9" y="147.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="81.9" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.11%)</title><rect x="80.2" y="147.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="83.2" y="158.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.11%)</title><rect x="81.6" y="147.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="84.6" y="158.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.11%)</title><rect x="82.9" y="147.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="85.9" y="158.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.23%)</title><rect x="84.3" y="147.0" width="2.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="87.3" y="158.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 0.69%)</title><rect x="87.0" y="163.0" width="8.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="90.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.23%)</title><rect x="95.1" y="211.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (5 samples, 0.57%)</title><rect x="97.8" y="243.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="100.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (5 samples, 0.57%)</title><rect x="97.8" y="227.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="100.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (129 samples, 14.76%)</title><rect x="104.5" y="243.0" width="174.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="107.5" y="254.0">java/util/concurrent/l..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (129 samples, 14.76%)</title><rect x="104.5" y="227.0" width="174.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="107.5" y="238.0">jdk/internal/misc/Unsa..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.11%)</title><rect x="107.2" y="211.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="110.2" y="222.0"></text>
</g>
<g>
<title>Unsafe_Park (80 samples, 9.15%)</title><rect x="108.6" y="211.0" width="108.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="111.6" y="222.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.23%)</title><rect x="118.0" y="195.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="121.0" y="206.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (5 samples, 0.57%)</title><rect x="120.7" y="195.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="123.7" y="206.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.23%)</title><rect x="127.5" y="195.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="130.5" y="206.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="130.2" y="195.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="133.2" y="206.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (22 samples, 2.52%)</title><rect x="131.5" y="195.0" width="29.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="134.5" y="206.0">Pa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.57%)</title><rect x="143.7" y="179.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="146.7" y="190.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.11%)</title><rect x="149.1" y="163.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="152.1" y="174.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="150.4" y="179.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="153.4" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.23%)</title><rect x="151.8" y="179.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="154.8" y="190.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.46%)</title><rect x="154.5" y="179.0" width="5.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="157.5" y="190.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.11%)</title><rect x="159.9" y="179.0" width="1.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="162.9" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.23%)</title><rect x="161.2" y="195.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="164.2" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.23%)</title><rect x="163.9" y="195.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="166.9" y="206.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.11%)</title><rect x="166.6" y="195.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="169.6" y="206.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.57%)</title><rect x="168.0" y="195.0" width="6.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="171.0" y="206.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.23%)</title><rect x="174.7" y="195.0" width="2.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="177.7" y="206.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (21 samples, 2.40%)</title><rect x="177.4" y="195.0" width="28.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="180.4" y="206.0">__..</text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.34%)</title><rect x="205.8" y="195.0" width="4.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="208.8" y="206.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.46%)</title><rect x="209.8" y="195.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="212.8" y="206.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.11%)</title><rect x="215.2" y="195.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="218.2" y="206.0"></text>
</g>
<g>
<title>[unknown] (45 samples, 5.15%)</title><rect x="216.6" y="211.0" width="60.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="219.6" y="222.0">[unkno..</text>
</g>
<g>
<title>__condvar_dec_grefs (1 samples, 0.11%)</title><rect x="216.6" y="195.0" width="1.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="219.6" y="206.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.57%)</title><rect x="217.9" y="195.0" width="6.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="220.9" y="206.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.23%)</title><rect x="224.7" y="195.0" width="2.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="227.7" y="206.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (37 samples, 4.23%)</title><rect x="227.4" y="195.0" width="49.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="230.4" y="206.0">pthre..</text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.11%)</title><rect x="277.3" y="211.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="280.3" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.23%)</title><rect x="278.7" y="243.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="281.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (8 samples, 0.92%)</title><rect x="281.4" y="259.0" width="10.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (8 samples, 0.92%)</title><rect x="281.4" y="243.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="284.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (8 samples, 0.92%)</title><rect x="281.4" y="227.0" width="10.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (8 samples, 0.92%)</title><rect x="281.4" y="211.0" width="10.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 0.92%)</title><rect x="281.4" y="195.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="284.4" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (8 samples, 0.92%)</title><rect x="281.4" y="179.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.4" y="190.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.11%)</title><rect x="281.4" y="163.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="284.4" y="174.0"></text>
</g>
<g>
<title>Unsafe_Park (3 samples, 0.34%)</title><rect x="282.7" y="163.0" width="4.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="285.7" y="174.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.23%)</title><rect x="282.7" y="147.0" width="2.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="285.7" y="158.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="285.4" y="147.0" width="1.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="288.4" y="158.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.46%)</title><rect x="286.8" y="163.0" width="5.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="289.8" y="174.0"></text>
</g>
<g>
<title>__condvar_dec_grefs (1 samples, 0.11%)</title><rect x="286.8" y="147.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="289.8" y="158.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.11%)</title><rect x="288.1" y="147.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="291.1" y="158.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (2 samples, 0.23%)</title><rect x="289.5" y="147.0" width="2.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="292.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (44 samples, 5.03%)</title><rect x="292.2" y="259.0" width="59.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.2" y="270.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (44 samples, 5.03%)</title><rect x="292.2" y="243.0" width="59.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="295.2" y="254.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (44 samples, 5.03%)</title><rect x="292.2" y="227.0" width="59.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.2" y="238.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (44 samples, 5.03%)</title><rect x="292.2" y="211.0" width="59.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="295.2" y="222.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (36 samples, 4.12%)</title><rect x="303.0" y="195.0" width="48.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="306.0" y="206.0">jdk/..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="303.0" y="179.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="306.0" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.11%)</title><rect x="304.3" y="179.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="307.3" y="190.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.11%)</title><rect x="305.7" y="179.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="308.7" y="190.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.11%)</title><rect x="307.0" y="179.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="310.0" y="190.0"></text>
</g>
<g>
<title>Unsafe_Unpark (20 samples, 2.29%)</title><rect x="308.4" y="179.0" width="27.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="311.4" y="190.0">U..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.34%)</title><rect x="311.1" y="163.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="314.1" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.11%)</title><rect x="315.1" y="163.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="318.1" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.23%)</title><rect x="316.5" y="163.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="319.5" y="174.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.23%)</title><rect x="319.2" y="163.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="322.2" y="174.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.23%)</title><rect x="321.9" y="163.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="324.9" y="174.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.11%)</title><rect x="324.6" y="163.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="327.6" y="174.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.11%)</title><rect x="325.9" y="163.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="328.9" y="174.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.23%)</title><rect x="327.3" y="163.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="330.3" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.46%)</title><rect x="330.0" y="163.0" width="5.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="333.0" y="174.0"></text>
</g>
<g>
<title>__pthread_cond_signal (12 samples, 1.37%)</title><rect x="335.4" y="179.0" width="16.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="338.4" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$102/1246758565.run (249 samples, 28.49%)</title><rect x="351.6" y="291.0" width="336.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="354.6" y="302.0">ru/mail/polis/service/mrsandman5/ServiceImpl$$..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$put$1 (248 samples, 28.38%)</title><rect x="352.9" y="275.0" width="334.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="355.9" y="286.0">ru/mail/polis/service/mrsandman5/ServiceImpl...</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.23%)</title><rect x="352.9" y="259.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="355.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.putValue (246 samples, 28.15%)</title><rect x="355.6" y="259.0" width="332.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="358.6" y="270.0">ru/mail/polis/service/mrsandman5/ServiceImpl...</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (81 samples, 9.27%)</title><rect x="355.6" y="243.0" width="109.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="358.6" y="254.0">one/nio/http/..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.23%)</title><rect x="361.0" y="227.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="364.0" y="238.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.23%)</title><rect x="361.0" y="211.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="364.0" y="222.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.23%)</title><rect x="361.0" y="195.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="364.0" y="206.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.11%)</title><rect x="362.4" y="179.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="365.4" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (66 samples, 7.55%)</title><rect x="363.7" y="227.0" width="89.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="366.7" y="238.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (14 samples, 1.60%)</title><rect x="365.1" y="211.0" width="18.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.1" y="222.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (9 samples, 1.03%)</title><rect x="371.8" y="195.0" width="12.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="374.8" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (9 samples, 1.03%)</title><rect x="371.8" y="179.0" width="12.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="374.8" y="190.0"></text>
</g>
<g>
<title>java/lang/String.charAt (9 samples, 1.03%)</title><rect x="371.8" y="163.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="374.8" y="174.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="382.6" y="147.0" width="1.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="385.6" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (51 samples, 5.84%)</title><rect x="384.0" y="211.0" width="68.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="387.0" y="222.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/Session.write (51 samples, 5.84%)</title><rect x="384.0" y="195.0" width="68.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="387.0" y="206.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (51 samples, 5.84%)</title><rect x="384.0" y="179.0" width="68.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="387.0" y="190.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (50 samples, 5.72%)</title><rect x="385.3" y="163.0" width="67.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="388.3" y="174.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (21 samples, 2.40%)</title><rect x="386.7" y="147.0" width="28.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="389.7" y="158.0">Ja..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.11%)</title><rect x="393.4" y="131.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="396.4" y="142.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.11%)</title><rect x="394.8" y="131.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="397.8" y="142.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.11%)</title><rect x="396.1" y="131.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="399.1" y="142.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.23%)</title><rect x="397.5" y="131.0" width="2.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="400.5" y="142.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (1 samples, 0.11%)</title><rect x="400.2" y="131.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="403.2" y="142.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.92%)</title><rect x="401.5" y="131.0" width="10.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="404.5" y="142.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.23%)</title><rect x="405.6" y="115.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="408.6" y="126.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.23%)</title><rect x="408.3" y="115.0" width="2.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="411.3" y="126.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.11%)</title><rect x="409.6" y="99.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="412.6" y="110.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.11%)</title><rect x="411.0" y="115.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="414.0" y="126.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.11%)</title><rect x="412.3" y="131.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="415.3" y="142.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.11%)</title><rect x="413.7" y="131.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="416.7" y="142.0"></text>
</g>
<g>
<title>__libc_send (27 samples, 3.09%)</title><rect x="415.0" y="147.0" width="36.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="418.0" y="158.0">__l..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.11%)</title><rect x="451.5" y="147.0" width="1.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="454.5" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 1.03%)</title><rect x="452.8" y="227.0" width="12.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="455.8" y="238.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.57%)</title><rect x="458.2" y="211.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="461.2" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.57%)</title><rect x="458.2" y="195.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="461.2" y="206.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.11%)</title><rect x="460.9" y="179.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="463.9" y="190.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.11%)</title><rect x="460.9" y="163.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="463.9" y="174.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.11%)</title><rect x="462.3" y="179.0" width="1.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="465.3" y="190.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.11%)</title><rect x="463.6" y="179.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="466.6" y="190.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="463.6" y="163.0" width="1.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="466.6" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.upsert (165 samples, 18.88%)</title><rect x="465.0" y="243.0" width="222.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="468.0" y="254.0">ru/mail/polis/dao/impl/DAOImp..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.11%)</title><rect x="477.1" y="227.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="480.1" y="238.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.11%)</title><rect x="477.1" y="211.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="480.1" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.23%)</title><rect x="478.5" y="227.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="481.5" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.34%)</title><rect x="481.2" y="227.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="484.2" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 0.34%)</title><rect x="481.2" y="211.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="484.2" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.34%)</title><rect x="481.2" y="195.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="484.2" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.34%)</title><rect x="481.2" y="179.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="484.2" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.23%)</title><rect x="482.5" y="163.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.5" y="174.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.11%)</title><rect x="482.5" y="147.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="485.5" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.11%)</title><rect x="483.9" y="147.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="486.9" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.11%)</title><rect x="483.9" y="131.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="486.9" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.11%)</title><rect x="483.9" y="115.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="486.9" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.11%)</title><rect x="485.2" y="227.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="488.2" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="485.2" y="211.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="488.2" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="485.2" y="195.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="488.2" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="485.2" y="179.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="488.2" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.11%)</title><rect x="485.2" y="163.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="488.2" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.11%)</title><rect x="485.2" y="147.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="488.2" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.11%)</title><rect x="485.2" y="131.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="488.2" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (1 samples, 0.11%)</title><rect x="486.6" y="227.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="489.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (15 samples, 1.72%)</title><rect x="487.9" y="227.0" width="20.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="490.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (15 samples, 1.72%)</title><rect x="487.9" y="211.0" width="20.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="490.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (15 samples, 1.72%)</title><rect x="487.9" y="195.0" width="20.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="490.9" y="206.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.11%)</title><rect x="498.7" y="179.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="501.7" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.23%)</title><rect x="500.1" y="179.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="503.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (2 samples, 0.23%)</title><rect x="500.1" y="163.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="503.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (4 samples, 0.46%)</title><rect x="502.8" y="179.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="505.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (4 samples, 0.46%)</title><rect x="502.8" y="163.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="505.8" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (1 samples, 0.11%)</title><rect x="508.2" y="227.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="511.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.11%)</title><rect x="508.2" y="211.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="511.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (1 samples, 0.11%)</title><rect x="508.2" y="195.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="511.2" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.46%)</title><rect x="509.5" y="227.0" width="5.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="512.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.upsert (128 samples, 14.65%)</title><rect x="514.9" y="227.0" width="172.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="517.9" y="238.0">ru/mail/polis/dao/impl..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="514.9" y="211.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="517.9" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="514.9" y="195.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="517.9" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="514.9" y="179.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="517.9" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="514.9" y="163.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="517.9" y="174.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="514.9" y="147.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="517.9" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="514.9" y="131.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="517.9" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (2 samples, 0.23%)</title><rect x="516.3" y="211.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="519.3" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (2 samples, 0.23%)</title><rect x="516.3" y="195.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="519.3" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.23%)</title><rect x="516.3" y="179.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="519.3" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.23%)</title><rect x="516.3" y="163.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="519.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.23%)</title><rect x="516.3" y="147.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="519.3" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.23%)</title><rect x="516.3" y="131.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="519.3" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.11%)</title><rect x="517.6" y="115.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="520.6" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.11%)</title><rect x="519.0" y="211.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="522.0" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.11%)</title><rect x="519.0" y="195.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="522.0" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="519.0" y="179.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="522.0" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="519.0" y="163.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="522.0" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="519.0" y="147.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="522.0" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.11%)</title><rect x="519.0" y="131.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="522.0" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.11%)</title><rect x="519.0" y="115.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="522.0" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (124 samples, 14.19%)</title><rect x="520.3" y="211.0" width="167.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="523.3" y="222.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (124 samples, 14.19%)</title><rect x="520.3" y="195.0" width="167.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="523.3" y="206.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.23%)</title><rect x="589.2" y="179.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="592.2" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.11%)</title><rect x="589.2" y="163.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="592.2" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.11%)</title><rect x="590.5" y="163.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="593.5" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (5 samples, 0.57%)</title><rect x="591.9" y="179.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="594.9" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.11%)</title><rect x="597.3" y="163.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="600.3" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (6 samples, 0.69%)</title><rect x="598.6" y="179.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="601.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.11%)</title><rect x="601.4" y="163.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="604.4" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.11%)</title><rect x="601.4" y="147.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="604.4" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.11%)</title><rect x="601.4" y="131.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="604.4" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.11%)</title><rect x="601.4" y="115.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="604.4" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.11%)</title><rect x="601.4" y="99.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="604.4" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.11%)</title><rect x="601.4" y="83.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="604.4" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.11%)</title><rect x="601.4" y="67.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="604.4" y="78.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.11%)</title><rect x="601.4" y="51.0" width="1.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="604.4" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.34%)</title><rect x="602.7" y="163.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="605.7" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.34%)</title><rect x="602.7" y="147.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="605.7" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.34%)</title><rect x="602.7" y="131.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="605.7" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.11%)</title><rect x="602.7" y="115.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="605.7" y="126.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.11%)</title><rect x="604.1" y="115.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="607.1" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.11%)</title><rect x="604.1" y="99.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="607.1" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.11%)</title><rect x="605.4" y="115.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="608.4" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.11%)</title><rect x="605.4" y="99.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="608.4" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (60 samples, 6.86%)</title><rect x="606.8" y="179.0" width="81.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="609.8" y="190.0">java/util..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (57 samples, 6.52%)</title><rect x="610.8" y="163.0" width="77.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="613.8" y="174.0">java/nio..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (55 samples, 6.29%)</title><rect x="613.5" y="147.0" width="74.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="616.5" y="158.0">java/nio..</text>
</g>
<g>
<title>java/nio/Buffer.position (12 samples, 1.37%)</title><rect x="617.6" y="131.0" width="16.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="620.6" y="142.0"></text>
</g>
<g>
<title>vectorizedMismatch (9 samples, 1.03%)</title><rect x="621.6" y="115.0" width="12.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="624.6" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.11%)</title><rect x="633.8" y="131.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="636.8" y="142.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (33 samples, 3.78%)</title><rect x="635.1" y="131.0" width="44.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.1" y="142.0">java..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (20 samples, 2.29%)</title><rect x="652.7" y="115.0" width="27.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="655.7" y="126.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (6 samples, 0.69%)</title><rect x="668.9" y="99.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="671.9" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (2 samples, 0.23%)</title><rect x="677.0" y="99.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="680.0" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.69%)</title><rect x="679.7" y="131.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="682.7" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.34%)</title><rect x="682.4" y="115.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="685.4" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.11%)</title><rect x="686.4" y="115.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="689.4" y="126.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (330 samples, 37.76%)</title><rect x="687.8" y="339.0" width="445.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="690.8" y="350.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (3 samples, 0.34%)</title><rect x="697.2" y="323.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="700.2" y="334.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (3 samples, 0.34%)</title><rect x="697.2" y="307.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="700.2" y="318.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.11%)</title><rect x="699.9" y="291.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="702.9" y="302.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (70 samples, 8.01%)</title><rect x="701.3" y="323.0" width="94.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="704.3" y="334.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (2 samples, 0.23%)</title><rect x="706.7" y="307.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="709.7" y="318.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2 samples, 0.23%)</title><rect x="706.7" y="291.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="709.7" y="302.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (64 samples, 7.32%)</title><rect x="709.4" y="307.0" width="86.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="712.4" y="318.0">one/nio/ne..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (6 samples, 0.69%)</title><rect x="722.9" y="291.0" width="8.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="725.9" y="302.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 1.03%)</title><rect x="731.0" y="291.0" width="12.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="734.0" y="302.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.23%)</title><rect x="740.4" y="275.0" width="2.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="743.4" y="286.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.11%)</title><rect x="743.1" y="291.0" width="1.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="746.1" y="302.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.23%)</title><rect x="744.5" y="291.0" width="2.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="747.5" y="302.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.11%)</title><rect x="747.2" y="291.0" width="1.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="750.2" y="302.0"></text>
</g>
<g>
<title>clock_gettime@plt (2 samples, 0.23%)</title><rect x="748.5" y="291.0" width="2.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="751.5" y="302.0"></text>
</g>
<g>
<title>epoll_wait (33 samples, 3.78%)</title><rect x="751.2" y="291.0" width="44.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="754.2" y="302.0">epol..</text>
</g>
<g>
<title>one/nio/net/Session.process (250 samples, 28.60%)</title><rect x="795.8" y="323.0" width="337.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="798.8" y="334.0">one/nio/net/Session.process</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.23%)</title><rect x="801.2" y="307.0" width="2.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="804.2" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (242 samples, 27.69%)</title><rect x="803.9" y="307.0" width="326.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="806.9" y="318.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (152 samples, 17.39%)</title><rect x="805.2" y="291.0" width="205.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="808.2" y="302.0">one/nio/http/HttpSession.pr..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.23%)</title><rect x="816.0" y="275.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="819.0" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (78 samples, 8.92%)</title><rect x="818.7" y="275.0" width="105.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="821.7" y="286.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (78 samples, 8.92%)</title><rect x="818.7" y="259.0" width="105.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="821.7" y="270.0">one/nio/http/..</text>
</g>
<g>
<title>RequestHandler0_response.handleRequest (63 samples, 7.21%)</title><rect x="825.5" y="243.0" width="85.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="828.5" y="254.0">RequestHan..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (12 samples, 1.37%)</title><rect x="828.2" y="227.0" width="16.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="831.2" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (12 samples, 1.37%)</title><rect x="828.2" y="211.0" width="16.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="831.2" y="222.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.46%)</title><rect x="836.3" y="195.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="839.3" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.46%)</title><rect x="836.3" y="179.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="839.3" y="190.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.11%)</title><rect x="841.7" y="195.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="844.7" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.11%)</title><rect x="841.7" y="179.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="844.7" y="190.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.11%)</title><rect x="841.7" y="163.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="844.7" y="174.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.11%)</title><rect x="843.0" y="195.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="846.0" y="206.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.11%)</title><rect x="843.0" y="179.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="846.0" y="190.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.11%)</title><rect x="843.0" y="163.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="846.0" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.11%)</title><rect x="843.0" y="147.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="846.0" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (49 samples, 5.61%)</title><rect x="844.4" y="227.0" width="66.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="847.4" y="238.0">ru/mail..</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.11%)</title><rect x="844.4" y="211.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="847.4" y="222.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.11%)</title><rect x="844.4" y="195.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="847.4" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.11%)</title><rect x="844.4" y="179.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="847.4" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.11%)</title><rect x="844.4" y="163.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="847.4" y="174.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="844.4" y="147.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="847.4" y="158.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.11%)</title><rect x="844.4" y="131.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="847.4" y="142.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.11%)</title><rect x="844.4" y="115.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="847.4" y="126.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="844.4" y="99.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="847.4" y="110.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="844.4" y="83.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="847.4" y="94.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="844.4" y="67.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="847.4" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.11%)</title><rect x="845.7" y="211.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="848.7" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.11%)</title><rect x="845.7" y="195.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="848.7" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="845.7" y="179.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="848.7" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="845.7" y="163.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="848.7" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="845.7" y="147.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="848.7" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.11%)</title><rect x="845.7" y="131.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="848.7" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.11%)</title><rect x="845.7" y="115.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="848.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.put (47 samples, 5.38%)</title><rect x="847.1" y="211.0" width="63.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="850.1" y="222.0">ru/mail..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.34%)</title><rect x="847.1" y="195.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="850.1" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.34%)</title><rect x="847.1" y="179.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="850.1" y="190.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="847.1" y="163.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="850.1" y="174.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="847.1" y="147.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="850.1" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="847.1" y="131.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="850.1" y="142.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="847.1" y="115.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="850.1" y="126.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="847.1" y="99.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="850.1" y="110.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="847.1" y="83.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="850.1" y="94.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.11%)</title><rect x="847.1" y="67.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="850.1" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.23%)</title><rect x="848.4" y="163.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="851.4" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.23%)</title><rect x="848.4" y="147.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="851.4" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.23%)</title><rect x="848.4" y="131.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="851.4" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.23%)</title><rect x="848.4" y="115.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="851.4" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (44 samples, 5.03%)</title><rect x="851.1" y="195.0" width="59.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="854.1" y="206.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (44 samples, 5.03%)</title><rect x="851.1" y="179.0" width="59.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="854.1" y="190.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (7 samples, 0.80%)</title><rect x="851.1" y="163.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="854.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (7 samples, 0.80%)</title><rect x="851.1" y="147.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.1" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (7 samples, 0.80%)</title><rect x="851.1" y="131.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="854.1" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (7 samples, 0.80%)</title><rect x="851.1" y="115.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="854.1" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.11%)</title><rect x="859.2" y="99.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="862.2" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.80%)</title><rect x="860.6" y="163.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="863.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.80%)</title><rect x="860.6" y="147.0" width="9.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="863.6" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.57%)</title><rect x="860.6" y="131.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="863.6" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (1 samples, 0.11%)</title><rect x="860.6" y="115.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="863.6" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.34%)</title><rect x="861.9" y="115.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="864.9" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.34%)</title><rect x="861.9" y="99.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="864.9" y="110.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.34%)</title><rect x="861.9" y="83.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="864.9" y="94.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.23%)</title><rect x="861.9" y="67.0" width="2.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="864.9" y="78.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.11%)</title><rect x="863.3" y="51.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="866.3" y="62.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="863.3" y="35.0" width="1.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="866.3" y="46.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.11%)</title><rect x="864.6" y="67.0" width="1.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="867.6" y="78.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.11%)</title><rect x="864.6" y="51.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="867.6" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.11%)</title><rect x="866.0" y="115.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="869.0" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.11%)</title><rect x="866.0" y="99.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="869.0" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (1 samples, 0.11%)</title><rect x="866.0" y="83.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="869.0" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.23%)</title><rect x="867.3" y="131.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="870.3" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.23%)</title><rect x="867.3" y="115.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="870.3" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.11%)</title><rect x="868.7" y="99.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="871.7" y="110.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.11%)</title><rect x="868.7" y="83.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="871.7" y="94.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.11%)</title><rect x="868.7" y="67.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="871.7" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (30 samples, 3.43%)</title><rect x="870.0" y="163.0" width="40.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="873.0" y="174.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (30 samples, 3.43%)</title><rect x="870.0" y="147.0" width="40.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="873.0" y="158.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (30 samples, 3.43%)</title><rect x="870.0" y="131.0" width="40.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="873.0" y="142.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (29 samples, 3.32%)</title><rect x="871.4" y="115.0" width="39.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="874.4" y="126.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (29 samples, 3.32%)</title><rect x="871.4" y="99.0" width="39.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="874.4" y="110.0">jdk..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="871.4" y="83.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="874.4" y="94.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.11%)</title><rect x="872.7" y="83.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="875.7" y="94.0"></text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 0.80%)</title><rect x="874.1" y="83.0" width="9.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="877.1" y="94.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.11%)</title><rect x="875.4" y="67.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="878.4" y="78.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.11%)</title><rect x="876.8" y="67.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="879.8" y="78.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.11%)</title><rect x="878.1" y="67.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="881.1" y="78.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.23%)</title><rect x="879.5" y="67.0" width="2.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="882.5" y="78.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.11%)</title><rect x="882.2" y="67.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="885.2" y="78.0"></text>
</g>
<g>
<title>__pthread_cond_signal (18 samples, 2.06%)</title><rect x="883.5" y="83.0" width="24.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="886.5" y="94.0">_..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.23%)</title><rect x="907.8" y="83.0" width="2.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="910.8" y="94.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.11%)</title><rect x="910.5" y="243.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="913.5" y="254.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (6 samples, 0.69%)</title><rect x="911.9" y="243.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="914.9" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.69%)</title><rect x="911.9" y="227.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="914.9" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.34%)</title><rect x="911.9" y="211.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="914.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String.equals (3 samples, 0.34%)</title><rect x="911.9" y="195.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="914.9" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.34%)</title><rect x="915.9" y="211.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="918.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.34%)</title><rect x="915.9" y="195.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="918.9" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.34%)</title><rect x="920.0" y="243.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="923.0" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.34%)</title><rect x="920.0" y="227.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="923.0" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.34%)</title><rect x="920.0" y="211.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="923.0" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.34%)</title><rect x="920.0" y="195.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="923.0" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (18 samples, 2.06%)</title><rect x="924.0" y="275.0" width="24.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="927.0" y="286.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (7 samples, 0.80%)</title><rect x="926.7" y="259.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="929.7" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="930.8" y="243.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="933.8" y="254.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.11%)</title><rect x="930.8" y="227.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="933.8" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.11%)</title><rect x="930.8" y="211.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="933.8" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="930.8" y="195.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="933.8" y="206.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="930.8" y="179.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="933.8" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="930.8" y="163.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="933.8" y="174.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.11%)</title><rect x="930.8" y="147.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="933.8" y="158.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.11%)</title><rect x="930.8" y="131.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="933.8" y="142.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.23%)</title><rect x="932.1" y="243.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="935.1" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.11%)</title><rect x="934.8" y="243.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="937.8" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.11%)</title><rect x="934.8" y="227.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="937.8" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 1.03%)</title><rect x="936.2" y="259.0" width="12.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="939.2" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 1.03%)</title><rect x="936.2" y="243.0" width="12.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="939.2" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (4 samples, 0.46%)</title><rect x="948.3" y="275.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="951.3" y="286.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.23%)</title><rect x="949.7" y="259.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="952.7" y="270.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.23%)</title><rect x="949.7" y="243.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="952.7" y="254.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.11%)</title><rect x="949.7" y="227.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="952.7" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.11%)</title><rect x="949.7" y="211.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="952.7" y="222.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.11%)</title><rect x="951.0" y="227.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="954.0" y="238.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.11%)</title><rect x="951.0" y="211.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="954.0" y="222.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="952.4" y="259.0" width="1.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="955.4" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.11%)</title><rect x="953.7" y="275.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="956.7" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (31 samples, 3.55%)</title><rect x="955.1" y="275.0" width="41.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="958.1" y="286.0">one..</text>
</g>
<g>
<title>java/lang/String.regionMatches (12 samples, 1.37%)</title><rect x="968.6" y="259.0" width="16.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="971.6" y="270.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.23%)</title><rect x="969.9" y="243.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="972.9" y="254.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.11%)</title><rect x="972.6" y="243.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="975.6" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.92%)</title><rect x="974.0" y="243.0" width="10.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="977.0" y="254.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (7 samples, 0.80%)</title><rect x="975.3" y="227.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="978.3" y="238.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (7 samples, 0.80%)</title><rect x="975.3" y="211.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="978.3" y="222.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (7 samples, 0.80%)</title><rect x="975.3" y="195.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="978.3" y="206.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (7 samples, 0.80%)</title><rect x="975.3" y="179.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="978.3" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.11%)</title><rect x="983.4" y="163.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="986.4" y="174.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.92%)</title><rect x="984.8" y="259.0" width="10.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="987.8" y="270.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.11%)</title><rect x="984.8" y="243.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="987.8" y="254.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.11%)</title><rect x="984.8" y="227.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="987.8" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.80%)</title><rect x="986.1" y="243.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="989.1" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (7 samples, 0.80%)</title><rect x="986.1" y="227.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="989.1" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.46%)</title><rect x="987.5" y="211.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="990.5" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.23%)</title><rect x="992.9" y="211.0" width="2.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="995.9" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.11%)</title><rect x="995.6" y="259.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="998.6" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 1.14%)</title><rect x="996.9" y="275.0" width="13.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="999.9" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.92%)</title><rect x="999.6" y="259.0" width="10.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1002.6" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (89 samples, 10.18%)</title><rect x="1010.4" y="291.0" width="120.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1013.4" y="302.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (88 samples, 10.07%)</title><rect x="1011.8" y="275.0" width="118.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1014.8" y="286.0">one/nio/net/Na..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (35 samples, 4.00%)</title><rect x="1015.8" y="259.0" width="47.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1018.8" y="270.0">Java..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.11%)</title><rect x="1019.9" y="243.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1022.9" y="254.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.23%)</title><rect x="1021.2" y="243.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1024.2" y="254.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.23%)</title><rect x="1023.9" y="243.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1026.9" y="254.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (7 samples, 0.80%)</title><rect x="1026.6" y="243.0" width="9.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1029.6" y="254.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (1 samples, 0.11%)</title><rect x="1036.1" y="243.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1039.1" y="254.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.34%)</title><rect x="1037.4" y="243.0" width="4.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1040.4" y="254.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (11 samples, 1.26%)</title><rect x="1041.5" y="243.0" width="14.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1044.5" y="254.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.23%)</title><rect x="1046.9" y="227.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1049.9" y="238.0"></text>
</g>
<g>
<title>WeakPreserveExceptionMark::WeakPreserveExceptionMark(Thread*) (1 samples, 0.11%)</title><rect x="1049.6" y="227.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1052.6" y="238.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.34%)</title><rect x="1050.9" y="227.0" width="4.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1053.9" y="238.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.11%)</title><rect x="1053.6" y="211.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1056.6" y="222.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.11%)</title><rect x="1055.0" y="227.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1058.0" y="238.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (2 samples, 0.23%)</title><rect x="1056.3" y="243.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1059.3" y="254.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.34%)</title><rect x="1059.0" y="243.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1062.0" y="254.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.11%)</title><rect x="1063.1" y="259.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1066.1" y="270.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.11%)</title><rect x="1064.4" y="259.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1067.4" y="270.0"></text>
</g>
<g>
<title>__recv (47 samples, 5.38%)</title><rect x="1065.8" y="259.0" width="63.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1068.8" y="270.0">__recv</text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.11%)</title><rect x="1129.2" y="259.0" width="1.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1132.2" y="270.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.23%)</title><rect x="1130.6" y="307.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.6" y="318.0"></text>
</g>
<g>
<title>start_thread (42 samples, 4.81%)</title><rect x="1133.3" y="339.0" width="56.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1136.3" y="350.0">start_..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (42 samples, 4.81%)</title><rect x="1133.3" y="323.0" width="56.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1136.3" y="334.0">thread..</text>
</g>
<g>
<title>Thread::call_run() (42 samples, 4.81%)</title><rect x="1133.3" y="307.0" width="56.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.3" y="318.0">Thread..</text>
</g>
<g>
<title>GangWorker::loop() (42 samples, 4.81%)</title><rect x="1133.3" y="291.0" width="56.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.3" y="302.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (42 samples, 4.81%)</title><rect x="1133.3" y="275.0" width="56.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.3" y="286.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (15 samples, 1.72%)</title><rect x="1133.3" y="259.0" width="20.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.3" y="270.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (15 samples, 1.72%)</title><rect x="1133.3" y="243.0" width="20.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.3" y="254.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (13 samples, 1.49%)</title><rect x="1136.0" y="227.0" width="17.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.0" y="238.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (6 samples, 0.69%)</title><rect x="1145.4" y="211.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.4" y="222.0"></text>
</g>
<g>
<title>EnableIf&lt;!IsSame&lt;G1ScanEvacuatedObjClosure, OopClosure&gt;::value, void&gt;::type call_do_oop&lt;unsigned int, G1ScanEvacuatedObjClosure, OopClosure, G1ScanEvacuatedObjClosure&gt;(void (G1ScanEvacuatedObjClosure::*)(unsigned int*), void (OopClosure::*)(unsigned int*), G1ScanEvacuatedObjClosure*, unsigned int*) (5 samples, 0.57%)</title><rect x="1146.8" y="195.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.8" y="206.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (27 samples, 3.09%)</title><rect x="1153.5" y="259.0" width="36.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.5" y="270.0">G1R..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (27 samples, 3.09%)</title><rect x="1153.5" y="243.0" width="36.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.5" y="254.0">G1R..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (27 samples, 3.09%)</title><rect x="1153.5" y="227.0" width="36.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.5" y="238.0">G1C..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (27 samples, 3.09%)</title><rect x="1153.5" y="211.0" width="36.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.5" y="222.0">Dir..</text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (27 samples, 3.09%)</title><rect x="1153.5" y="195.0" width="36.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.5" y="206.0">G1R..</text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.23%)</title><rect x="1153.5" y="179.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.5" y="190.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.11%)</title><rect x="1154.9" y="163.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.9" y="174.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.11%)</title><rect x="1154.9" y="147.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.9" y="158.0"></text>
</g>
<g>
<title>G1ScanClosureBase::trim_queue_partially() (25 samples, 2.86%)</title><rect x="1156.2" y="179.0" width="33.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.2" y="190.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (19 samples, 2.17%)</title><rect x="1164.3" y="163.0" width="25.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.3" y="174.0">G..</text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (6 samples, 0.69%)</title><rect x="1181.9" y="147.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.9" y="158.0"></text>
</g>
<g>
<title>EnableIf&lt;!IsSame&lt;G1ScanEvacuatedObjClosure, OopClosure&gt;::value, void&gt;::type call_do_oop&lt;unsigned int, G1ScanEvacuatedObjClosure, OopClosure, G1ScanEvacuatedObjClosure&gt;(void (G1ScanEvacuatedObjClosure::*)(unsigned int*), void (OopClosure::*)(unsigned int*), G1ScanEvacuatedObjClosure*, unsigned int*) (5 samples, 0.57%)</title><rect x="1183.2" y="131.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.2" y="142.0"></text>
</g>
</g>
</svg>
