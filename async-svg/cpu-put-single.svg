<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="629"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="629"> </text>
<g id="frames">
<g>
<title>all (1,117 samples, 100.00%)</title><rect x="10.0" y="595.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="606.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.09%)</title><rect x="10.0" y="579.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.09%)</title><rect x="10.0" y="563.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="10.0" y="547.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.run (693 samples, 62.04%)</title><rect x="11.1" y="579.0" width="732.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.1" y="590.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (693 samples, 62.04%)</title><rect x="11.1" y="563.0" width="732.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.1" y="574.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (693 samples, 62.04%)</title><rect x="11.1" y="547.0" width="732.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.1" y="558.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/lang/Thread.interrupted (7 samples, 0.63%)</title><rect x="17.4" y="531.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.4" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (7 samples, 0.63%)</title><rect x="17.4" y="515.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.4" y="526.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (5 samples, 0.45%)</title><rect x="18.5" y="499.0" width="5.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="21.5" y="510.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.27%)</title><rect x="20.6" y="483.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="23.6" y="494.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.09%)</title><rect x="23.7" y="499.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="26.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.18%)</title><rect x="24.8" y="531.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.18%)</title><rect x="24.8" y="515.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 0.18%)</title><rect x="24.8" y="499.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="27.8" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$68/1815599437.run (1 samples, 0.09%)</title><rect x="25.8" y="483.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.18%)</title><rect x="26.9" y="531.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="28.0" y="515.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (344 samples, 30.80%)</title><rect x="29.0" y="531.0" width="363.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.0" y="542.0">java/util/concurrent/ThreadPoolExecutor.getTask</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (344 samples, 30.80%)</title><rect x="29.0" y="515.0" width="363.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.0" y="526.0">java/util/concurrent/ArrayBlockingQueue.take</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (278 samples, 24.89%)</title><rect x="34.3" y="499.0" width="293.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="37.3" y="510.0">java/util/concurrent/locks/AbstractQueu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (8 samples, 0.72%)</title><rect x="37.5" y="483.0" width="8.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (6 samples, 0.54%)</title><rect x="39.6" y="467.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (6 samples, 0.54%)</title><rect x="39.6" y="451.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.6" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.09%)</title><rect x="44.9" y="435.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="47.9" y="446.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="44.9" y="419.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="47.9" y="430.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.09%)</title><rect x="44.9" y="403.0" width="1.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="47.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (35 samples, 3.13%)</title><rect x="45.9" y="483.0" width="37.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="48.9" y="494.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (35 samples, 3.13%)</title><rect x="45.9" y="467.0" width="37.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.9" y="478.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (29 samples, 2.60%)</title><rect x="50.1" y="451.0" width="30.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="53.1" y="462.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (29 samples, 2.60%)</title><rect x="50.1" y="435.0" width="30.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.1" y="446.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (28 samples, 2.51%)</title><rect x="51.2" y="419.0" width="29.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.2" y="430.0">jd..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="51.2" y="403.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="54.2" y="414.0"></text>
</g>
<g>
<title>Unsafe_Unpark (20 samples, 1.79%)</title><rect x="52.3" y="403.0" width="21.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="55.3" y="414.0">U..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.27%)</title><rect x="55.4" y="387.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="58.4" y="398.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.09%)</title><rect x="58.6" y="387.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="61.6" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="59.7" y="387.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="62.7" y="398.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.09%)</title><rect x="61.8" y="387.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="64.8" y="398.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.45%)</title><rect x="62.8" y="387.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="65.8" y="398.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.18%)</title><rect x="68.1" y="387.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="71.1" y="398.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.27%)</title><rect x="70.2" y="387.0" width="3.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="73.2" y="398.0"></text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 0.63%)</title><rect x="73.4" y="403.0" width="7.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="76.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.18%)</title><rect x="80.8" y="451.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="83.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (14 samples, 1.25%)</title><rect x="82.9" y="483.0" width="14.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="85.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (14 samples, 1.25%)</title><rect x="82.9" y="467.0" width="14.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="85.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (216 samples, 19.34%)</title><rect x="97.7" y="483.0" width="228.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="100.7" y="494.0">java/util/concurrent/locks/Loc..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (215 samples, 19.25%)</title><rect x="98.7" y="467.0" width="227.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="101.7" y="478.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="107.2" y="451.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="110.2" y="462.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.09%)</title><rect x="108.2" y="451.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="111.2" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="109.3" y="451.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="112.3" y="462.0"></text>
</g>
<g>
<title>Unsafe_Park (126 samples, 11.28%)</title><rect x="110.4" y="451.0" width="133.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="113.4" y="462.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.18%)</title><rect x="123.0" y="435.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="126.0" y="446.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.09%)</title><rect x="125.1" y="435.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="128.1" y="446.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="126.2" y="435.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="129.2" y="446.0"></text>
</g>
<g>
<title>Monitor::unlock() (5 samples, 0.45%)</title><rect x="127.3" y="435.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="130.3" y="446.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (37 samples, 3.31%)</title><rect x="132.5" y="435.0" width="39.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="135.5" y="446.0">Par..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.09%)</title><rect x="141.0" y="419.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="144.0" y="430.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (9 samples, 0.81%)</title><rect x="142.1" y="419.0" width="9.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="145.1" y="430.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 0.36%)</title><rect x="147.3" y="403.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="150.3" y="414.0"></text>
</g>
<g>
<title>Monitor::unlock() (4 samples, 0.36%)</title><rect x="151.6" y="419.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="154.6" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.54%)</title><rect x="155.8" y="419.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="158.8" y="430.0"></text>
</g>
<g>
<title>__tls_get_addr (9 samples, 0.81%)</title><rect x="162.1" y="419.0" width="9.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="165.1" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.18%)</title><rect x="171.6" y="435.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="174.6" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="173.7" y="435.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="176.7" y="446.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.18%)</title><rect x="174.8" y="435.0" width="2.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="177.8" y="446.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.27%)</title><rect x="176.9" y="435.0" width="3.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="179.9" y="446.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.27%)</title><rect x="180.1" y="435.0" width="3.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="183.1" y="446.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (48 samples, 4.30%)</title><rect x="183.2" y="435.0" width="50.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="186.2" y="446.0">__pth..</text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.27%)</title><rect x="234.0" y="435.0" width="3.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="237.0" y="446.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.27%)</title><rect x="237.1" y="435.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="240.1" y="446.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="240.3" y="435.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="243.3" y="446.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (2 samples, 0.18%)</title><rect x="241.4" y="435.0" width="2.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="244.4" y="446.0"></text>
</g>
<g>
<title>[unknown] (71 samples, 6.36%)</title><rect x="243.5" y="451.0" width="75.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="246.5" y="462.0">[unknown]</text>
</g>
<g>
<title>__condvar_dec_grefs (6 samples, 0.54%)</title><rect x="243.5" y="435.0" width="6.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="246.5" y="446.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.54%)</title><rect x="249.8" y="435.0" width="6.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="252.8" y="446.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.45%)</title><rect x="256.1" y="435.0" width="5.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="259.1" y="446.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.18%)</title><rect x="261.4" y="435.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="264.4" y="446.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (52 samples, 4.66%)</title><rect x="263.5" y="435.0" width="55.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="266.5" y="446.0">pthre..</text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.09%)</title><rect x="318.5" y="451.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="321.5" y="462.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (6 samples, 0.54%)</title><rect x="319.5" y="451.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="322.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.18%)</title><rect x="325.9" y="483.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="328.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (17 samples, 1.52%)</title><rect x="328.0" y="499.0" width="17.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (17 samples, 1.52%)</title><rect x="328.0" y="483.0" width="17.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (17 samples, 1.52%)</title><rect x="328.0" y="467.0" width="17.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="331.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.09%)</title><rect x="328.0" y="451.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="331.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (15 samples, 1.34%)</title><rect x="329.0" y="451.0" width="15.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (15 samples, 1.34%)</title><rect x="329.0" y="435.0" width="15.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="332.0" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (15 samples, 1.34%)</title><rect x="329.0" y="419.0" width="15.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="332.0" y="430.0"></text>
</g>
<g>
<title>Unsafe_Park (12 samples, 1.07%)</title><rect x="330.1" y="403.0" width="12.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="333.1" y="414.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="331.1" y="387.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="334.1" y="398.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (7 samples, 0.63%)</title><rect x="332.2" y="387.0" width="7.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="335.2" y="398.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.27%)</title><rect x="334.3" y="371.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="337.3" y="382.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="336.4" y="355.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="339.4" y="366.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="337.5" y="371.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="340.5" y="382.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="338.5" y="371.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="341.5" y="382.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="339.6" y="387.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="342.6" y="398.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="340.7" y="387.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="343.7" y="398.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="341.7" y="387.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="344.7" y="398.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.18%)</title><rect x="342.8" y="403.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="345.8" y="414.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (2 samples, 0.18%)</title><rect x="342.8" y="387.0" width="2.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="345.8" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.09%)</title><rect x="344.9" y="451.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="347.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (44 samples, 3.94%)</title><rect x="345.9" y="499.0" width="46.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="348.9" y="510.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (44 samples, 3.94%)</title><rect x="345.9" y="483.0" width="46.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="348.9" y="494.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (44 samples, 3.94%)</title><rect x="345.9" y="467.0" width="46.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="348.9" y="478.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (44 samples, 3.94%)</title><rect x="345.9" y="451.0" width="46.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="348.9" y="462.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.18%)</title><rect x="353.3" y="435.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="356.3" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (35 samples, 3.13%)</title><rect x="355.4" y="435.0" width="37.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="358.4" y="446.0">jdk..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="355.4" y="419.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="358.4" y="430.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.18%)</title><rect x="356.5" y="419.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="359.5" y="430.0"></text>
</g>
<g>
<title>Unsafe_Unpark (19 samples, 1.70%)</title><rect x="358.6" y="419.0" width="20.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="361.6" y="430.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.18%)</title><rect x="359.7" y="403.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="362.7" y="414.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.09%)</title><rect x="361.8" y="403.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="364.8" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.18%)</title><rect x="362.8" y="403.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="365.8" y="414.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.18%)</title><rect x="365.0" y="403.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="368.0" y="414.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.09%)</title><rect x="367.1" y="403.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="370.1" y="414.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.18%)</title><rect x="368.1" y="403.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="371.1" y="414.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="370.2" y="403.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="373.2" y="414.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.18%)</title><rect x="371.3" y="403.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="374.3" y="414.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.27%)</title><rect x="373.4" y="403.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="376.4" y="414.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.18%)</title><rect x="376.6" y="403.0" width="2.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="379.6" y="414.0"></text>
</g>
<g>
<title>__pthread_cond_signal (12 samples, 1.07%)</title><rect x="378.7" y="419.0" width="12.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="381.7" y="430.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="391.4" y="419.0" width="1.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="394.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$68/1815599437.run (332 samples, 29.72%)</title><rect x="392.4" y="531.0" width="350.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="395.4" y="542.0">ru/mail/polis/service/mrsandman5/ServiceImpl$$La..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$put$1 (332 samples, 29.72%)</title><rect x="392.4" y="515.0" width="350.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="395.4" y="526.0">ru/mail/polis/service/mrsandman5/ServiceImpl.lam..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.putValue (332 samples, 29.72%)</title><rect x="392.4" y="499.0" width="350.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="395.4" y="510.0">ru/mail/polis/service/mrsandman5/ServiceImpl.put..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.27%)</title><rect x="396.6" y="483.0" width="3.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="399.6" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (124 samples, 11.10%)</title><rect x="399.8" y="483.0" width="131.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="402.8" y="494.0">one/nio/http/Htt..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (6 samples, 0.54%)</title><rect x="414.6" y="467.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="417.6" y="478.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.54%)</title><rect x="414.6" y="451.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="417.6" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.54%)</title><rect x="414.6" y="435.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="417.6" y="446.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.09%)</title><rect x="418.8" y="419.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="421.8" y="430.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="419.9" y="419.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="422.9" y="430.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="419.9" y="403.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="422.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (100 samples, 8.95%)</title><rect x="420.9" y="467.0" width="105.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="423.9" y="478.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (25 samples, 2.24%)</title><rect x="426.2" y="451.0" width="26.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="429.2" y="462.0">o..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (18 samples, 1.61%)</title><rect x="433.6" y="435.0" width="19.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="436.6" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (18 samples, 1.61%)</title><rect x="433.6" y="419.0" width="19.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="436.6" y="430.0"></text>
</g>
<g>
<title>java/lang/String.charAt (18 samples, 1.61%)</title><rect x="433.6" y="403.0" width="19.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="436.6" y="414.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.27%)</title><rect x="449.5" y="387.0" width="3.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="452.5" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (70 samples, 6.27%)</title><rect x="452.6" y="451.0" width="74.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="455.6" y="462.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session.write (70 samples, 6.27%)</title><rect x="452.6" y="435.0" width="74.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="455.6" y="446.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.09%)</title><rect x="454.7" y="419.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="457.7" y="430.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (2 samples, 0.18%)</title><rect x="455.8" y="419.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="458.8" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (65 samples, 5.82%)</title><rect x="457.9" y="419.0" width="68.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="460.9" y="430.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (65 samples, 5.82%)</title><rect x="457.9" y="403.0" width="68.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="460.9" y="414.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (25 samples, 2.24%)</title><rect x="462.1" y="387.0" width="26.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="465.1" y="398.0">J..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="467.4" y="371.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="470.4" y="382.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.09%)</title><rect x="468.5" y="371.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="471.5" y="382.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.27%)</title><rect x="469.5" y="371.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="472.5" y="382.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (4 samples, 0.36%)</title><rect x="472.7" y="371.0" width="4.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="475.7" y="382.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (2 samples, 0.18%)</title><rect x="476.9" y="371.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="479.9" y="382.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.09%)</title><rect x="479.0" y="371.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="482.0" y="382.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.54%)</title><rect x="480.1" y="371.0" width="6.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="483.1" y="382.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.09%)</title><rect x="485.4" y="355.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="488.4" y="366.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.09%)</title><rect x="486.4" y="371.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="489.4" y="382.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.09%)</title><rect x="487.5" y="371.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="490.5" y="382.0"></text>
</g>
<g>
<title>__libc_send (31 samples, 2.78%)</title><rect x="488.5" y="387.0" width="32.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="491.5" y="398.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.36%)</title><rect x="521.3" y="387.0" width="4.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="524.3" y="398.0"></text>
</g>
<g>
<title>send@plt (1 samples, 0.09%)</title><rect x="525.5" y="387.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="528.5" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.36%)</title><rect x="526.6" y="467.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="529.6" y="478.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.09%)</title><rect x="529.7" y="451.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="532.7" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.09%)</title><rect x="529.7" y="435.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="532.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.upsert (199 samples, 17.82%)</title><rect x="530.8" y="483.0" width="210.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="533.8" y="494.0">ru/mail/polis/dao/impl/DAOIm..</text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.09%)</title><rect x="534.0" y="467.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="537.0" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (14 samples, 1.25%)</title><rect x="535.0" y="467.0" width="14.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="538.0" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="535.0" y="451.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="538.0" y="462.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.09%)</title><rect x="535.0" y="435.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="538.0" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (13 samples, 1.16%)</title><rect x="536.1" y="451.0" width="13.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="539.1" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (13 samples, 1.16%)</title><rect x="536.1" y="435.0" width="13.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="539.1" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (13 samples, 1.16%)</title><rect x="536.1" y="419.0" width="13.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="539.1" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (13 samples, 1.16%)</title><rect x="536.1" y="403.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="539.1" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (13 samples, 1.16%)</title><rect x="536.1" y="387.0" width="13.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="539.1" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (13 samples, 1.16%)</title><rect x="536.1" y="371.0" width="13.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="539.1" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.18%)</title><rect x="547.7" y="355.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="550.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.09%)</title><rect x="549.8" y="467.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="552.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.09%)</title><rect x="549.8" y="451.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="552.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.09%)</title><rect x="549.8" y="435.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="552.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.fullTryAcquireShared (1 samples, 0.09%)</title><rect x="549.8" y="419.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="552.8" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="549.8" y="403.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="552.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (2 samples, 0.18%)</title><rect x="550.9" y="467.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="553.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (2 samples, 0.18%)</title><rect x="550.9" y="451.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="553.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (2 samples, 0.18%)</title><rect x="550.9" y="435.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="553.9" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.remove (1 samples, 0.09%)</title><rect x="551.9" y="419.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="554.9" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.09%)</title><rect x="551.9" y="403.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="554.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.upsert (178 samples, 15.94%)</title><rect x="553.0" y="467.0" width="188.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="556.0" y="478.0">ru/mail/polis/dao/impl/t..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (2 samples, 0.18%)</title><rect x="553.0" y="451.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="556.0" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (2 samples, 0.18%)</title><rect x="553.0" y="435.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="556.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (176 samples, 15.76%)</title><rect x="555.1" y="451.0" width="185.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="558.1" y="462.0">java/util/concurrent/Con..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.18%)</title><rect x="558.3" y="435.0" width="2.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="561.3" y="446.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.18%)</title><rect x="558.3" y="419.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="561.3" y="430.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.09%)</title><rect x="560.4" y="435.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="563.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (168 samples, 15.04%)</title><rect x="561.4" y="435.0" width="177.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="564.4" y="446.0">java/util/concurrent/Co..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.09%)</title><rect x="568.8" y="419.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="571.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addCount (5 samples, 0.45%)</title><rect x="569.9" y="419.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="572.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (5 samples, 0.45%)</title><rect x="569.9" y="403.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="572.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.09%)</title><rect x="574.1" y="387.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="577.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (22 samples, 1.97%)</title><rect x="575.2" y="419.0" width="23.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="578.2" y="430.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.09%)</title><rect x="575.2" y="403.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="578.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (10 samples, 0.90%)</title><rect x="576.2" y="403.0" width="10.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="579.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.09%)</title><rect x="585.7" y="387.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="588.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.09%)</title><rect x="585.7" y="371.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="588.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (11 samples, 0.98%)</title><rect x="586.8" y="403.0" width="11.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="589.8" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.63%)</title><rect x="591.0" y="387.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="594.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.63%)</title><rect x="591.0" y="371.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="594.0" y="382.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.45%)</title><rect x="591.0" y="355.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="594.0" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.18%)</title><rect x="596.3" y="355.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="599.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (133 samples, 11.91%)</title><rect x="598.4" y="419.0" width="140.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="601.4" y="430.0">java/util/concurre..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (70 samples, 6.27%)</title><rect x="665.0" y="403.0" width="73.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="668.0" y="414.0">java/nio..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (70 samples, 6.27%)</title><rect x="665.0" y="387.0" width="73.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="668.0" y="398.0">java/nio..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (59 samples, 5.28%)</title><rect x="665.0" y="371.0" width="62.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="668.0" y="382.0">java/n..</text>
</g>
<g>
<title>vectorizedMismatch (5 samples, 0.45%)</title><rect x="722.0" y="355.0" width="5.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="725.0" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (11 samples, 0.98%)</title><rect x="727.3" y="371.0" width="11.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="730.3" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.18%)</title><rect x="738.9" y="435.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="741.9" y="446.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.09%)</title><rect x="740.0" y="419.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="743.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.upsert (2 samples, 0.18%)</title><rect x="741.0" y="483.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="744.0" y="494.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (374 samples, 33.48%)</title><rect x="743.1" y="579.0" width="395.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="746.1" y="590.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>[unknown] (4 samples, 0.36%)</title><rect x="746.3" y="563.0" width="4.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="749.3" y="574.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.36%)</title><rect x="746.3" y="547.0" width="4.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="749.3" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.36%)</title><rect x="746.3" y="531.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="749.3" y="542.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.09%)</title><rect x="750.5" y="563.0" width="1.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="753.5" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2 samples, 0.18%)</title><rect x="751.6" y="563.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="754.6" y="574.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (8 samples, 0.72%)</title><rect x="753.7" y="563.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="756.7" y="574.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (7 samples, 0.63%)</title><rect x="754.8" y="547.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="757.8" y="558.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (7 samples, 0.63%)</title><rect x="754.8" y="531.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="757.8" y="542.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (102 samples, 9.13%)</title><rect x="762.2" y="563.0" width="107.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="765.2" y="574.0">one/nio/net/N..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (94 samples, 8.42%)</title><rect x="770.6" y="547.0" width="99.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="773.6" y="558.0">one/nio/net/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (3 samples, 0.27%)</title><rect x="778.0" y="531.0" width="3.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="781.0" y="542.0"></text>
</g>
<g>
<title>__clock_gettime (15 samples, 1.34%)</title><rect x="781.2" y="531.0" width="15.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="784.2" y="542.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="793.8" y="515.0" width="1.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="796.8" y="526.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.18%)</title><rect x="794.9" y="515.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="797.9" y="526.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (3 samples, 0.27%)</title><rect x="797.0" y="531.0" width="3.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="800.0" y="542.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.18%)</title><rect x="800.2" y="531.0" width="2.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="803.2" y="542.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.27%)</title><rect x="802.3" y="531.0" width="3.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="805.3" y="542.0"></text>
</g>
<g>
<title>clock_gettime@plt (3 samples, 0.27%)</title><rect x="805.5" y="531.0" width="3.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="808.5" y="542.0"></text>
</g>
<g>
<title>epoll_wait (58 samples, 5.19%)</title><rect x="808.6" y="531.0" width="61.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="811.6" y="542.0">epoll_..</text>
</g>
<g>
<title>one/nio/net/Session.process (250 samples, 22.38%)</title><rect x="869.9" y="563.0" width="264.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="872.9" y="574.0">one/nio/net/Session.process</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.09%)</title><rect x="878.4" y="547.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="881.4" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (241 samples, 21.58%)</title><rect x="879.4" y="547.0" width="254.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="882.4" y="558.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (144 samples, 12.89%)</title><rect x="879.4" y="531.0" width="152.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="882.4" y="542.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>RequestHandler1_response.handleRequest (2 samples, 0.18%)</title><rect x="896.3" y="515.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="899.3" y="526.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.36%)</title><rect x="898.4" y="515.0" width="4.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="901.4" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (76 samples, 6.80%)</title><rect x="902.7" y="515.0" width="80.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="905.7" y="526.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (76 samples, 6.80%)</title><rect x="902.7" y="499.0" width="80.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="905.7" y="510.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler1_response.handleRequest (66 samples, 5.91%)</title><rect x="902.7" y="483.0" width="69.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="905.7" y="494.0">Request..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (8 samples, 0.72%)</title><rect x="902.7" y="467.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="905.7" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (8 samples, 0.72%)</title><rect x="902.7" y="451.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="905.7" y="462.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.09%)</title><rect x="903.7" y="435.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="906.7" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.09%)</title><rect x="903.7" y="419.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="906.7" y="430.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.09%)</title><rect x="904.8" y="435.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="907.8" y="446.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="905.8" y="435.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="908.8" y="446.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.27%)</title><rect x="907.9" y="435.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="910.9" y="446.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.09%)</title><rect x="910.1" y="419.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="913.1" y="430.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.09%)</title><rect x="910.1" y="403.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="913.1" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.09%)</title><rect x="910.1" y="387.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="913.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (58 samples, 5.19%)</title><rect x="911.1" y="467.0" width="61.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="914.1" y="478.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.put (58 samples, 5.19%)</title><rect x="911.1" y="451.0" width="61.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="914.1" y="462.0">ru/mai..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (58 samples, 5.19%)</title><rect x="911.1" y="435.0" width="61.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="914.1" y="446.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (58 samples, 5.19%)</title><rect x="911.1" y="419.0" width="61.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="914.1" y="430.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (17 samples, 1.52%)</title><rect x="911.1" y="403.0" width="18.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="914.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (17 samples, 1.52%)</title><rect x="911.1" y="387.0" width="18.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="914.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (17 samples, 1.52%)</title><rect x="911.1" y="371.0" width="18.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="914.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (17 samples, 1.52%)</title><rect x="911.1" y="355.0" width="18.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="914.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (17 samples, 1.52%)</title><rect x="911.1" y="339.0" width="18.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="914.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (16 samples, 1.43%)</title><rect x="911.1" y="323.0" width="16.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="914.1" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (16 samples, 1.43%)</title><rect x="911.1" y="307.0" width="16.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="914.1" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (16 samples, 1.43%)</title><rect x="911.1" y="291.0" width="16.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="914.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.09%)</title><rect x="928.0" y="323.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="931.0" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.09%)</title><rect x="928.0" y="307.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="931.0" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.09%)</title><rect x="928.0" y="291.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="931.0" y="302.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.09%)</title><rect x="928.0" y="275.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="931.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (13 samples, 1.16%)</title><rect x="929.1" y="403.0" width="13.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="932.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (13 samples, 1.16%)</title><rect x="929.1" y="387.0" width="13.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="932.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (12 samples, 1.07%)</title><rect x="929.1" y="371.0" width="12.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="932.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (11 samples, 0.98%)</title><rect x="930.1" y="355.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="933.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 0.98%)</title><rect x="930.1" y="339.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="933.1" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (10 samples, 0.90%)</title><rect x="930.1" y="323.0" width="10.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="933.1" y="334.0"></text>
</g>
<g>
<title>Unsafe_Park (8 samples, 0.72%)</title><rect x="930.1" y="307.0" width="8.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="933.1" y="318.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.09%)</title><rect x="930.1" y="291.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="933.1" y="302.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.36%)</title><rect x="931.2" y="291.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="934.2" y="302.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.18%)</title><rect x="932.2" y="275.0" width="2.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="935.2" y="286.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.09%)</title><rect x="934.4" y="275.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="937.4" y="286.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="935.4" y="291.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="938.4" y="302.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.18%)</title><rect x="936.5" y="291.0" width="2.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="939.5" y="302.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.18%)</title><rect x="938.6" y="307.0" width="2.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="941.6" y="318.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (2 samples, 0.18%)</title><rect x="938.6" y="291.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="941.6" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.09%)</title><rect x="940.7" y="323.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="943.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.09%)</title><rect x="941.7" y="371.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="944.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (28 samples, 2.51%)</title><rect x="942.8" y="403.0" width="29.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="945.8" y="414.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (28 samples, 2.51%)</title><rect x="942.8" y="387.0" width="29.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="945.8" y="398.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (28 samples, 2.51%)</title><rect x="942.8" y="371.0" width="29.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="945.8" y="382.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (28 samples, 2.51%)</title><rect x="942.8" y="355.0" width="29.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="945.8" y="366.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (22 samples, 1.97%)</title><rect x="949.1" y="339.0" width="23.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="952.1" y="350.0">j..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="949.1" y="323.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="952.1" y="334.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="950.2" y="323.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="953.2" y="334.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.09%)</title><rect x="951.3" y="323.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="954.3" y="334.0"></text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 0.63%)</title><rect x="952.3" y="323.0" width="7.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="955.3" y="334.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.18%)</title><rect x="952.3" y="307.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="955.3" y="318.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.09%)</title><rect x="954.4" y="307.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="957.4" y="318.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.18%)</title><rect x="955.5" y="307.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="958.5" y="318.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.18%)</title><rect x="957.6" y="307.0" width="2.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="960.6" y="318.0"></text>
</g>
<g>
<title>__pthread_cond_signal (11 samples, 0.98%)</title><rect x="959.7" y="323.0" width="11.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="962.7" y="334.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="971.3" y="323.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="974.3" y="334.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (10 samples, 0.90%)</title><rect x="972.4" y="483.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="975.4" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.90%)</title><rect x="972.4" y="467.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="975.4" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.27%)</title><rect x="972.4" y="451.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="975.4" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.63%)</title><rect x="975.6" y="451.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="978.6" y="462.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (7 samples, 0.63%)</title><rect x="975.6" y="435.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="978.6" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (7 samples, 0.63%)</title><rect x="975.6" y="419.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="978.6" y="430.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="981.9" y="403.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="984.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (20 samples, 1.79%)</title><rect x="982.9" y="515.0" width="21.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="985.9" y="526.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.27%)</title><rect x="985.1" y="499.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="988.1" y="510.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.27%)</title><rect x="985.1" y="483.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="988.1" y="494.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.27%)</title><rect x="985.1" y="467.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="988.1" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.27%)</title><rect x="985.1" y="451.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="988.1" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.09%)</title><rect x="987.2" y="435.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="990.2" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.72%)</title><rect x="988.2" y="499.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="991.2" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.72%)</title><rect x="988.2" y="483.0" width="8.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="991.2" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (7 samples, 0.63%)</title><rect x="996.7" y="499.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="999.7" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 0.81%)</title><rect x="1004.1" y="515.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1007.1" y="526.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.72%)</title><rect x="1005.1" y="499.0" width="8.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1008.1" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.72%)</title><rect x="1005.1" y="483.0" width="8.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1008.1" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.18%)</title><rect x="1011.5" y="467.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1014.5" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (17 samples, 1.52%)</title><rect x="1013.6" y="515.0" width="17.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1016.6" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.36%)</title><rect x="1027.3" y="499.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1030.3" y="510.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (4 samples, 0.36%)</title><rect x="1031.5" y="531.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1034.5" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.09%)</title><rect x="1034.7" y="515.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1037.7" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (93 samples, 8.33%)</title><rect x="1035.8" y="531.0" width="98.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1038.8" y="542.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (87 samples, 7.79%)</title><rect x="1042.1" y="515.0" width="91.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1045.1" y="526.0">one/nio/net..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (26 samples, 2.33%)</title><rect x="1053.7" y="499.0" width="27.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1056.7" y="510.0">J..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.18%)</title><rect x="1055.8" y="483.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1058.8" y="494.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.18%)</title><rect x="1057.9" y="483.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1060.9" y="494.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="1060.1" y="483.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1063.1" y="494.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (6 samples, 0.54%)</title><rect x="1061.1" y="483.0" width="6.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1064.1" y="494.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (2 samples, 0.18%)</title><rect x="1067.5" y="483.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1070.5" y="494.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (8 samples, 0.72%)</title><rect x="1069.6" y="483.0" width="8.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1072.6" y="494.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.09%)</title><rect x="1077.0" y="467.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1080.0" y="478.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.09%)</title><rect x="1077.0" y="451.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1080.0" y="462.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.09%)</title><rect x="1078.0" y="483.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1081.0" y="494.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.18%)</title><rect x="1079.1" y="483.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1082.1" y="494.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (6 samples, 0.54%)</title><rect x="1081.2" y="499.0" width="6.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1084.2" y="510.0"></text>
</g>
<g>
<title>__recv (42 samples, 3.76%)</title><rect x="1087.5" y="499.0" width="44.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1090.5" y="510.0">__recv</text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.09%)</title><rect x="1131.9" y="499.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1134.9" y="510.0"></text>
</g>
<g>
<title>recv@plt (1 samples, 0.09%)</title><rect x="1133.0" y="499.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1136.0" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.36%)</title><rect x="1134.0" y="563.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.0" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="1135.1" y="547.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1138.1" y="558.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.18%)</title><rect x="1136.1" y="547.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1139.1" y="558.0"></text>
</g>
<g>
<title>start_thread (49 samples, 4.39%)</title><rect x="1138.2" y="579.0" width="51.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1141.2" y="590.0">start..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (49 samples, 4.39%)</title><rect x="1138.2" y="563.0" width="51.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1141.2" y="574.0">threa..</text>
</g>
<g>
<title>Thread::call_run() (49 samples, 4.39%)</title><rect x="1138.2" y="547.0" width="51.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.2" y="558.0">Threa..</text>
</g>
<g>
<title>GangWorker::loop() (32 samples, 2.86%)</title><rect x="1138.2" y="531.0" width="33.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.2" y="542.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (32 samples, 2.86%)</title><rect x="1138.2" y="515.0" width="33.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.2" y="526.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 1.07%)</title><rect x="1138.2" y="499.0" width="12.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.2" y="510.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (12 samples, 1.07%)</title><rect x="1138.2" y="483.0" width="12.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.2" y="494.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (9 samples, 0.81%)</title><rect x="1141.4" y="467.0" width="9.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.4" y="478.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (4 samples, 0.36%)</title><rect x="1146.7" y="451.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.7" y="462.0"></text>
</g>
<g>
<title>EnableIf&lt;!IsSame&lt;G1ScanEvacuatedObjClosure, OopClosure&gt;::value, void&gt;::type call_do_oop&lt;unsigned int, G1ScanEvacuatedObjClosure, OopClosure, G1ScanEvacuatedObjClosure&gt;(void (G1ScanEvacuatedObjClosure::*)(unsigned int*), void (OopClosure::*)(unsigned int*), G1ScanEvacuatedObjClosure*, unsigned int*) (3 samples, 0.27%)</title><rect x="1147.7" y="435.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.7" y="446.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (14 samples, 1.25%)</title><rect x="1150.9" y="499.0" width="14.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.9" y="510.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (14 samples, 1.25%)</title><rect x="1150.9" y="483.0" width="14.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.9" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (14 samples, 1.25%)</title><rect x="1150.9" y="467.0" width="14.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.9" y="478.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (14 samples, 1.25%)</title><rect x="1150.9" y="451.0" width="14.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.9" y="462.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (14 samples, 1.25%)</title><rect x="1150.9" y="435.0" width="14.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.9" y="446.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.18%)</title><rect x="1150.9" y="419.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.9" y="430.0"></text>
</g>
<g>
<title>void OopOopIterateBoundedDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate_bounded&lt;ObjArrayKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*, MemRegion) (1 samples, 0.09%)</title><rect x="1150.9" y="403.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.9" y="414.0"></text>
</g>
<g>
<title>EnableIf&lt;!IsSame&lt;G1ScanObjsDuringUpdateRSClosure, OopClosure&gt;::value, void&gt;::type call_do_oop&lt;unsigned int, G1ScanObjsDuringUpdateRSClosure, OopClosure, G1ScanObjsDuringUpdateRSClosure&gt;(void (G1ScanObjsDuringUpdateRSClosure::*)(unsigned int*), void (OopClosure::*)(unsigned int*), G1ScanObjsDuringUpdateRSClosure*, unsigned int*) (1 samples, 0.09%)</title><rect x="1150.9" y="387.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.9" y="398.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (1 samples, 0.09%)</title><rect x="1152.0" y="403.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.0" y="414.0"></text>
</g>
<g>
<title>EnableIf&lt;!IsSame&lt;G1ScanObjsDuringUpdateRSClosure, OopClosure&gt;::value, void&gt;::type call_do_oop&lt;unsigned int, G1ScanObjsDuringUpdateRSClosure, OopClosure, G1ScanObjsDuringUpdateRSClosure&gt;(void (G1ScanObjsDuringUpdateRSClosure::*)(unsigned int*), void (OopClosure::*)(unsigned int*), G1ScanObjsDuringUpdateRSClosure*, unsigned int*) (1 samples, 0.09%)</title><rect x="1152.0" y="387.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.0" y="398.0"></text>
</g>
<g>
<title>G1ScanClosureBase::trim_queue_partially() (12 samples, 1.07%)</title><rect x="1153.0" y="419.0" width="12.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.0" y="430.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (10 samples, 0.90%)</title><rect x="1154.1" y="403.0" width="10.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.1" y="414.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (7 samples, 0.63%)</title><rect x="1157.3" y="387.0" width="7.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.3" y="398.0"></text>
</g>
<g>
<title>EnableIf&lt;!IsSame&lt;G1ScanEvacuatedObjClosure, OopClosure&gt;::value, void&gt;::type call_do_oop&lt;unsigned int, G1ScanEvacuatedObjClosure, OopClosure, G1ScanEvacuatedObjClosure&gt;(void (G1ScanEvacuatedObjClosure::*)(unsigned int*), void (OopClosure::*)(unsigned int*), G1ScanEvacuatedObjClosure*, unsigned int*) (5 samples, 0.45%)</title><rect x="1159.4" y="371.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.4" y="382.0"></text>
</g>
<g>
<title>void objArrayOopDesc::oop_iterate_range&lt;G1ScanEvacuatedObjClosure&gt;(G1ScanEvacuatedObjClosure*, int, int) (1 samples, 0.09%)</title><rect x="1164.6" y="403.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.6" y="414.0"></text>
</g>
<g>
<title>EnableIf&lt;!IsSame&lt;G1ScanEvacuatedObjClosure, OopClosure&gt;::value, void&gt;::type call_do_oop&lt;unsigned int, G1ScanEvacuatedObjClosure, OopClosure, G1ScanEvacuatedObjClosure&gt;(void (G1ScanEvacuatedObjClosure::*)(unsigned int*), void (OopClosure::*)(unsigned int*), G1ScanEvacuatedObjClosure*, unsigned int*) (1 samples, 0.09%)</title><rect x="1164.6" y="387.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.6" y="398.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.18%)</title><rect x="1165.7" y="499.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.7" y="510.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.18%)</title><rect x="1165.7" y="483.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.7" y="494.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.18%)</title><rect x="1165.7" y="467.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.7" y="478.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (2 samples, 0.18%)</title><rect x="1165.7" y="451.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.7" y="462.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_card(MemRegion, unsigned int) (2 samples, 0.18%)</title><rect x="1165.7" y="435.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.7" y="446.0"></text>
</g>
<g>
<title>G1ScanClosureBase::trim_queue_partially() (2 samples, 0.18%)</title><rect x="1165.7" y="419.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.7" y="430.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.18%)</title><rect x="1165.7" y="403.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.7" y="414.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (4 samples, 0.36%)</title><rect x="1167.8" y="499.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.8" y="510.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.27%)</title><rect x="1167.8" y="483.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.8" y="494.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="1167.8" y="467.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.8" y="478.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (1 samples, 0.09%)</title><rect x="1167.8" y="451.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.8" y="462.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (1 samples, 0.09%)</title><rect x="1167.8" y="435.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.8" y="446.0"></text>
</g>
<g>
<title>G1ParCopyHelper::trim_queue_partially() (1 samples, 0.09%)</title><rect x="1167.8" y="419.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.8" y="430.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.18%)</title><rect x="1168.9" y="467.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.9" y="478.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.18%)</title><rect x="1168.9" y="451.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.9" y="462.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (1 samples, 0.09%)</title><rect x="1171.0" y="483.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.0" y="494.0"></text>
</g>
<g>
<title>G1ParCopyHelper::trim_queue_partially() (1 samples, 0.09%)</title><rect x="1171.0" y="467.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.0" y="478.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1171.0" y="451.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.0" y="462.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (17 samples, 1.52%)</title><rect x="1172.0" y="531.0" width="18.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.0" y="542.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (17 samples, 1.52%)</title><rect x="1172.0" y="515.0" width="18.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.0" y="526.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (17 samples, 1.52%)</title><rect x="1172.0" y="499.0" width="18.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.0" y="510.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (17 samples, 1.52%)</title><rect x="1172.0" y="483.0" width="18.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.0" y="494.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (17 samples, 1.52%)</title><rect x="1172.0" y="467.0" width="18.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.0" y="478.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (12 samples, 1.07%)</title><rect x="1172.0" y="451.0" width="12.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.0" y="462.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.09%)</title><rect x="1172.0" y="435.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.0" y="446.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.09%)</title><rect x="1172.0" y="419.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.0" y="430.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.18%)</title><rect x="1173.1" y="435.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.1" y="446.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.18%)</title><rect x="1173.1" y="419.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.1" y="430.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.09%)</title><rect x="1173.1" y="403.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.1" y="414.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1173.1" y="387.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.1" y="398.0"></text>
</g>
<g>
<title>__memset_avx2_erms (1 samples, 0.09%)</title><rect x="1174.2" y="403.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1177.2" y="414.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (9 samples, 0.81%)</title><rect x="1175.2" y="435.0" width="9.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.2" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.09%)</title><rect x="1175.2" y="419.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.2" y="430.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.09%)</title><rect x="1175.2" y="403.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.2" y="414.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.18%)</title><rect x="1176.3" y="419.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.18%)</title><rect x="1176.3" y="403.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.3" y="414.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1177.3" y="387.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.3" y="398.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.18%)</title><rect x="1178.4" y="419.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="430.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::out_RegMask() const (1 samples, 0.09%)</title><rect x="1179.4" y="403.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.4" y="414.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.36%)</title><rect x="1180.5" y="419.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="430.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.09%)</title><rect x="1183.7" y="403.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1186.7" y="414.0"></text>
</g>
<g>
<title>Compile::Optimize() (3 samples, 0.27%)</title><rect x="1184.7" y="451.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.7" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (2 samples, 0.18%)</title><rect x="1184.7" y="435.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.7" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1184.7" y="419.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.7" y="430.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1185.8" y="419.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.8" y="430.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1185.8" y="403.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.8" y="414.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1185.8" y="387.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.8" y="398.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1186.8" y="435.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.8" y="446.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1186.8" y="419.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.8" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1187.9" y="451.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.9" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1187.9" y="435.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1187.9" y="419.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1187.9" y="403.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1187.9" y="387.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1187.9" y="371.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.9" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1187.9" y="355.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.9" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1187.9" y="339.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1187.9" y="323.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1187.9" y="307.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1187.9" y="291.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1187.9" y="275.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.9" y="286.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1187.9" y="259.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.9" y="270.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.09%)</title><rect x="1187.9" y="243.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.9" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1188.9" y="259.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1188.9" y="243.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.9" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1188.9" y="227.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1188.9" y="211.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1188.9" y="195.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1188.9" y="179.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1188.9" y="163.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.9" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1188.9" y="147.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1188.9" y="131.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1188.9" y="115.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1188.9" y="99.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.9" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1188.9" y="83.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="94.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.09%)</title><rect x="1188.9" y="67.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.9" y="78.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="51.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="62.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1188.9" y="35.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.9" y="46.0"></text>
</g>
</g>
</svg>
