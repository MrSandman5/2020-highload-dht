<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="357"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="357"> </text>
<g id="frames">
<g>
<title>all (2,236 samples, 100.00%)</title><rect x="10.0" y="323.0" width="1180.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.0" y="334.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (1,504 samples, 67.26%)</title><rect x="10.0" y="307.0" width="793.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,504 samples, 67.26%)</title><rect x="10.0" y="291.0" width="793.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,504 samples, 67.26%)</title><rect x="10.0" y="275.0" width="793.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (12 samples, 0.54%)</title><rect x="10.0" y="259.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.poll (12 samples, 0.54%)</title><rect x="10.0" y="243.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (12 samples, 0.54%)</title><rect x="10.0" y="227.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.snode (12 samples, 0.54%)</title><rect x="10.0" y="211.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>java.util.concurrent.SynchronousQueue$TransferStack$SNode (12 samples, 0.54%)</title><rect x="10.0" y="195.0" width="6.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$75/1913289223.run (1,492 samples, 66.73%)</title><rect x="16.3" y="259.0" width="787.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="19.3" y="270.0">ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$75/1913289223.run</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$asyncExecute$4 (1,492 samples, 66.73%)</title><rect x="16.3" y="243.0" width="787.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.3" y="254.0">ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$asyncExecute$4</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$73/1522355682.supply (1,078 samples, 48.21%)</title><rect x="16.3" y="227.0" width="568.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.3" y="238.0">ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$73/1522355682.supply</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$response$0 (1,078 samples, 48.21%)</title><rect x="16.3" y="211.0" width="568.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.3" y="222.0">ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$response$0</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.proxy (1,078 samples, 48.21%)</title><rect x="16.3" y="195.0" width="568.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.3" y="206.0">ru/mail/polis/service/mrsandman5/ServiceImpl.proxy</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,078 samples, 48.21%)</title><rect x="16.3" y="179.0" width="568.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.3" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,078 samples, 48.21%)</title><rect x="16.3" y="163.0" width="568.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="19.3" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (2 samples, 0.09%)</title><rect x="16.3" y="147.0" width="1.1" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="19.3" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (1,012 samples, 45.26%)</title><rect x="17.4" y="147.0" width="534.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.4" y="158.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (372 samples, 16.64%)</title><rect x="17.4" y="131.0" width="196.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="20.4" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (640 samples, 28.62%)</title><rect x="213.7" y="131.0" width="337.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="216.7" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (41 samples, 1.83%)</title><rect x="551.4" y="147.0" width="21.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="554.4" y="158.0">o..</text>
</g>
<g>
<title>byte[] (2 samples, 0.09%)</title><rect x="551.4" y="131.0" width="1.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="554.4" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.04%)</title><rect x="552.5" y="131.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="555.5" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="552.5" y="115.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="555.5" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.04%)</title><rect x="552.5" y="99.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="555.5" y="110.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.04%)</title><rect x="552.5" y="83.0" width="0.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="555.5" y="94.0"></text>
</g>
<g>
<title>one.nio.http.Response (7 samples, 0.31%)</title><rect x="553.0" y="131.0" width="3.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="556.0" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (28 samples, 1.25%)</title><rect x="556.7" y="131.0" width="14.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="559.7" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (28 samples, 1.25%)</title><rect x="556.7" y="115.0" width="14.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="559.7" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (28 samples, 1.25%)</title><rect x="556.7" y="99.0" width="14.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="559.7" y="110.0"></text>
</g>
<g>
<title>char[] (22 samples, 0.98%)</title><rect x="556.7" y="83.0" width="11.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="559.7" y="94.0"></text>
</g>
<g>
<title>java.lang.String (4 samples, 0.18%)</title><rect x="568.3" y="83.0" width="2.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="571.3" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.09%)</title><rect x="570.4" y="83.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="573.4" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.09%)</title><rect x="570.4" y="67.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="573.4" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.09%)</title><rect x="570.4" y="51.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="573.4" y="62.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.09%)</title><rect x="570.4" y="35.0" width="1.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="573.4" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.04%)</title><rect x="571.5" y="131.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="574.5" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (1 samples, 0.04%)</title><rect x="571.5" y="115.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="574.5" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.09%)</title><rect x="572.0" y="131.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="575.0" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.09%)</title><rect x="572.0" y="115.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="575.0" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.09%)</title><rect x="572.0" y="99.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="575.0" y="110.0"></text>
</g>
<g>
<title>java.lang.String (2 samples, 0.09%)</title><rect x="572.0" y="83.0" width="1.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="575.0" y="94.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (19 samples, 0.85%)</title><rect x="573.1" y="147.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="576.1" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (19 samples, 0.85%)</title><rect x="573.1" y="131.0" width="10.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="576.1" y="142.0"></text>
</g>
<g>
<title>byte[] (19 samples, 0.85%)</title><rect x="573.1" y="115.0" width="10.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="576.1" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.13%)</title><rect x="583.1" y="147.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="586.1" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.13%)</title><rect x="583.1" y="131.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="586.1" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.13%)</title><rect x="583.1" y="115.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="586.1" y="126.0"></text>
</g>
<g>
<title>java.lang.String (2 samples, 0.09%)</title><rect x="583.1" y="99.0" width="1.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="586.1" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.04%)</title><rect x="584.2" y="99.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="587.2" y="110.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.04%)</title><rect x="584.2" y="83.0" width="0.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="587.2" y="94.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (1 samples, 0.04%)</title><rect x="584.7" y="147.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="587.7" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (1 samples, 0.04%)</title><rect x="584.7" y="131.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="587.7" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (1 samples, 0.04%)</title><rect x="584.7" y="115.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="587.7" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (1 samples, 0.04%)</title><rect x="584.7" y="99.0" width="0.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="587.7" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$79/940936934.supply (311 samples, 13.91%)</title><rect x="585.2" y="227.0" width="164.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="588.2" y="238.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$response$2 (311 samples, 13.91%)</title><rect x="585.2" y="211.0" width="164.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="588.2" y="222.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.put (311 samples, 13.91%)</title><rect x="585.2" y="195.0" width="164.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="588.2" y="206.0">ru/mail/polis/service..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (39 samples, 1.74%)</title><rect x="585.2" y="179.0" width="20.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="588.2" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (39 samples, 1.74%)</title><rect x="585.2" y="163.0" width="20.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="588.2" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (39 samples, 1.74%)</title><rect x="585.2" y="147.0" width="20.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="588.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.upsert (215 samples, 9.62%)</title><rect x="605.8" y="179.0" width="113.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="608.8" y="190.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (49 samples, 2.19%)</title><rect x="605.8" y="163.0" width="25.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="608.8" y="174.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (49 samples, 2.19%)</title><rect x="605.8" y="147.0" width="25.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="608.8" y="158.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (53 samples, 2.37%)</title><rect x="631.7" y="163.0" width="27.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="634.7" y="174.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (53 samples, 2.37%)</title><rect x="631.7" y="147.0" width="27.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="634.7" y="158.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.04%)</title><rect x="659.6" y="163.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="662.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.04%)</title><rect x="659.6" y="147.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="662.6" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.04%)</title><rect x="659.6" y="131.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="662.6" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="659.6" y="115.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="662.6" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.04%)</title><rect x="659.6" y="99.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="662.6" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.04%)</title><rect x="659.6" y="83.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="662.6" y="94.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (1 samples, 0.04%)</title><rect x="659.6" y="67.0" width="0.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="662.6" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.upsert (112 samples, 5.01%)</title><rect x="660.2" y="163.0" width="59.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="663.2" y="174.0">ru/mai..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (51 samples, 2.28%)</title><rect x="660.2" y="147.0" width="26.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="663.2" y="158.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (51 samples, 2.28%)</title><rect x="660.2" y="131.0" width="26.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="663.2" y="142.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (51 samples, 2.28%)</title><rect x="660.2" y="115.0" width="26.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="663.2" y="126.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (55 samples, 2.46%)</title><rect x="687.1" y="147.0" width="29.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="690.1" y="158.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (55 samples, 2.46%)</title><rect x="687.1" y="131.0" width="29.0" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="690.1" y="142.0">ja..</text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Value (6 samples, 0.27%)</title><rect x="716.1" y="147.0" width="3.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="719.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.emptyResponse (57 samples, 2.55%)</title><rect x="719.3" y="179.0" width="30.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="722.3" y="190.0">ru..</text>
</g>
<g>
<title>one.nio.http.Response (11 samples, 0.49%)</title><rect x="719.3" y="163.0" width="5.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="722.3" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (46 samples, 2.06%)</title><rect x="725.1" y="163.0" width="24.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="728.1" y="174.0">o..</text>
</g>
<g>
<title>byte[] (22 samples, 0.98%)</title><rect x="725.1" y="147.0" width="11.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="728.1" y="158.0"></text>
</g>
<g>
<title>java.lang.String[] (15 samples, 0.67%)</title><rect x="736.7" y="147.0" width="7.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="739.7" y="158.0"></text>
</g>
<g>
<title>java.lang.String (9 samples, 0.40%)</title><rect x="744.6" y="147.0" width="4.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="747.6" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.sendResponse (103 samples, 4.61%)</title><rect x="749.3" y="227.0" width="54.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="752.3" y="238.0">ru/ma..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (103 samples, 4.61%)</title><rect x="749.3" y="211.0" width="54.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="752.3" y="222.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (103 samples, 4.61%)</title><rect x="749.3" y="195.0" width="54.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="752.3" y="206.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (69 samples, 3.09%)</title><rect x="749.3" y="179.0" width="36.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="752.3" y="190.0">one..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (69 samples, 3.09%)</title><rect x="749.3" y="163.0" width="36.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="752.3" y="174.0">one..</text>
</g>
<g>
<title>byte[] (69 samples, 3.09%)</title><rect x="749.3" y="147.0" width="36.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="752.3" y="158.0">byt..</text>
</g>
<g>
<title>one/nio/net/Session.write (34 samples, 1.52%)</title><rect x="785.8" y="179.0" width="17.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="788.8" y="190.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (34 samples, 1.52%)</title><rect x="785.8" y="163.0" width="17.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="788.8" y="174.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (732 samples, 32.74%)</title><rect x="803.7" y="307.0" width="386.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="806.7" y="318.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (39 samples, 1.74%)</title><rect x="803.7" y="291.0" width="20.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="806.7" y="302.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (39 samples, 1.74%)</title><rect x="803.7" y="275.0" width="20.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="806.7" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (693 samples, 30.99%)</title><rect x="824.3" y="291.0" width="365.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="827.3" y="302.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (693 samples, 30.99%)</title><rect x="824.3" y="275.0" width="365.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="827.3" y="286.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (693 samples, 30.99%)</title><rect x="824.3" y="259.0" width="365.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="827.3" y="270.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (331 samples, 14.80%)</title><rect x="824.3" y="243.0" width="174.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="827.3" y="254.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (331 samples, 14.80%)</title><rect x="824.3" y="227.0" width="174.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="827.3" y="238.0">one/nio/http/HttpServe..</text>
</g>
<g>
<title>RequestHandler0_response.handleRequest (302 samples, 13.51%)</title><rect x="824.3" y="211.0" width="159.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="827.3" y="222.0">RequestHandler0_resp..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (20 samples, 0.89%)</title><rect x="824.3" y="195.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="827.3" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (20 samples, 0.89%)</title><rect x="824.3" y="179.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="827.3" y="190.0"></text>
</g>
<g>
<title>java/lang/String.substring (20 samples, 0.89%)</title><rect x="824.3" y="163.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="827.3" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (20 samples, 0.89%)</title><rect x="824.3" y="147.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="827.3" y="158.0"></text>
</g>
<g>
<title>java.lang.String (11 samples, 0.49%)</title><rect x="824.3" y="131.0" width="5.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="827.3" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (9 samples, 0.40%)</title><rect x="830.1" y="131.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="833.1" y="142.0"></text>
</g>
<g>
<title>byte[] (9 samples, 0.40%)</title><rect x="830.1" y="115.0" width="4.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="833.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (282 samples, 12.61%)</title><rect x="834.8" y="195.0" width="148.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="837.8" y="206.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>java/lang/String.getBytes (10 samples, 0.45%)</title><rect x="834.8" y="179.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="837.8" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (10 samples, 0.45%)</title><rect x="834.8" y="163.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="837.8" y="174.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (10 samples, 0.45%)</title><rect x="834.8" y="147.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="837.8" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.45%)</title><rect x="834.8" y="131.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="837.8" y="142.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.45%)</title><rect x="834.8" y="115.0" width="5.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="837.8" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (18 samples, 0.81%)</title><rect x="840.1" y="179.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="843.1" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (18 samples, 0.81%)</title><rect x="840.1" y="163.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="843.1" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$73/1522355682.get$Lambda (10 samples, 0.45%)</title><rect x="840.1" y="147.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="843.1" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mrsandman5.ServiceImpl$$Lambda$73 (10 samples, 0.45%)</title><rect x="840.1" y="131.0" width="5.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="843.1" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$79/940936934.get$Lambda (8 samples, 0.36%)</title><rect x="845.4" y="147.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="848.4" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mrsandman5.ServiceImpl$$Lambda$79 (8 samples, 0.36%)</title><rect x="845.4" y="131.0" width="4.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="848.4" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (18 samples, 0.81%)</title><rect x="849.6" y="179.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="852.6" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (18 samples, 0.81%)</title><rect x="849.6" y="163.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="852.6" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (18 samples, 0.81%)</title><rect x="849.6" y="147.0" width="9.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="852.6" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.asyncExecute (41 samples, 1.83%)</title><rect x="859.1" y="179.0" width="21.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="862.1" y="190.0">r..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (12 samples, 0.54%)</title><rect x="859.1" y="163.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="862.1" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (12 samples, 0.54%)</title><rect x="859.1" y="147.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="862.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$75/1913289223.get$Lambda (12 samples, 0.54%)</title><rect x="859.1" y="131.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="862.1" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mrsandman5.ServiceImpl$$Lambda$75 (12 samples, 0.54%)</title><rect x="859.1" y="115.0" width="6.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="862.1" y="126.0"></text>
</g>
<g>
<title>one/nio/server/Server.asyncExecute (29 samples, 1.30%)</title><rect x="865.4" y="163.0" width="15.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="868.4" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (29 samples, 1.30%)</title><rect x="865.4" y="147.0" width="15.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="868.4" y="158.0"></text>
</g>
<g>
<title>one/nio/server/WorkerPool$WaitingSynchronousQueue.offer (29 samples, 1.30%)</title><rect x="865.4" y="131.0" width="15.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="868.4" y="142.0"></text>
</g>
<g>
<title>one/nio/server/WorkerPool$WaitingSynchronousQueue.offer (29 samples, 1.30%)</title><rect x="865.4" y="115.0" width="15.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="868.4" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.offer (29 samples, 1.30%)</title><rect x="865.4" y="99.0" width="15.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="868.4" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (29 samples, 1.30%)</title><rect x="865.4" y="83.0" width="15.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="868.4" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.snode (29 samples, 1.30%)</title><rect x="865.4" y="67.0" width="15.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="868.4" y="78.0"></text>
</g>
<g>
<title>java.util.concurrent.SynchronousQueue$TransferStack$SNode (29 samples, 1.30%)</title><rect x="865.4" y="51.0" width="15.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="868.4" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/clustering/ConsistentHashingTopology.primaryFor (195 samples, 8.72%)</title><rect x="880.8" y="179.0" width="102.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="883.8" y="190.0">ru/mail/poli..</text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.hashBytes (118 samples, 5.28%)</title><rect x="880.8" y="163.0" width="62.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="883.8" y="174.0">com/go..</text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.newHasher (84 samples, 3.76%)</title><rect x="880.8" y="147.0" width="44.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="883.8" y="158.0">com/..</text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction.newHasher (84 samples, 3.76%)</title><rect x="880.8" y="131.0" width="44.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="883.8" y="142.0">com/..</text>
</g>
<g>
<title>com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher (35 samples, 1.57%)</title><rect x="880.8" y="115.0" width="18.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="883.8" y="126.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.&lt;init&gt; (49 samples, 2.19%)</title><rect x="899.2" y="115.0" width="25.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="902.2" y="126.0">c..</text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (49 samples, 2.19%)</title><rect x="899.2" y="99.0" width="25.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="902.2" y="110.0">c..</text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (49 samples, 2.19%)</title><rect x="899.2" y="83.0" width="25.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="902.2" y="94.0">c..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (49 samples, 2.19%)</title><rect x="899.2" y="67.0" width="25.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="902.2" y="78.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (31 samples, 1.39%)</title><rect x="899.2" y="51.0" width="16.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="902.2" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (18 samples, 0.81%)</title><rect x="915.6" y="51.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="918.6" y="62.0"></text>
</g>
<g>
<title>byte[] (18 samples, 0.81%)</title><rect x="915.6" y="35.0" width="9.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="918.6" y="46.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.hash (34 samples, 1.52%)</title><rect x="925.1" y="147.0" width="17.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="928.1" y="158.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.makeHash (34 samples, 1.52%)</title><rect x="925.1" y="131.0" width="17.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="928.1" y="142.0"></text>
</g>
<g>
<title>byte[] (14 samples, 0.63%)</title><rect x="925.1" y="115.0" width="7.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="928.1" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (20 samples, 0.89%)</title><rect x="932.5" y="115.0" width="10.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="935.5" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (20 samples, 0.89%)</title><rect x="932.5" y="99.0" width="10.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="935.5" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (20 samples, 0.89%)</title><rect x="932.5" y="83.0" width="10.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="935.5" y="94.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.22%)</title><rect x="943.0" y="163.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="946.0" y="174.0"></text>
</g>
<g>
<title>java.lang.Long (5 samples, 0.22%)</title><rect x="943.0" y="147.0" width="2.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="946.0" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (54 samples, 2.42%)</title><rect x="945.7" y="163.0" width="28.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="948.7" y="174.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (54 samples, 2.42%)</title><rect x="945.7" y="147.0" width="28.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="948.7" y="158.0">ja..</text>
</g>
<g>
<title>java/util/TreeMap.ceilingEntry (18 samples, 0.81%)</title><rect x="974.2" y="163.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="977.2" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap.exportEntry (18 samples, 0.81%)</title><rect x="974.2" y="147.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="977.2" y="158.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (18 samples, 0.81%)</title><rect x="974.2" y="131.0" width="9.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="977.2" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (29 samples, 1.30%)</title><rect x="983.7" y="211.0" width="15.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="986.7" y="222.0"></text>
</g>
<g>
<title>java/lang/String.substring (29 samples, 1.30%)</title><rect x="983.7" y="195.0" width="15.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="986.7" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (29 samples, 1.30%)</title><rect x="983.7" y="179.0" width="15.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="986.7" y="190.0"></text>
</g>
<g>
<title>java.lang.String (17 samples, 0.76%)</title><rect x="983.7" y="163.0" width="8.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="986.7" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (12 samples, 0.54%)</title><rect x="992.6" y="163.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="995.6" y="174.0"></text>
</g>
<g>
<title>byte[] (12 samples, 0.54%)</title><rect x="992.6" y="147.0" width="6.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="995.6" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (148 samples, 6.62%)</title><rect x="999.0" y="243.0" width="78.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1002.0" y="254.0">one/nio/h..</text>
</g>
<g>
<title>one.nio.http.Request (17 samples, 0.76%)</title><rect x="999.0" y="227.0" width="8.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1002.0" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (64 samples, 2.86%)</title><rect x="1007.9" y="227.0" width="33.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1010.9" y="238.0">on..</text>
</g>
<g>
<title>java.lang.String[] (64 samples, 2.86%)</title><rect x="1007.9" y="211.0" width="33.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1010.9" y="222.0">ja..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (67 samples, 3.00%)</title><rect x="1041.7" y="227.0" width="35.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1044.7" y="238.0">one..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (67 samples, 3.00%)</title><rect x="1041.7" y="211.0" width="35.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1044.7" y="222.0">one..</text>
</g>
<g>
<title>char[] (36 samples, 1.61%)</title><rect x="1041.7" y="195.0" width="19.0" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1044.7" y="206.0"></text>
</g>
<g>
<title>java.lang.String (12 samples, 0.54%)</title><rect x="1060.7" y="195.0" width="6.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1063.7" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (19 samples, 0.85%)</title><rect x="1067.0" y="195.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1070.0" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (19 samples, 0.85%)</title><rect x="1067.0" y="179.0" width="10.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1070.0" y="190.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (19 samples, 0.85%)</title><rect x="1067.0" y="163.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1070.0" y="174.0"></text>
</g>
<g>
<title>byte[] (19 samples, 0.85%)</title><rect x="1067.0" y="147.0" width="10.1" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1070.0" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (8 samples, 0.36%)</title><rect x="1077.1" y="243.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1080.1" y="254.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.36%)</title><rect x="1077.1" y="227.0" width="4.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1080.1" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (30 samples, 1.34%)</title><rect x="1081.3" y="243.0" width="15.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1084.3" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (30 samples, 1.34%)</title><rect x="1081.3" y="227.0" width="15.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1084.3" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (30 samples, 1.34%)</title><rect x="1081.3" y="211.0" width="15.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1084.3" y="222.0"></text>
</g>
<g>
<title>java.lang.String (5 samples, 0.22%)</title><rect x="1081.3" y="195.0" width="2.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1084.3" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (25 samples, 1.12%)</title><rect x="1083.9" y="195.0" width="13.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1086.9" y="206.0"></text>
</g>
<g>
<title>byte[] (25 samples, 1.12%)</title><rect x="1083.9" y="179.0" width="13.2" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1086.9" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (176 samples, 7.87%)</title><rect x="1097.1" y="243.0" width="92.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1100.1" y="254.0">one/nio/uti..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (176 samples, 7.87%)</title><rect x="1097.1" y="227.0" width="92.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1100.1" y="238.0">one/nio/uti..</text>
</g>
<g>
<title>char[] (76 samples, 3.40%)</title><rect x="1097.1" y="211.0" width="40.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1100.1" y="222.0">cha..</text>
</g>
<g>
<title>java.lang.String (40 samples, 1.79%)</title><rect x="1137.2" y="211.0" width="21.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1140.2" y="222.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (60 samples, 2.68%)</title><rect x="1158.3" y="211.0" width="31.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1161.3" y="222.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (60 samples, 2.68%)</title><rect x="1158.3" y="195.0" width="31.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1161.3" y="206.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (60 samples, 2.68%)</title><rect x="1158.3" y="179.0" width="31.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1161.3" y="190.0">ja..</text>
</g>
<g>
<title>byte[] (60 samples, 2.68%)</title><rect x="1158.3" y="163.0" width="31.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1161.3" y="174.0">by..</text>
</g>
</g>
</svg>
