<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="517"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="517"> </text>
<g id="frames">
<g>
<title>all (34,781 samples, 100.00%)</title><rect x="10.0" y="483.0" width="1180.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="13.0" y="494.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (21,233 samples, 61.05%)</title><rect x="10.0" y="467.0" width="720.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="478.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (21,233 samples, 61.05%)</title><rect x="10.0" y="451.0" width="720.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="462.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (21,233 samples, 61.05%)</title><rect x="10.0" y="435.0" width="720.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="446.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (810 samples, 2.33%)</title><rect x="10.0" y="419.0" width="27.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="430.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (810 samples, 2.33%)</title><rect x="10.0" y="403.0" width="27.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="414.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (796 samples, 2.29%)</title><rect x="10.0" y="387.0" width="27.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="398.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (796 samples, 2.29%)</title><rect x="10.0" y="371.0" width="27.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="382.0">j..</text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (796 samples, 2.29%)</title><rect x="10.0" y="355.0" width="27.0" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="13.0" y="366.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (14 samples, 0.04%)</title><rect x="37.0" y="387.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="40.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (14 samples, 0.04%)</title><rect x="37.0" y="371.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (14 samples, 0.04%)</title><rect x="37.0" y="355.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (14 samples, 0.04%)</title><rect x="37.0" y="339.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.0" y="350.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (14 samples, 0.04%)</title><rect x="37.0" y="323.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="40.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$76/103907069.run (20,423 samples, 58.72%)</title><rect x="37.5" y="419.0" width="692.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.5" y="430.0">ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$76/103907069.run</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$asyncExecute$12 (20,423 samples, 58.72%)</title><rect x="37.5" y="403.0" width="692.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="40.5" y="414.0">ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$asyncExecute$12</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$71/2078767474.act (9,451 samples, 27.17%)</title><rect x="37.5" y="387.0" width="320.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.5" y="398.0">ru/mail/polis/service/mrsandman5/ServiceImp..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replicasPut$7 (9,451 samples, 27.17%)</title><rect x="37.5" y="371.0" width="320.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.5" y="382.0">ru/mail/polis/service/mrsandman5/ServiceImp..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (58 samples, 0.17%)</title><rect x="37.5" y="355.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="40.5" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (58 samples, 0.17%)</title><rect x="37.5" y="339.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="40.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$81/1882180511.get$Lambda (58 samples, 0.17%)</title><rect x="37.5" y="323.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="40.5" y="334.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mrsandman5.ServiceImpl$$Lambda$81 (58 samples, 0.17%)</title><rect x="37.5" y="307.0" width="1.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="40.5" y="318.0"></text>
</g>
<g>
<title>java/util/Collection.stream (18 samples, 0.05%)</title><rect x="39.4" y="355.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="42.4" y="366.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (11 samples, 0.03%)</title><rect x="39.7" y="339.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="42.7" y="350.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (11 samples, 0.03%)</title><rect x="39.7" y="323.0" width="0.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="42.7" y="334.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (21 samples, 0.06%)</title><rect x="40.2" y="355.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="43.2" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (15 samples, 0.04%)</title><rect x="40.2" y="339.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.2" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (15 samples, 0.04%)</title><rect x="40.2" y="323.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.2" y="334.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (10 samples, 0.03%)</title><rect x="40.2" y="307.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="43.2" y="318.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (8 samples, 0.02%)</title><rect x="40.2" y="291.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="43.2" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (12 samples, 0.03%)</title><rect x="40.9" y="355.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.9" y="366.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$2 (12 samples, 0.03%)</title><rect x="40.9" y="339.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="43.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.replication (9,321 samples, 26.80%)</title><rect x="41.3" y="355.0" width="316.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="44.3" y="366.0">ru/mail/polis/service/mrsandman5/ServiceImp..</text>
</g>
<g>
<title>java/util/Collection.stream (20 samples, 0.06%)</title><rect x="41.5" y="339.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="44.5" y="350.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (16 samples, 0.05%)</title><rect x="41.7" y="323.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="44.7" y="334.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (16 samples, 0.05%)</title><rect x="41.7" y="307.0" width="0.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="44.7" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (9,186 samples, 26.41%)</title><rect x="42.3" y="339.0" width="311.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.3" y="350.0">java/util/stream/ReferencePipeline.collect</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (9,178 samples, 26.39%)</title><rect x="42.3" y="323.0" width="311.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="45.3" y="334.0">java/util/stream/AbstractPipeline.evaluate</text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (9,178 samples, 26.39%)</title><rect x="42.3" y="307.0" width="311.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.3" y="318.0">java/util/stream/ReduceOps$ReduceOp.evalua..</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (9,170 samples, 26.36%)</title><rect x="42.3" y="291.0" width="311.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="45.3" y="302.0">java/util/stream/AbstractPipeline.wrapAndC..</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (9,164 samples, 26.35%)</title><rect x="42.3" y="275.0" width="310.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="45.3" y="286.0">java/util/stream/AbstractPipeline.copyInto</text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (9,155 samples, 26.32%)</title><rect x="42.3" y="259.0" width="310.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="45.3" y="270.0">java/util/HashMap$KeySpliterator.forEachRe..</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (9,155 samples, 26.32%)</title><rect x="42.3" y="243.0" width="310.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="45.3" y="254.0">java/util/stream/ReferencePipeline$3$1.acc..</text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (54 samples, 0.16%)</title><rect x="42.3" y="227.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="45.3" y="238.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$91/1488832228.accept (54 samples, 0.16%)</title><rect x="42.3" y="211.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="45.3" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (54 samples, 0.16%)</title><rect x="42.3" y="195.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="45.3" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (54 samples, 0.16%)</title><rect x="42.3" y="179.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="45.3" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (54 samples, 0.16%)</title><rect x="42.3" y="163.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="45.3" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (54 samples, 0.16%)</title><rect x="42.3" y="147.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="45.3" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (54 samples, 0.16%)</title><rect x="42.3" y="131.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.3" y="142.0"></text>
</g>
<g>
<title>java.lang.Object[] (54 samples, 0.16%)</title><rect x="42.3" y="115.0" width="1.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="45.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$85/1771982368.apply (9,101 samples, 26.17%)</title><rect x="44.2" y="227.0" width="308.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="47.2" y="238.0">ru/mail/polis/service/mrsandman5/ServiceIm..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replication$0 (9,101 samples, 26.17%)</title><rect x="44.2" y="211.0" width="308.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="47.2" y="222.0">ru/mail/polis/service/mrsandman5/ServiceIm..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$81/1882180511.act (485 samples, 1.39%)</title><rect x="44.2" y="195.0" width="16.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.2" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replicasPut$5 (485 samples, 1.39%)</title><rect x="44.2" y="179.0" width="16.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="47.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/SimpleRequests.put (485 samples, 1.39%)</title><rect x="44.2" y="163.0" width="16.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.2" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.03%)</title><rect x="44.2" y="147.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.2" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.03%)</title><rect x="44.2" y="131.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.2" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (10 samples, 0.03%)</title><rect x="44.2" y="115.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="47.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.upsert (364 samples, 1.05%)</title><rect x="44.5" y="147.0" width="12.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.5" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (109 samples, 0.31%)</title><rect x="44.5" y="131.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.5" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (109 samples, 0.31%)</title><rect x="44.5" y="115.0" width="3.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="47.5" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (85 samples, 0.24%)</title><rect x="48.2" y="131.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.2" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (85 samples, 0.24%)</title><rect x="48.2" y="115.0" width="2.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="51.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.upsert (166 samples, 0.48%)</title><rect x="51.2" y="131.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="54.2" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (128 samples, 0.37%)</title><rect x="51.2" y="115.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.2" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (128 samples, 0.37%)</title><rect x="51.2" y="99.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="54.2" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (128 samples, 0.37%)</title><rect x="51.2" y="83.0" width="4.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="54.2" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (9 samples, 0.03%)</title><rect x="55.6" y="115.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="58.6" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (9 samples, 0.03%)</title><rect x="55.6" y="99.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="58.6" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Value (29 samples, 0.08%)</title><rect x="55.9" y="115.0" width="1.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="58.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.emptyResponse (111 samples, 0.32%)</title><rect x="56.9" y="147.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="59.9" y="158.0"></text>
</g>
<g>
<title>one.nio.http.Response (21 samples, 0.06%)</title><rect x="56.9" y="131.0" width="0.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="59.9" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (90 samples, 0.26%)</title><rect x="57.6" y="131.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="60.6" y="142.0"></text>
</g>
<g>
<title>byte[] (38 samples, 0.11%)</title><rect x="57.6" y="115.0" width="1.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="60.6" y="126.0"></text>
</g>
<g>
<title>java.lang.String[] (30 samples, 0.09%)</title><rect x="58.9" y="115.0" width="1.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="61.9" y="126.0"></text>
</g>
<g>
<title>java.lang.String (22 samples, 0.06%)</title><rect x="59.9" y="115.0" width="0.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="62.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.proxy (8,616 samples, 24.77%)</title><rect x="60.6" y="195.0" width="292.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="63.6" y="206.0">ru/mail/polis/service/mrsandman5/Servic..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (95 samples, 0.27%)</title><rect x="60.6" y="179.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="63.6" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/360207322.invoke (95 samples, 0.27%)</title><rect x="60.6" y="163.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.6" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (95 samples, 0.27%)</title><rect x="60.6" y="147.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="63.6" y="158.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (28 samples, 0.08%)</title><rect x="60.6" y="131.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="63.6" y="142.0"></text>
</g>
<g>
<title>java.lang.String (28 samples, 0.08%)</title><rect x="60.6" y="115.0" width="1.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="63.6" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (67 samples, 0.19%)</title><rect x="61.6" y="131.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.6" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (67 samples, 0.19%)</title><rect x="61.6" y="115.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="64.6" y="126.0"></text>
</g>
<g>
<title>byte[] (67 samples, 0.19%)</title><rect x="61.6" y="99.0" width="2.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="64.6" y="110.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (8,521 samples, 24.50%)</title><rect x="63.8" y="179.0" width="289.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="66.8" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (8,521 samples, 24.50%)</title><rect x="63.8" y="163.0" width="289.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="66.8" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (41 samples, 0.12%)</title><rect x="63.8" y="147.0" width="1.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="66.8" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (7,936 samples, 22.82%)</title><rect x="65.2" y="147.0" width="269.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="68.2" y="158.0">one/nio/http/HttpClient$ResponseRead..</text>
</g>
<g>
<title>byte[] (3,372 samples, 9.69%)</title><rect x="65.2" y="131.0" width="114.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="68.2" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (4,564 samples, 13.12%)</title><rect x="179.6" y="131.0" width="154.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="182.6" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (361 samples, 1.04%)</title><rect x="334.5" y="147.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="337.5" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (28 samples, 0.08%)</title><rect x="334.6" y="131.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="337.6" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (28 samples, 0.08%)</title><rect x="334.6" y="115.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="337.6" y="126.0"></text>
</g>
<g>
<title>java.lang.String (9 samples, 0.03%)</title><rect x="334.6" y="99.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="337.6" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (19 samples, 0.05%)</title><rect x="334.9" y="99.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="337.9" y="110.0"></text>
</g>
<g>
<title>byte[] (19 samples, 0.05%)</title><rect x="334.9" y="83.0" width="0.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="337.9" y="94.0"></text>
</g>
<g>
<title>one.nio.http.Response (12 samples, 0.03%)</title><rect x="335.5" y="131.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="338.5" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (288 samples, 0.83%)</title><rect x="335.9" y="131.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="338.9" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (288 samples, 0.83%)</title><rect x="335.9" y="115.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="338.9" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (288 samples, 0.83%)</title><rect x="335.9" y="99.0" width="9.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="338.9" y="110.0"></text>
</g>
<g>
<title>char[] (218 samples, 0.63%)</title><rect x="335.9" y="83.0" width="7.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="338.9" y="94.0"></text>
</g>
<g>
<title>java.lang.String (35 samples, 0.10%)</title><rect x="343.3" y="83.0" width="1.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="346.3" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (35 samples, 0.10%)</title><rect x="344.5" y="83.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="347.5" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (35 samples, 0.10%)</title><rect x="344.5" y="67.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="347.5" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (35 samples, 0.10%)</title><rect x="344.5" y="51.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="347.5" y="62.0"></text>
</g>
<g>
<title>byte[] (35 samples, 0.10%)</title><rect x="344.5" y="35.0" width="1.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="347.5" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (13 samples, 0.04%)</title><rect x="345.7" y="131.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="348.7" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (13 samples, 0.04%)</title><rect x="345.7" y="115.0" width="0.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="348.7" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (17 samples, 0.05%)</title><rect x="346.1" y="131.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="349.1" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (17 samples, 0.05%)</title><rect x="346.1" y="115.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="349.1" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (17 samples, 0.05%)</title><rect x="346.1" y="99.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="349.1" y="110.0"></text>
</g>
<g>
<title>java.lang.String (10 samples, 0.03%)</title><rect x="346.1" y="83.0" width="0.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="349.1" y="94.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (157 samples, 0.45%)</title><rect x="346.7" y="147.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="349.7" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (157 samples, 0.45%)</title><rect x="346.7" y="131.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="349.7" y="142.0"></text>
</g>
<g>
<title>byte[] (157 samples, 0.45%)</title><rect x="346.7" y="115.0" width="5.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="349.7" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (20 samples, 0.06%)</title><rect x="352.0" y="147.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="355.0" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (20 samples, 0.06%)</title><rect x="352.0" y="131.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="355.0" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (20 samples, 0.06%)</title><rect x="352.0" y="115.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="355.0" y="126.0"></text>
</g>
<g>
<title>java.lang.String (9 samples, 0.03%)</title><rect x="352.0" y="99.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="355.0" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (11 samples, 0.03%)</title><rect x="352.4" y="99.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="355.4" y="110.0"></text>
</g>
<g>
<title>byte[] (11 samples, 0.03%)</title><rect x="352.4" y="83.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="355.4" y="94.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (9 samples, 0.03%)</title><rect x="352.9" y="259.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="355.9" y="270.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (9 samples, 0.03%)</title><rect x="352.9" y="243.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="355.9" y="254.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$88/1779221538.get (9 samples, 0.03%)</title><rect x="352.9" y="227.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="355.9" y="238.0"></text>
</g>
<g>
<title>java.util.ArrayList (9 samples, 0.03%)</title><rect x="352.9" y="211.0" width="0.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="355.9" y="222.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (8 samples, 0.02%)</title><rect x="353.4" y="291.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="356.4" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (8 samples, 0.02%)</title><rect x="353.4" y="275.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="356.4" y="286.0"></text>
</g>
<g>
<title>java.util.stream.ReduceOps$3ReducingSink (8 samples, 0.02%)</title><rect x="353.4" y="259.0" width="0.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="356.4" y="270.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps.makeRef (8 samples, 0.02%)</title><rect x="353.7" y="323.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="356.7" y="334.0"></text>
</g>
<g>
<title>java.util.stream.ReduceOps$3 (8 samples, 0.02%)</title><rect x="353.7" y="307.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="356.7" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (10 samples, 0.03%)</title><rect x="354.0" y="339.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="357.0" y="350.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (10 samples, 0.03%)</title><rect x="354.0" y="323.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="357.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/clustering/ConsistentHashingTopology.replicasFor (96 samples, 0.28%)</title><rect x="354.3" y="339.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="357.3" y="350.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.hashBytes (29 samples, 0.08%)</title><rect x="354.3" y="323.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="357.3" y="334.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.newHasher (16 samples, 0.05%)</title><rect x="354.3" y="307.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="357.3" y="318.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction.newHasher (16 samples, 0.05%)</title><rect x="354.3" y="291.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="357.3" y="302.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.&lt;init&gt; (10 samples, 0.03%)</title><rect x="354.5" y="275.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="357.5" y="286.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (10 samples, 0.03%)</title><rect x="354.5" y="259.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="357.5" y="270.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (10 samples, 0.03%)</title><rect x="354.5" y="243.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="357.5" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (10 samples, 0.03%)</title><rect x="354.5" y="227.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="357.5" y="238.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.hash (13 samples, 0.04%)</title><rect x="354.9" y="307.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="357.9" y="318.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.makeHash (13 samples, 0.04%)</title><rect x="354.9" y="291.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="357.9" y="302.0"></text>
</g>
<g>
<title>byte[] (9 samples, 0.03%)</title><rect x="354.9" y="275.0" width="0.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="357.9" y="286.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (9 samples, 0.03%)</title><rect x="355.4" y="323.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="358.4" y="334.0"></text>
</g>
<g>
<title>java.lang.Long (9 samples, 0.03%)</title><rect x="355.4" y="307.0" width="0.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="358.4" y="318.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (13 samples, 0.04%)</title><rect x="355.9" y="323.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="358.9" y="334.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (10 samples, 0.03%)</title><rect x="356.4" y="323.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="359.4" y="334.0"></text>
</g>
<g>
<title>java.util.HashMap (10 samples, 0.03%)</title><rect x="356.4" y="307.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="359.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.add (16 samples, 0.05%)</title><rect x="356.7" y="323.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="359.7" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (16 samples, 0.05%)</title><rect x="356.7" y="307.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="359.7" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (16 samples, 0.05%)</title><rect x="356.7" y="291.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="359.7" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (9 samples, 0.03%)</title><rect x="356.9" y="275.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="359.9" y="286.0"></text>
</g>
<g>
<title>java.util.HashMap$Node[] (9 samples, 0.03%)</title><rect x="356.9" y="259.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="359.9" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (10 samples, 0.03%)</title><rect x="357.2" y="323.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="360.2" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (10 samples, 0.03%)</title><rect x="357.2" y="307.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="360.2" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (10 samples, 0.03%)</title><rect x="357.2" y="291.0" width="0.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="360.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.emptyResponse (16 samples, 0.05%)</title><rect x="357.6" y="355.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="360.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (12 samples, 0.03%)</title><rect x="357.7" y="339.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="360.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$97/1256808528.act (8,254 samples, 23.73%)</title><rect x="358.1" y="387.0" width="280.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="361.1" y="398.0">ru/mail/polis/service/mrsandman5/Servi..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replicasPut$4 (8,254 samples, 23.73%)</title><rect x="358.1" y="371.0" width="280.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="361.1" y="382.0">ru/mail/polis/service/mrsandman5/Servi..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/SimpleRequests.put (8,254 samples, 23.73%)</title><rect x="358.1" y="355.0" width="280.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="361.1" y="366.0">ru/mail/polis/service/mrsandman5/repli..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,423 samples, 4.09%)</title><rect x="358.1" y="339.0" width="48.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="361.1" y="350.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,423 samples, 4.09%)</title><rect x="358.1" y="323.0" width="48.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="361.1" y="334.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,423 samples, 4.09%)</title><rect x="358.1" y="307.0" width="48.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="361.1" y="318.0">java..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.upsert (4,422 samples, 12.71%)</title><rect x="406.4" y="339.0" width="150.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="409.4" y="350.0">ru/mail/polis/dao/i..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1,902 samples, 5.47%)</title><rect x="406.4" y="323.0" width="64.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="409.4" y="334.0">java/ni..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1,902 samples, 5.47%)</title><rect x="406.4" y="307.0" width="64.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="409.4" y="318.0">java.ni..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (51 samples, 0.15%)</title><rect x="470.9" y="323.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="473.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (51 samples, 0.15%)</title><rect x="470.9" y="307.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="473.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (51 samples, 0.15%)</title><rect x="470.9" y="291.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="473.9" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (47 samples, 0.14%)</title><rect x="470.9" y="275.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="473.9" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (47 samples, 0.14%)</title><rect x="470.9" y="259.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="473.9" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (30 samples, 0.09%)</title><rect x="470.9" y="243.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="473.9" y="254.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (30 samples, 0.09%)</title><rect x="470.9" y="227.0" width="1.0" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="473.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (17 samples, 0.05%)</title><rect x="471.9" y="243.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="474.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (17 samples, 0.05%)</title><rect x="471.9" y="227.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="474.9" y="238.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (17 samples, 0.05%)</title><rect x="471.9" y="211.0" width="0.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="474.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.upsert (2,469 samples, 7.10%)</title><rect x="472.7" y="323.0" width="83.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="475.7" y="334.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (1,836 samples, 5.28%)</title><rect x="472.7" y="307.0" width="62.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="475.7" y="318.0">java/n..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1,836 samples, 5.28%)</title><rect x="472.7" y="291.0" width="62.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="475.7" y="302.0">java/n..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1,836 samples, 5.28%)</title><rect x="472.7" y="275.0" width="62.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="475.7" y="286.0">java.n..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (166 samples, 0.48%)</title><rect x="534.9" y="307.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="537.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (166 samples, 0.48%)</title><rect x="534.9" y="291.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="537.9" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Index (51 samples, 0.15%)</title><rect x="534.9" y="275.0" width="1.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="537.9" y="286.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Node (115 samples, 0.33%)</title><rect x="536.7" y="275.0" width="3.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="539.7" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Value (467 samples, 1.34%)</title><rect x="540.6" y="307.0" width="15.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="543.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.emptyResponse (2,409 samples, 6.93%)</title><rect x="556.4" y="339.0" width="81.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="559.4" y="350.0">ru/mail/p..</text>
</g>
<g>
<title>one.nio.http.Response (500 samples, 1.44%)</title><rect x="556.4" y="323.0" width="17.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="559.4" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1,909 samples, 5.49%)</title><rect x="573.4" y="323.0" width="64.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="576.4" y="334.0">one/nio..</text>
</g>
<g>
<title>byte[] (800 samples, 2.30%)</title><rect x="573.4" y="307.0" width="27.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="576.4" y="318.0">b..</text>
</g>
<g>
<title>java.lang.String[] (612 samples, 1.76%)</title><rect x="600.5" y="307.0" width="20.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="603.5" y="318.0"></text>
</g>
<g>
<title>java.lang.String (497 samples, 1.43%)</title><rect x="621.3" y="307.0" width="16.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="624.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.sendResponse (2,718 samples, 7.81%)</title><rect x="638.2" y="387.0" width="92.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="641.2" y="398.0">ru/mail/pol..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2,718 samples, 7.81%)</title><rect x="638.2" y="371.0" width="92.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="641.2" y="382.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (2,718 samples, 7.81%)</title><rect x="638.2" y="355.0" width="92.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="641.2" y="366.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1,920 samples, 5.52%)</title><rect x="638.2" y="339.0" width="65.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="641.2" y="350.0">one/nio..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1,920 samples, 5.52%)</title><rect x="638.2" y="323.0" width="65.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="641.2" y="334.0">one/nio..</text>
</g>
<g>
<title>byte[] (1,569 samples, 4.51%)</title><rect x="638.2" y="307.0" width="53.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="641.2" y="318.0">byte[]</text>
</g>
<g>
<title>byte[] (351 samples, 1.01%)</title><rect x="691.4" y="307.0" width="11.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="694.4" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (798 samples, 2.29%)</title><rect x="703.3" y="339.0" width="27.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="706.3" y="350.0">o..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (798 samples, 2.29%)</title><rect x="703.3" y="323.0" width="27.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="706.3" y="334.0">o..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (13,548 samples, 38.95%)</title><rect x="730.4" y="467.0" width="459.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="733.4" y="478.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (342 samples, 0.98%)</title><rect x="730.4" y="451.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="733.4" y="462.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (342 samples, 0.98%)</title><rect x="730.4" y="435.0" width="11.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="733.4" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (13,206 samples, 37.97%)</title><rect x="742.0" y="451.0" width="448.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="745.0" y="462.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (13,206 samples, 37.97%)</title><rect x="742.0" y="435.0" width="448.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="745.0" y="446.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (13,206 samples, 37.97%)</title><rect x="742.0" y="419.0" width="448.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="745.0" y="430.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (3,633 samples, 10.45%)</title><rect x="742.0" y="403.0" width="123.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="745.0" y="414.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (3,633 samples, 10.45%)</title><rect x="742.0" y="387.0" width="123.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="745.0" y="398.0">one/nio/http/Ht..</text>
</g>
<g>
<title>RequestHandler1_response.handleRequest (2,880 samples, 8.28%)</title><rect x="742.0" y="371.0" width="97.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="745.0" y="382.0">RequestHand..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (696 samples, 2.00%)</title><rect x="742.0" y="355.0" width="23.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="745.0" y="366.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (696 samples, 2.00%)</title><rect x="742.0" y="339.0" width="23.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="745.0" y="350.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (696 samples, 2.00%)</title><rect x="742.0" y="323.0" width="23.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="745.0" y="334.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (696 samples, 2.00%)</title><rect x="742.0" y="307.0" width="23.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="745.0" y="318.0">j..</text>
</g>
<g>
<title>java.lang.String (350 samples, 1.01%)</title><rect x="742.0" y="291.0" width="11.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="745.0" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (346 samples, 0.99%)</title><rect x="753.8" y="291.0" width="11.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="756.8" y="302.0"></text>
</g>
<g>
<title>byte[] (346 samples, 0.99%)</title><rect x="753.8" y="275.0" width="11.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="756.8" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (2,184 samples, 6.28%)</title><rect x="765.6" y="355.0" width="74.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="768.6" y="366.0">ru/mail/..</text>
</g>
<g>
<title>java/lang/String.getBytes (272 samples, 0.78%)</title><rect x="765.6" y="339.0" width="9.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="768.6" y="350.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (272 samples, 0.78%)</title><rect x="765.6" y="323.0" width="9.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="768.6" y="334.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (272 samples, 0.78%)</title><rect x="765.6" y="307.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="768.6" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (272 samples, 0.78%)</title><rect x="765.6" y="291.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="768.6" y="302.0"></text>
</g>
<g>
<title>byte[] (272 samples, 0.78%)</title><rect x="765.6" y="275.0" width="9.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="768.6" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (725 samples, 2.08%)</title><rect x="774.8" y="339.0" width="24.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="777.8" y="350.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (725 samples, 2.08%)</title><rect x="774.8" y="323.0" width="24.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="777.8" y="334.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (725 samples, 2.08%)</title><rect x="774.8" y="307.0" width="24.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="777.8" y="318.0">j..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (479 samples, 1.38%)</title><rect x="799.4" y="339.0" width="16.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="802.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.substring (479 samples, 1.38%)</title><rect x="799.4" y="323.0" width="16.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="802.4" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (479 samples, 1.38%)</title><rect x="799.4" y="307.0" width="16.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="802.4" y="318.0"></text>
</g>
<g>
<title>java.lang.String (192 samples, 0.55%)</title><rect x="799.4" y="291.0" width="6.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="802.4" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (287 samples, 0.83%)</title><rect x="805.9" y="291.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="808.9" y="302.0"></text>
</g>
<g>
<title>byte[] (287 samples, 0.83%)</title><rect x="805.9" y="275.0" width="9.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="808.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.replicasPut (708 samples, 2.04%)</title><rect x="815.7" y="339.0" width="24.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="818.7" y="350.0">r..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (324 samples, 0.93%)</title><rect x="815.7" y="323.0" width="10.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="818.7" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (324 samples, 0.93%)</title><rect x="815.7" y="307.0" width="10.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="818.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$71/2078767474.get$Lambda (158 samples, 0.45%)</title><rect x="815.7" y="291.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="818.7" y="302.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mrsandman5.ServiceImpl$$Lambda$71 (158 samples, 0.45%)</title><rect x="815.7" y="275.0" width="5.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="818.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$97/1256808528.get$Lambda (166 samples, 0.48%)</title><rect x="821.0" y="291.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="824.0" y="302.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mrsandman5.ServiceImpl$$Lambda$97 (166 samples, 0.48%)</title><rect x="821.0" y="275.0" width="5.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="824.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.asyncExecute (384 samples, 1.10%)</title><rect x="826.6" y="323.0" width="13.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="829.6" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (377 samples, 1.08%)</title><rect x="826.6" y="307.0" width="12.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="829.6" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (377 samples, 1.08%)</title><rect x="826.6" y="291.0" width="12.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="829.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$76/103907069.get$Lambda (377 samples, 1.08%)</title><rect x="826.6" y="275.0" width="12.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="829.6" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mrsandman5.ServiceImpl$$Lambda$76 (377 samples, 1.08%)</title><rect x="826.6" y="259.0" width="12.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="829.6" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (753 samples, 2.16%)</title><rect x="839.7" y="371.0" width="25.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="842.7" y="382.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (753 samples, 2.16%)</title><rect x="839.7" y="355.0" width="25.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="842.7" y="366.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (753 samples, 2.16%)</title><rect x="839.7" y="339.0" width="25.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="842.7" y="350.0">j..</text>
</g>
<g>
<title>java.lang.String (328 samples, 0.94%)</title><rect x="839.7" y="323.0" width="11.1" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="842.7" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (425 samples, 1.22%)</title><rect x="850.8" y="323.0" width="14.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="853.8" y="334.0"></text>
</g>
<g>
<title>byte[] (425 samples, 1.22%)</title><rect x="850.8" y="307.0" width="14.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="853.8" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3,625 samples, 10.42%)</title><rect x="865.2" y="403.0" width="123.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="868.2" y="414.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one.nio.http.Request (524 samples, 1.51%)</title><rect x="865.2" y="387.0" width="17.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="868.2" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1,199 samples, 3.45%)</title><rect x="883.0" y="387.0" width="40.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="886.0" y="398.0">one..</text>
</g>
<g>
<title>java.lang.String[] (1,199 samples, 3.45%)</title><rect x="883.0" y="371.0" width="40.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="886.0" y="382.0">jav..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,902 samples, 5.47%)</title><rect x="923.7" y="387.0" width="64.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="926.7" y="398.0">one/nio..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,902 samples, 5.47%)</title><rect x="923.7" y="371.0" width="64.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="926.7" y="382.0">one/nio..</text>
</g>
<g>
<title>char[] (1,106 samples, 3.18%)</title><rect x="923.7" y="355.0" width="37.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="926.7" y="366.0">cha..</text>
</g>
<g>
<title>java.lang.String (279 samples, 0.80%)</title><rect x="961.2" y="355.0" width="9.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="964.2" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (517 samples, 1.49%)</title><rect x="970.7" y="355.0" width="17.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="973.7" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (517 samples, 1.49%)</title><rect x="970.7" y="339.0" width="17.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="973.7" y="350.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (517 samples, 1.49%)</title><rect x="970.7" y="323.0" width="17.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="973.7" y="334.0"></text>
</g>
<g>
<title>byte[] (517 samples, 1.49%)</title><rect x="970.7" y="307.0" width="17.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="973.7" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (289 samples, 0.83%)</title><rect x="988.2" y="403.0" width="9.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="991.2" y="414.0"></text>
</g>
<g>
<title>byte[] (289 samples, 0.83%)</title><rect x="988.2" y="387.0" width="9.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="991.2" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (673 samples, 1.93%)</title><rect x="998.0" y="403.0" width="22.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1001.0" y="414.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (673 samples, 1.93%)</title><rect x="998.0" y="387.0" width="22.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1001.0" y="398.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (673 samples, 1.93%)</title><rect x="998.0" y="371.0" width="22.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1001.0" y="382.0">j..</text>
</g>
<g>
<title>java.lang.String (325 samples, 0.93%)</title><rect x="998.0" y="355.0" width="11.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1001.0" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (348 samples, 1.00%)</title><rect x="1009.0" y="355.0" width="11.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1012.0" y="366.0"></text>
</g>
<g>
<title>byte[] (348 samples, 1.00%)</title><rect x="1009.0" y="339.0" width="11.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1012.0" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,986 samples, 14.34%)</title><rect x="1020.8" y="403.0" width="169.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1023.8" y="414.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,986 samples, 14.34%)</title><rect x="1020.8" y="387.0" width="169.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1023.8" y="398.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (2,433 samples, 7.00%)</title><rect x="1020.8" y="371.0" width="82.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1023.8" y="382.0">char[]</text>
</g>
<g>
<title>java.lang.String (896 samples, 2.58%)</title><rect x="1103.4" y="371.0" width="30.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1106.4" y="382.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,657 samples, 4.76%)</title><rect x="1133.8" y="371.0" width="56.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1136.8" y="382.0">java/l..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,657 samples, 4.76%)</title><rect x="1133.8" y="355.0" width="56.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1136.8" y="366.0">java/l..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,657 samples, 4.76%)</title><rect x="1133.8" y="339.0" width="56.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1136.8" y="350.0">java/l..</text>
</g>
<g>
<title>byte[] (1,657 samples, 4.76%)</title><rect x="1133.8" y="323.0" width="56.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1136.8" y="334.0">byte[]</text>
</g>
</g>
</svg>
