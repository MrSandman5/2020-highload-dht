<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="357"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="357"> </text>
<g id="frames">
<g>
<title>all (2,609 samples, 100.00%)</title><rect x="10.0" y="323.0" width="1180.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="334.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (1,613 samples, 61.82%)</title><rect x="10.0" y="307.0" width="729.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,613 samples, 61.82%)</title><rect x="10.0" y="291.0" width="729.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,613 samples, 61.82%)</title><rect x="10.0" y="275.0" width="729.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (22 samples, 0.84%)</title><rect x="10.0" y="259.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.poll (22 samples, 0.84%)</title><rect x="10.0" y="243.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (22 samples, 0.84%)</title><rect x="10.0" y="227.0" width="10.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.snode (22 samples, 0.84%)</title><rect x="10.0" y="211.0" width="10.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>java.util.concurrent.SynchronousQueue$TransferStack$SNode (22 samples, 0.84%)</title><rect x="10.0" y="195.0" width="10.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$79/576483919.run (1,591 samples, 60.98%)</title><rect x="20.0" y="259.0" width="719.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="23.0" y="270.0">ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$79/576483919.run</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$asyncExecute$4 (1,591 samples, 60.98%)</title><rect x="20.0" y="243.0" width="719.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.0" y="254.0">ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$asyncExecute$4</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$75/1954861215.supply (1,136 samples, 43.54%)</title><rect x="20.0" y="227.0" width="513.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.0" y="238.0">ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$75/1954861215.supply</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$response$0 (1,136 samples, 43.54%)</title><rect x="20.0" y="211.0" width="513.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.0" y="222.0">ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$response$0</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.proxy (1,136 samples, 43.54%)</title><rect x="20.0" y="195.0" width="513.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.0" y="206.0">ru/mail/polis/service/mrsandman5/ServiceImpl.proxy</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,136 samples, 43.54%)</title><rect x="20.0" y="179.0" width="513.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.0" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,136 samples, 43.54%)</title><rect x="20.0" y="163.0" width="513.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.0" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (5 samples, 0.19%)</title><rect x="20.0" y="147.0" width="2.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="23.0" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (1,066 samples, 40.86%)</title><rect x="22.2" y="147.0" width="482.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="25.2" y="158.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (381 samples, 14.60%)</title><rect x="22.2" y="131.0" width="172.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="25.2" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (685 samples, 26.26%)</title><rect x="194.5" y="131.0" width="309.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="197.5" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (46 samples, 1.76%)</title><rect x="504.3" y="147.0" width="20.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="507.3" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.27%)</title><rect x="504.3" y="131.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="507.3" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.27%)</title><rect x="504.3" y="115.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="507.3" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (7 samples, 0.27%)</title><rect x="504.3" y="99.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="507.3" y="110.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.27%)</title><rect x="504.3" y="83.0" width="3.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="507.3" y="94.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (32 samples, 1.23%)</title><rect x="507.5" y="131.0" width="14.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="510.5" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (32 samples, 1.23%)</title><rect x="507.5" y="115.0" width="14.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="510.5" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (32 samples, 1.23%)</title><rect x="507.5" y="99.0" width="14.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="510.5" y="110.0"></text>
</g>
<g>
<title>char[] (29 samples, 1.11%)</title><rect x="507.5" y="83.0" width="13.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="510.5" y="94.0"></text>
</g>
<g>
<title>java.lang.String (3 samples, 0.11%)</title><rect x="520.6" y="83.0" width="1.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="523.6" y="94.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.11%)</title><rect x="522.0" y="131.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="525.0" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (3 samples, 0.11%)</title><rect x="522.0" y="115.0" width="1.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="525.0" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (4 samples, 0.15%)</title><rect x="523.3" y="131.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="526.3" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.15%)</title><rect x="523.3" y="115.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="526.3" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.15%)</title><rect x="523.3" y="99.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="526.3" y="110.0"></text>
</g>
<g>
<title>java.lang.String (3 samples, 0.11%)</title><rect x="523.3" y="83.0" width="1.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="526.3" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.04%)</title><rect x="524.7" y="83.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="527.7" y="94.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.04%)</title><rect x="524.7" y="67.0" width="0.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="527.7" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (17 samples, 0.65%)</title><rect x="525.1" y="147.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="528.1" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (17 samples, 0.65%)</title><rect x="525.1" y="131.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="528.1" y="142.0"></text>
</g>
<g>
<title>byte[] (17 samples, 0.65%)</title><rect x="525.1" y="115.0" width="7.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="528.1" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.08%)</title><rect x="532.8" y="147.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="535.8" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.08%)</title><rect x="532.8" y="131.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="535.8" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.08%)</title><rect x="532.8" y="115.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="535.8" y="126.0"></text>
</g>
<g>
<title>java.lang.String (1 samples, 0.04%)</title><rect x="532.8" y="99.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="535.8" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.04%)</title><rect x="533.3" y="99.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="536.3" y="110.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.04%)</title><rect x="533.3" y="83.0" width="0.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="536.3" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$77/817463992.supply (371 samples, 14.22%)</title><rect x="533.7" y="227.0" width="167.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="536.7" y="238.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$response$2 (371 samples, 14.22%)</title><rect x="533.7" y="211.0" width="167.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="536.7" y="222.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.put (371 samples, 14.22%)</title><rect x="533.7" y="195.0" width="167.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="536.7" y="206.0">ru/mail/polis/service..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (43 samples, 1.65%)</title><rect x="533.7" y="179.0" width="19.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="536.7" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (43 samples, 1.65%)</title><rect x="533.7" y="163.0" width="19.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="536.7" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (43 samples, 1.65%)</title><rect x="533.7" y="147.0" width="19.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="536.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.upsert (252 samples, 9.66%)</title><rect x="553.2" y="179.0" width="114.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="556.2" y="190.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (68 samples, 2.61%)</title><rect x="553.2" y="163.0" width="30.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="556.2" y="174.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (68 samples, 2.61%)</title><rect x="553.2" y="147.0" width="30.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="556.2" y="158.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (51 samples, 1.95%)</title><rect x="583.9" y="163.0" width="23.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="586.9" y="174.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (51 samples, 1.95%)</title><rect x="583.9" y="147.0" width="23.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="586.9" y="158.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.upsert (133 samples, 5.10%)</title><rect x="607.0" y="163.0" width="60.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="610.0" y="174.0">ru/mai..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (71 samples, 2.72%)</title><rect x="607.0" y="147.0" width="32.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="610.0" y="158.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (71 samples, 2.72%)</title><rect x="607.0" y="131.0" width="32.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="610.0" y="142.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (71 samples, 2.72%)</title><rect x="607.0" y="115.0" width="32.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="610.0" y="126.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (47 samples, 1.80%)</title><rect x="639.1" y="147.0" width="21.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="642.1" y="158.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (47 samples, 1.80%)</title><rect x="639.1" y="131.0" width="21.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="642.1" y="142.0">j..</text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Value (15 samples, 0.57%)</title><rect x="660.4" y="147.0" width="6.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="663.4" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.emptyResponse (76 samples, 2.91%)</title><rect x="667.2" y="179.0" width="34.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="670.2" y="190.0">ru..</text>
</g>
<g>
<title>one.nio.http.Response (15 samples, 0.57%)</title><rect x="667.2" y="163.0" width="6.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="670.2" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (61 samples, 2.34%)</title><rect x="673.9" y="163.0" width="27.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="676.9" y="174.0">o..</text>
</g>
<g>
<title>byte[] (31 samples, 1.19%)</title><rect x="673.9" y="147.0" width="14.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="676.9" y="158.0"></text>
</g>
<g>
<title>java.lang.String[] (16 samples, 0.61%)</title><rect x="688.0" y="147.0" width="7.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="691.0" y="158.0"></text>
</g>
<g>
<title>java.lang.String (14 samples, 0.54%)</title><rect x="695.2" y="147.0" width="6.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="698.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.sendResponse (84 samples, 3.22%)</title><rect x="701.5" y="227.0" width="38.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="704.5" y="238.0">ru/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (84 samples, 3.22%)</title><rect x="701.5" y="211.0" width="38.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="704.5" y="222.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (84 samples, 3.22%)</title><rect x="701.5" y="195.0" width="38.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="704.5" y="206.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (54 samples, 2.07%)</title><rect x="701.5" y="179.0" width="24.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="704.5" y="190.0">o..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (54 samples, 2.07%)</title><rect x="701.5" y="163.0" width="24.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="704.5" y="174.0">o..</text>
</g>
<g>
<title>byte[] (54 samples, 2.07%)</title><rect x="701.5" y="147.0" width="24.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="704.5" y="158.0">b..</text>
</g>
<g>
<title>one/nio/net/Session.write (30 samples, 1.15%)</title><rect x="726.0" y="179.0" width="13.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="729.0" y="190.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (30 samples, 1.15%)</title><rect x="726.0" y="163.0" width="13.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="729.0" y="174.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (996 samples, 38.18%)</title><rect x="739.5" y="307.0" width="450.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="742.5" y="318.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (20 samples, 0.77%)</title><rect x="739.5" y="291.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="742.5" y="302.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (20 samples, 0.77%)</title><rect x="739.5" y="275.0" width="9.1" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="742.5" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (976 samples, 37.41%)</title><rect x="748.6" y="291.0" width="441.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="751.6" y="302.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (976 samples, 37.41%)</title><rect x="748.6" y="275.0" width="441.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="751.6" y="286.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (976 samples, 37.41%)</title><rect x="748.6" y="259.0" width="441.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="751.6" y="270.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (458 samples, 17.55%)</title><rect x="748.6" y="243.0" width="207.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="751.6" y="254.0">one/nio/http/HttpSession.ha..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (458 samples, 17.55%)</title><rect x="748.6" y="227.0" width="207.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="751.6" y="238.0">one/nio/http/HttpServer.han..</text>
</g>
<g>
<title>RequestHandler1_response.handleRequest (406 samples, 15.56%)</title><rect x="748.6" y="211.0" width="183.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="751.6" y="222.0">RequestHandler1_response..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (31 samples, 1.19%)</title><rect x="748.6" y="195.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="751.6" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (31 samples, 1.19%)</title><rect x="748.6" y="179.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="751.6" y="190.0"></text>
</g>
<g>
<title>java/lang/String.substring (31 samples, 1.19%)</title><rect x="748.6" y="163.0" width="14.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="751.6" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (31 samples, 1.19%)</title><rect x="748.6" y="147.0" width="14.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="751.6" y="158.0"></text>
</g>
<g>
<title>java.lang.String (9 samples, 0.34%)</title><rect x="748.6" y="131.0" width="4.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="751.6" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (22 samples, 0.84%)</title><rect x="752.6" y="131.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="755.6" y="142.0"></text>
</g>
<g>
<title>byte[] (22 samples, 0.84%)</title><rect x="752.6" y="115.0" width="10.0" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="755.6" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (375 samples, 14.37%)</title><rect x="762.6" y="195.0" width="169.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="765.6" y="206.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>java/lang/String.getBytes (14 samples, 0.54%)</title><rect x="762.6" y="179.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="765.6" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (14 samples, 0.54%)</title><rect x="762.6" y="163.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="765.6" y="174.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (14 samples, 0.54%)</title><rect x="762.6" y="147.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="765.6" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (14 samples, 0.54%)</title><rect x="762.6" y="131.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="765.6" y="142.0"></text>
</g>
<g>
<title>byte[] (14 samples, 0.54%)</title><rect x="762.6" y="115.0" width="6.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="765.6" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (21 samples, 0.80%)</title><rect x="768.9" y="179.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="771.9" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (21 samples, 0.80%)</title><rect x="768.9" y="163.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="771.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$75/1954861215.get$Lambda (4 samples, 0.15%)</title><rect x="768.9" y="147.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="771.9" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mrsandman5.ServiceImpl$$Lambda$75 (4 samples, 0.15%)</title><rect x="768.9" y="131.0" width="1.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="771.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$77/817463992.get$Lambda (17 samples, 0.65%)</title><rect x="770.7" y="147.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="773.7" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mrsandman5.ServiceImpl$$Lambda$77 (17 samples, 0.65%)</title><rect x="770.7" y="131.0" width="7.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="773.7" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (37 samples, 1.42%)</title><rect x="778.4" y="179.0" width="16.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="781.4" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (37 samples, 1.42%)</title><rect x="778.4" y="163.0" width="16.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="781.4" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (37 samples, 1.42%)</title><rect x="778.4" y="147.0" width="16.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="781.4" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.asyncExecute (65 samples, 2.49%)</title><rect x="795.2" y="179.0" width="29.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="798.2" y="190.0">ru..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (22 samples, 0.84%)</title><rect x="795.2" y="163.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="798.2" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (22 samples, 0.84%)</title><rect x="795.2" y="147.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="798.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$79/576483919.get$Lambda (22 samples, 0.84%)</title><rect x="795.2" y="131.0" width="9.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="798.2" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mrsandman5.ServiceImpl$$Lambda$79 (22 samples, 0.84%)</title><rect x="795.2" y="115.0" width="9.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="798.2" y="126.0"></text>
</g>
<g>
<title>one/nio/server/Server.asyncExecute (43 samples, 1.65%)</title><rect x="805.1" y="163.0" width="19.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="808.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (43 samples, 1.65%)</title><rect x="805.1" y="147.0" width="19.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="808.1" y="158.0"></text>
</g>
<g>
<title>one/nio/server/WorkerPool$WaitingSynchronousQueue.offer (43 samples, 1.65%)</title><rect x="805.1" y="131.0" width="19.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="808.1" y="142.0"></text>
</g>
<g>
<title>one/nio/server/WorkerPool$WaitingSynchronousQueue.offer (43 samples, 1.65%)</title><rect x="805.1" y="115.0" width="19.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="808.1" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.offer (43 samples, 1.65%)</title><rect x="805.1" y="99.0" width="19.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="808.1" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (43 samples, 1.65%)</title><rect x="805.1" y="83.0" width="19.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="808.1" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.snode (43 samples, 1.65%)</title><rect x="805.1" y="67.0" width="19.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="808.1" y="78.0"></text>
</g>
<g>
<title>java.util.concurrent.SynchronousQueue$TransferStack$SNode (43 samples, 1.65%)</title><rect x="805.1" y="51.0" width="19.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="808.1" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/clustering/ConsistentHashingTopology.primaryFor (238 samples, 9.12%)</title><rect x="824.6" y="179.0" width="107.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="827.6" y="190.0">ru/mail/polis..</text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.hashBytes (172 samples, 6.59%)</title><rect x="824.6" y="163.0" width="77.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="827.6" y="174.0">com/googl..</text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.newHasher (123 samples, 4.71%)</title><rect x="824.6" y="147.0" width="55.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="827.6" y="158.0">com/g..</text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction.newHasher (123 samples, 4.71%)</title><rect x="824.6" y="131.0" width="55.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="827.6" y="142.0">com/g..</text>
</g>
<g>
<title>com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher (73 samples, 2.80%)</title><rect x="824.6" y="115.0" width="33.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="827.6" y="126.0">co..</text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.&lt;init&gt; (50 samples, 1.92%)</title><rect x="857.6" y="115.0" width="22.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="860.6" y="126.0">c..</text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (50 samples, 1.92%)</title><rect x="857.6" y="99.0" width="22.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="860.6" y="110.0">c..</text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (50 samples, 1.92%)</title><rect x="857.6" y="83.0" width="22.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="860.6" y="94.0">c..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (50 samples, 1.92%)</title><rect x="857.6" y="67.0" width="22.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="860.6" y="78.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (33 samples, 1.26%)</title><rect x="857.6" y="51.0" width="14.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="860.6" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (17 samples, 0.65%)</title><rect x="872.5" y="51.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="875.5" y="62.0"></text>
</g>
<g>
<title>byte[] (17 samples, 0.65%)</title><rect x="872.5" y="35.0" width="7.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="875.5" y="46.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.hash (49 samples, 1.88%)</title><rect x="880.2" y="147.0" width="22.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="883.2" y="158.0">c..</text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.makeHash (49 samples, 1.88%)</title><rect x="880.2" y="131.0" width="22.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="883.2" y="142.0">c..</text>
</g>
<g>
<title>byte[] (21 samples, 0.80%)</title><rect x="880.2" y="115.0" width="9.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="883.2" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (28 samples, 1.07%)</title><rect x="889.7" y="115.0" width="12.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="892.7" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (28 samples, 1.07%)</title><rect x="889.7" y="99.0" width="12.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="892.7" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (28 samples, 1.07%)</title><rect x="889.7" y="83.0" width="12.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="892.7" y="94.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (17 samples, 0.65%)</title><rect x="902.3" y="163.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="905.3" y="174.0"></text>
</g>
<g>
<title>java.lang.Long (17 samples, 0.65%)</title><rect x="902.3" y="147.0" width="7.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="905.3" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (32 samples, 1.23%)</title><rect x="910.0" y="163.0" width="14.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="913.0" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (32 samples, 1.23%)</title><rect x="910.0" y="147.0" width="14.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="913.0" y="158.0"></text>
</g>
<g>
<title>java/util/TreeMap.ceilingEntry (17 samples, 0.65%)</title><rect x="924.5" y="163.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="927.5" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap.exportEntry (17 samples, 0.65%)</title><rect x="924.5" y="147.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="927.5" y="158.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (17 samples, 0.65%)</title><rect x="924.5" y="131.0" width="7.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="927.5" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (52 samples, 1.99%)</title><rect x="932.2" y="211.0" width="23.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="935.2" y="222.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (52 samples, 1.99%)</title><rect x="932.2" y="195.0" width="23.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="935.2" y="206.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (52 samples, 1.99%)</title><rect x="932.2" y="179.0" width="23.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="935.2" y="190.0">j..</text>
</g>
<g>
<title>java.lang.String (24 samples, 0.92%)</title><rect x="932.2" y="163.0" width="10.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="935.2" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (28 samples, 1.07%)</title><rect x="943.1" y="163.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="946.1" y="174.0"></text>
</g>
<g>
<title>byte[] (28 samples, 1.07%)</title><rect x="943.1" y="147.0" width="12.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="946.1" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (246 samples, 9.43%)</title><rect x="955.7" y="243.0" width="111.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="958.7" y="254.0">one/nio/http/..</text>
</g>
<g>
<title>one.nio.http.Request (32 samples, 1.23%)</title><rect x="955.7" y="227.0" width="14.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="958.7" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (59 samples, 2.26%)</title><rect x="970.2" y="227.0" width="26.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="973.2" y="238.0">o..</text>
</g>
<g>
<title>java.lang.String[] (59 samples, 2.26%)</title><rect x="970.2" y="211.0" width="26.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="973.2" y="222.0">j..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (155 samples, 5.94%)</title><rect x="996.9" y="227.0" width="70.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="999.9" y="238.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (155 samples, 5.94%)</title><rect x="996.9" y="211.0" width="70.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="999.9" y="222.0">one/nio/..</text>
</g>
<g>
<title>char[] (110 samples, 4.22%)</title><rect x="996.9" y="195.0" width="49.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="999.9" y="206.0">char[]</text>
</g>
<g>
<title>java.lang.String (13 samples, 0.50%)</title><rect x="1046.6" y="195.0" width="5.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1049.6" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (32 samples, 1.23%)</title><rect x="1052.5" y="195.0" width="14.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1055.5" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (32 samples, 1.23%)</title><rect x="1052.5" y="179.0" width="14.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1055.5" y="190.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (32 samples, 1.23%)</title><rect x="1052.5" y="163.0" width="14.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1055.5" y="174.0"></text>
</g>
<g>
<title>byte[] (32 samples, 1.23%)</title><rect x="1052.5" y="147.0" width="14.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1055.5" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (5 samples, 0.19%)</title><rect x="1067.0" y="243.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1070.0" y="254.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.19%)</title><rect x="1067.0" y="227.0" width="2.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1070.0" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (39 samples, 1.49%)</title><rect x="1069.2" y="243.0" width="17.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1072.2" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (39 samples, 1.49%)</title><rect x="1069.2" y="227.0" width="17.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1072.2" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (39 samples, 1.49%)</title><rect x="1069.2" y="211.0" width="17.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1072.2" y="222.0"></text>
</g>
<g>
<title>java.lang.String (21 samples, 0.80%)</title><rect x="1069.2" y="195.0" width="9.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1072.2" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (18 samples, 0.69%)</title><rect x="1078.7" y="195.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1081.7" y="206.0"></text>
</g>
<g>
<title>byte[] (18 samples, 0.69%)</title><rect x="1078.7" y="179.0" width="8.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1081.7" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (228 samples, 8.74%)</title><rect x="1086.9" y="243.0" width="103.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1089.9" y="254.0">one/nio/util..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (228 samples, 8.74%)</title><rect x="1086.9" y="227.0" width="103.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1089.9" y="238.0">one/nio/util..</text>
</g>
<g>
<title>char[] (60 samples, 2.30%)</title><rect x="1086.9" y="211.0" width="27.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1089.9" y="222.0">c..</text>
</g>
<g>
<title>java.lang.String (40 samples, 1.53%)</title><rect x="1114.0" y="211.0" width="18.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1117.0" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (128 samples, 4.91%)</title><rect x="1132.1" y="211.0" width="57.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1135.1" y="222.0">java/l..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (128 samples, 4.91%)</title><rect x="1132.1" y="195.0" width="57.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1135.1" y="206.0">java/l..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (128 samples, 4.91%)</title><rect x="1132.1" y="179.0" width="57.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1135.1" y="190.0">java/l..</text>
</g>
<g>
<title>byte[] (128 samples, 4.91%)</title><rect x="1132.1" y="163.0" width="57.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1135.1" y="174.0">byte[]</text>
</g>
</g>
</svg>
