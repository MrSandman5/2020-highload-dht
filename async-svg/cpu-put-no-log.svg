<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (97 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (78 samples, 80.41%)</title><rect x="10.0" y="483.0" width="948.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="494.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (16 samples, 16.49%)</title><rect x="192.5" y="467.0" width="194.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="195.5" y="478.0">one/nio/net/NativeSelecto..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (14 samples, 14.43%)</title><rect x="216.8" y="451.0" width="170.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="219.8" y="462.0">one/nio/net/NativeSele..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 2.06%)</title><rect x="265.5" y="435.0" width="24.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="268.5" y="446.0">_..</text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 1.03%)</title><rect x="289.8" y="435.0" width="12.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="292.8" y="446.0"></text>
</g>
<g>
<title>clock_gettime@plt (1 samples, 1.03%)</title><rect x="302.0" y="435.0" width="12.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="305.0" y="446.0"></text>
</g>
<g>
<title>epoll_wait (6 samples, 6.19%)</title><rect x="314.1" y="435.0" width="73.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="317.1" y="446.0">epoll_wait</text>
</g>
<g>
<title>one/nio/net/Session.process (47 samples, 48.45%)</title><rect x="387.1" y="467.0" width="571.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.1" y="478.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 1.03%)</title><rect x="387.1" y="451.0" width="12.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="390.1" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (46 samples, 47.42%)</title><rect x="399.3" y="451.0" width="559.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="402.3" y="462.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (38 samples, 39.18%)</title><rect x="411.4" y="435.0" width="462.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="414.4" y="446.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (30 samples, 30.93%)</title><rect x="411.4" y="419.0" width="365.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="414.4" y="430.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (30 samples, 30.93%)</title><rect x="411.4" y="403.0" width="365.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="414.4" y="414.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_response.handleRequest (29 samples, 29.90%)</title><rect x="411.4" y="387.0" width="352.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="414.4" y="398.0">RequestHandler1_response.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (11 samples, 11.34%)</title><rect x="411.4" y="371.0" width="133.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="414.4" y="382.0">one/nio/http/Http..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 1.03%)</title><rect x="411.4" y="355.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="414.4" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 1.03%)</title><rect x="411.4" y="339.0" width="12.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="414.4" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 1.03%)</title><rect x="411.4" y="323.0" width="12.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="414.4" y="334.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 1.03%)</title><rect x="411.4" y="307.0" width="12.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="414.4" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (9 samples, 9.28%)</title><rect x="423.6" y="355.0" width="109.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="426.6" y="366.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 2.06%)</title><rect x="423.6" y="339.0" width="24.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="426.6" y="350.0">o..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 2.06%)</title><rect x="423.6" y="323.0" width="24.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="426.6" y="334.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 2.06%)</title><rect x="423.6" y="307.0" width="24.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="426.6" y="318.0">o..</text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 2.06%)</title><rect x="423.6" y="291.0" width="24.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="426.6" y="302.0">j..</text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 7.22%)</title><rect x="447.9" y="339.0" width="85.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="450.9" y="350.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 7.22%)</title><rect x="447.9" y="323.0" width="85.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="450.9" y="334.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (6 samples, 6.19%)</title><rect x="460.1" y="307.0" width="73.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="463.1" y="318.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (6 samples, 6.19%)</title><rect x="460.1" y="291.0" width="73.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="463.1" y="302.0">one/nio/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 2.06%)</title><rect x="484.4" y="275.0" width="24.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="487.4" y="286.0">J..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 1.03%)</title><rect x="496.6" y="259.0" width="12.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="499.6" y="270.0"></text>
</g>
<g>
<title>__libc_send (2 samples, 2.06%)</title><rect x="508.8" y="275.0" width="24.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="511.8" y="286.0">_..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 1.03%)</title><rect x="533.1" y="355.0" width="12.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="536.1" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 1.03%)</title><rect x="533.1" y="339.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="536.1" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 1.03%)</title><rect x="533.1" y="323.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="536.1" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (3 samples, 3.09%)</title><rect x="545.3" y="371.0" width="36.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="548.3" y="382.0">one..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 3.09%)</title><rect x="545.3" y="355.0" width="36.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="548.3" y="366.0">one..</text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 1.03%)</title><rect x="557.4" y="339.0" width="12.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="560.4" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 1.03%)</title><rect x="557.4" y="323.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="560.4" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 1.03%)</title><rect x="569.6" y="339.0" width="12.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="572.6" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 1.03%)</title><rect x="569.6" y="323.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="572.6" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 1.03%)</title><rect x="569.6" y="307.0" width="12.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="572.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (15 samples, 15.46%)</title><rect x="581.8" y="371.0" width="182.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="584.8" y="382.0">ru/mail/polis/service/mr..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.put (15 samples, 15.46%)</title><rect x="581.8" y="355.0" width="182.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="584.8" y="366.0">ru/mail/polis/service/mr..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.upsert (15 samples, 15.46%)</title><rect x="581.8" y="339.0" width="182.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="584.8" y="350.0">ru/mail/polis/dao/impl/D..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.upsert (15 samples, 15.46%)</title><rect x="581.8" y="323.0" width="182.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="584.8" y="334.0">ru/mail/polis/dao/impl/t..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 2.06%)</title><rect x="581.8" y="307.0" width="24.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="584.8" y="318.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 2.06%)</title><rect x="581.8" y="291.0" width="24.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="584.8" y="302.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 2.06%)</title><rect x="581.8" y="275.0" width="24.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="584.8" y="286.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 2.06%)</title><rect x="581.8" y="259.0" width="24.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="584.8" y="270.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 2.06%)</title><rect x="581.8" y="243.0" width="24.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="584.8" y="254.0">j..</text>
</g>
<g>
<title>[unknown] (1 samples, 1.03%)</title><rect x="593.9" y="227.0" width="12.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="596.9" y="238.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 1.03%)</title><rect x="593.9" y="211.0" width="12.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="596.9" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (13 samples, 13.40%)</title><rect x="606.1" y="307.0" width="158.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="609.1" y="318.0">java/util/TreeMap.put</text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 2.06%)</title><rect x="630.4" y="291.0" width="24.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="633.4" y="302.0">j..</text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 2.06%)</title><rect x="630.4" y="275.0" width="24.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="633.4" y="286.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (2 samples, 2.06%)</title><rect x="630.4" y="259.0" width="24.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="633.4" y="270.0">j..</text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 2.06%)</title><rect x="630.4" y="243.0" width="24.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="633.4" y="254.0">j..</text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 2.06%)</title><rect x="630.4" y="227.0" width="24.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="633.4" y="238.0">j..</text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 1.03%)</title><rect x="630.4" y="211.0" width="12.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="633.4" y="222.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 1.03%)</title><rect x="642.6" y="211.0" width="12.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="645.6" y="222.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 1.03%)</title><rect x="642.6" y="195.0" width="12.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="645.6" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 7.22%)</title><rect x="654.7" y="291.0" width="85.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.7" y="302.0">java/nio/B..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 7.22%)</title><rect x="654.7" y="275.0" width="85.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="657.7" y="286.0">java/nio/B..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 6.19%)</title><rect x="654.7" y="259.0" width="73.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="657.7" y="270.0">java/nio..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 1.03%)</title><rect x="715.6" y="243.0" width="12.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="718.6" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 1.03%)</title><rect x="715.6" y="227.0" width="12.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="718.6" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 1.03%)</title><rect x="727.7" y="259.0" width="12.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="730.7" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (2 samples, 2.06%)</title><rect x="739.9" y="291.0" width="24.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="742.9" y="302.0">j..</text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (2 samples, 2.06%)</title><rect x="739.9" y="275.0" width="24.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="742.9" y="286.0">j..</text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 1.03%)</title><rect x="764.2" y="387.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="767.2" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 1.03%)</title><rect x="764.2" y="371.0" width="12.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="767.2" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 1.03%)</title><rect x="764.2" y="355.0" width="12.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="767.2" y="366.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 1.03%)</title><rect x="764.2" y="339.0" width="12.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="767.2" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 1.03%)</title><rect x="764.2" y="323.0" width="12.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="767.2" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 1.03%)</title><rect x="776.4" y="419.0" width="12.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="779.4" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 1.03%)</title><rect x="776.4" y="403.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="779.4" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 3.09%)</title><rect x="788.6" y="419.0" width="36.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="791.6" y="430.0">one..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 4.12%)</title><rect x="825.1" y="419.0" width="48.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="828.1" y="430.0">one/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 1.03%)</title><rect x="861.5" y="403.0" width="12.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="864.5" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (7 samples, 7.22%)</title><rect x="873.7" y="435.0" width="85.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="876.7" y="446.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (7 samples, 7.22%)</title><rect x="873.7" y="419.0" width="85.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="876.7" y="430.0">one/nio/ne..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (3 samples, 3.09%)</title><rect x="873.7" y="403.0" width="36.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="876.7" y="414.0">Jav..</text>
</g>
<g>
<title>WeakPreserveExceptionMark::WeakPreserveExceptionMark(Thread*) (1 samples, 1.03%)</title><rect x="873.7" y="387.0" width="12.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="876.7" y="398.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 2.06%)</title><rect x="885.9" y="387.0" width="24.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="888.9" y="398.0">j..</text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 1.03%)</title><rect x="898.0" y="371.0" width="12.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="901.0" y="382.0"></text>
</g>
<g>
<title>__recv (2 samples, 2.06%)</title><rect x="910.2" y="403.0" width="24.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="913.2" y="414.0">_..</text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 2.06%)</title><rect x="934.5" y="403.0" width="24.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="937.5" y="414.0">j..</text>
</g>
<g>
<title>start_thread (19 samples, 19.59%)</title><rect x="958.9" y="483.0" width="231.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="961.9" y="494.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (19 samples, 19.59%)</title><rect x="958.9" y="467.0" width="231.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="961.9" y="478.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (19 samples, 19.59%)</title><rect x="958.9" y="451.0" width="231.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="961.9" y="462.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 7.22%)</title><rect x="958.9" y="435.0" width="85.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="961.9" y="446.0">GangWorker..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (7 samples, 7.22%)</title><rect x="958.9" y="419.0" width="85.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="961.9" y="430.0">G1ParTask:..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 6.19%)</title><rect x="958.9" y="403.0" width="73.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="961.9" y="414.0">G1ParEva..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 5.15%)</title><rect x="958.9" y="387.0" width="60.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="961.9" y="398.0">G1ParS..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 1.03%)</title><rect x="995.4" y="371.0" width="12.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="998.4" y="382.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 1.03%)</title><rect x="1007.5" y="371.0" width="12.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1010.5" y="382.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 1.03%)</title><rect x="1019.7" y="387.0" width="12.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1022.7" y="398.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 1.03%)</title><rect x="1031.9" y="403.0" width="12.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1034.9" y="414.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 1.03%)</title><rect x="1031.9" y="387.0" width="12.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1034.9" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 1.03%)</title><rect x="1031.9" y="371.0" width="12.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1034.9" y="382.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (1 samples, 1.03%)</title><rect x="1031.9" y="355.0" width="12.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1034.9" y="366.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 1.03%)</title><rect x="1031.9" y="339.0" width="12.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.9" y="350.0"></text>
</g>
<g>
<title>G1ScanClosureBase::trim_queue_partially() (1 samples, 1.03%)</title><rect x="1031.9" y="323.0" width="12.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1034.9" y="334.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (12 samples, 12.37%)</title><rect x="1044.0" y="435.0" width="146.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1047.0" y="446.0">JavaThread::thread..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (12 samples, 12.37%)</title><rect x="1044.0" y="419.0" width="146.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1047.0" y="430.0">CompileBroker::com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (12 samples, 12.37%)</title><rect x="1044.0" y="403.0" width="146.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1047.0" y="414.0">CompileBroker::inv..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (12 samples, 12.37%)</title><rect x="1044.0" y="387.0" width="146.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1047.0" y="398.0">C2Compiler::compil..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (12 samples, 12.37%)</title><rect x="1044.0" y="371.0" width="146.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1047.0" y="382.0">Compile::Compile(c..</text>
</g>
<g>
<title>Compile::Code_Gen() (7 samples, 7.22%)</title><rect x="1044.0" y="355.0" width="85.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1047.0" y="366.0">Compile::C..</text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (6 samples, 6.19%)</title><rect x="1044.0" y="339.0" width="73.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1047.0" y="350.0">PhaseCha..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 1.03%)</title><rect x="1044.0" y="323.0" width="12.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1047.0" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 1.03%)</title><rect x="1044.0" y="307.0" width="12.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1047.0" y="318.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.03%)</title><rect x="1044.0" y="291.0" width="12.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1047.0" y="302.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 1.03%)</title><rect x="1056.2" y="323.0" width="12.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1059.2" y="334.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 1.03%)</title><rect x="1068.4" y="323.0" width="12.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1071.4" y="334.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 1.03%)</title><rect x="1068.4" y="307.0" width="12.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.4" y="318.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 1.03%)</title><rect x="1068.4" y="291.0" width="12.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1071.4" y="302.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 1.03%)</title><rect x="1068.4" y="275.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1071.4" y="286.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 1.03%)</title><rect x="1080.5" y="323.0" width="12.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1083.5" y="334.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.03%)</title><rect x="1080.5" y="307.0" width="12.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1083.5" y="318.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 1.03%)</title><rect x="1092.7" y="323.0" width="12.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.7" y="334.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 1.03%)</title><rect x="1104.8" y="323.0" width="12.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.8" y="334.0"></text>
</g>
<g>
<title>__memset_avx2_erms (1 samples, 1.03%)</title><rect x="1117.0" y="339.0" width="12.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1120.0" y="350.0"></text>
</g>
<g>
<title>Compile::Optimize() (4 samples, 4.12%)</title><rect x="1129.2" y="355.0" width="48.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1132.2" y="366.0">Comp..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (3 samples, 3.09%)</title><rect x="1129.2" y="339.0" width="36.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.2" y="350.0">Com..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (3 samples, 3.09%)</title><rect x="1129.2" y="323.0" width="36.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.2" y="334.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 1.03%)</title><rect x="1129.2" y="307.0" width="12.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.2" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 1.03%)</title><rect x="1129.2" y="291.0" width="12.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.2" y="302.0"></text>
</g>
<g>
<title>PhaseIdealLoop::try_move_store_before_loop(Node*, Node*) (1 samples, 1.03%)</title><rect x="1129.2" y="275.0" width="12.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.2" y="286.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 2.06%)</title><rect x="1141.3" y="307.0" width="24.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.3" y="318.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 1.03%)</title><rect x="1141.3" y="291.0" width="12.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.3" y="302.0"></text>
</g>
<g>
<title>MaxINode::Opcode() const (1 samples, 1.03%)</title><rect x="1141.3" y="275.0" width="12.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.3" y="286.0"></text>
</g>
<g>
<title>TypeInt::make(int, int, int) (1 samples, 1.03%)</title><rect x="1153.5" y="291.0" width="12.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.5" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 1.03%)</title><rect x="1165.7" y="339.0" width="12.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.7" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 1.03%)</title><rect x="1165.7" y="323.0" width="12.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.7" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 1.03%)</title><rect x="1165.7" y="307.0" width="12.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.7" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 1.03%)</title><rect x="1165.7" y="291.0" width="12.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.7" y="302.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 1.03%)</title><rect x="1165.7" y="275.0" width="12.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.7" y="286.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 1.03%)</title><rect x="1165.7" y="259.0" width="12.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.7" y="270.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 1.03%)</title><rect x="1165.7" y="243.0" width="12.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.7" y="254.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 1.03%)</title><rect x="1165.7" y="227.0" width="12.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.7" y="238.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 1.03%)</title><rect x="1165.7" y="211.0" width="12.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.7" y="222.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 1.03%)</title><rect x="1165.7" y="195.0" width="12.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.7" y="206.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 1.03%)</title><rect x="1165.7" y="179.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.7" y="190.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 1.03%)</title><rect x="1165.7" y="163.0" width="12.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.7" y="174.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 1.03%)</title><rect x="1165.7" y="147.0" width="12.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.7" y="158.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 1.03%)</title><rect x="1165.7" y="131.0" width="12.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.7" y="142.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 1.03%)</title><rect x="1165.7" y="115.0" width="12.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.7" y="126.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 1.03%)</title><rect x="1165.7" y="99.0" width="12.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.7" y="110.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 1.03%)</title><rect x="1165.7" y="83.0" width="12.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.7" y="94.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 1.03%)</title><rect x="1165.7" y="67.0" width="12.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.7" y="78.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 1.03%)</title><rect x="1165.7" y="51.0" width="12.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.7" y="62.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 1.03%)</title><rect x="1165.7" y="35.0" width="12.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.7" y="46.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.03%)</title><rect x="1177.8" y="355.0" width="12.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.03%)</title><rect x="1177.8" y="339.0" width="12.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.03%)</title><rect x="1177.8" y="323.0" width="12.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.03%)</title><rect x="1177.8" y="307.0" width="12.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.03%)</title><rect x="1177.8" y="291.0" width="12.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.03%)</title><rect x="1177.8" y="275.0" width="12.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.8" y="286.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.03%)</title><rect x="1177.8" y="259.0" width="12.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.8" y="270.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 1.03%)</title><rect x="1177.8" y="243.0" width="12.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.8" y="254.0"></text>
</g>
</g>
</svg>
