<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="517"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="517"> </text>
<g id="frames">
<g>
<title>all (121 samples, 100.00%)</title><rect x="10.0" y="483.0" width="1180.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="13.0" y="494.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.83%)</title><rect x="10.0" y="467.0" width="9.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (110 samples, 90.91%)</title><rect x="19.8" y="467.0" width="1072.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.8" y="478.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (4 samples, 3.31%)</title><rect x="29.5" y="451.0" width="39.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="32.5" y="462.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (4 samples, 3.31%)</title><rect x="29.5" y="435.0" width="39.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="32.5" y="446.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (19 samples, 15.70%)</title><rect x="68.5" y="451.0" width="185.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.5" y="462.0">one/nio/net/NativeSelect..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (19 samples, 15.70%)</title><rect x="68.5" y="435.0" width="185.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="71.5" y="446.0">one/nio/net/NativeSelect..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 3.31%)</title><rect x="97.8" y="419.0" width="39.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="100.8" y="430.0">__c..</text>
</g>
<g>
<title>clock_gettime (1 samples, 0.83%)</title><rect x="127.0" y="403.0" width="9.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="130.0" y="414.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 1.65%)</title><rect x="136.8" y="419.0" width="19.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="139.8" y="430.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 1.65%)</title><rect x="156.3" y="419.0" width="19.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="159.3" y="430.0"></text>
</g>
<g>
<title>clock_gettime@plt (1 samples, 0.83%)</title><rect x="175.8" y="419.0" width="9.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="178.8" y="430.0"></text>
</g>
<g>
<title>epoll_wait (7 samples, 5.79%)</title><rect x="185.5" y="419.0" width="68.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="188.5" y="430.0">epoll_w..</text>
</g>
<g>
<title>one/nio/net/Session.process (86 samples, 71.07%)</title><rect x="253.8" y="451.0" width="838.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.8" y="462.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (85 samples, 70.25%)</title><rect x="263.6" y="435.0" width="828.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="266.6" y="446.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (67 samples, 55.37%)</title><rect x="263.6" y="419.0" width="653.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="266.6" y="430.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (54 samples, 44.63%)</title><rect x="273.3" y="403.0" width="526.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.3" y="414.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (54 samples, 44.63%)</title><rect x="273.3" y="387.0" width="526.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="276.3" y="398.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_response.handleRequest (52 samples, 42.98%)</title><rect x="273.3" y="371.0" width="507.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.3" y="382.0">RequestHandler1_response.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (12 samples, 9.92%)</title><rect x="283.1" y="355.0" width="117.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.1" y="366.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (12 samples, 9.92%)</title><rect x="283.1" y="339.0" width="117.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="286.1" y="350.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 3.31%)</title><rect x="283.1" y="323.0" width="39.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.1" y="334.0">one..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 2.48%)</title><rect x="292.8" y="307.0" width="29.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.8" y="318.0">on..</text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 2.48%)</title><rect x="292.8" y="291.0" width="29.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.8" y="302.0">on..</text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 2.48%)</title><rect x="292.8" y="275.0" width="29.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.8" y="286.0">ja..</text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 6.61%)</title><rect x="322.1" y="323.0" width="78.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="325.1" y="334.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 6.61%)</title><rect x="322.1" y="307.0" width="78.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="325.1" y="318.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (8 samples, 6.61%)</title><rect x="322.1" y="291.0" width="78.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="325.1" y="302.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (8 samples, 6.61%)</title><rect x="322.1" y="275.0" width="78.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="325.1" y="286.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 1.65%)</title><rect x="331.8" y="259.0" width="19.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="334.8" y="270.0"></text>
</g>
<g>
<title>__libc_send (5 samples, 4.13%)</title><rect x="351.3" y="259.0" width="48.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="354.3" y="270.0">__li..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (2 samples, 1.65%)</title><rect x="400.1" y="355.0" width="19.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="403.1" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 1.65%)</title><rect x="400.1" y="339.0" width="19.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="403.1" y="350.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 1.65%)</title><rect x="400.1" y="323.0" width="19.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.1" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (37 samples, 30.58%)</title><rect x="419.6" y="355.0" width="360.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="422.6" y="366.0">ru/mail/polis/service/mrsandman5/ServiceImpl.resp..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.get (37 samples, 30.58%)</title><rect x="419.6" y="339.0" width="360.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="422.6" y="350.0">ru/mail/polis/service/mrsandman5/ServiceImpl.get</text>
</g>
<g>
<title>one/nio/http/Response.ok (1 samples, 0.83%)</title><rect x="419.6" y="323.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="422.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (35 samples, 28.93%)</title><rect x="429.3" y="323.0" width="341.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="432.3" y="334.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (12 samples, 9.92%)</title><rect x="429.3" y="307.0" width="117.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="432.3" y="318.0">com/google/com..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (12 samples, 9.92%)</title><rect x="429.3" y="291.0" width="117.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="432.3" y="302.0">com/google/com..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (12 samples, 9.92%)</title><rect x="429.3" y="275.0" width="117.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="432.3" y="286.0">com/google/com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (12 samples, 9.92%)</title><rect x="429.3" y="259.0" width="117.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="432.3" y="270.0">com/google/com..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (12 samples, 9.92%)</title><rect x="429.3" y="243.0" width="117.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="432.3" y="254.0">ru/mail/polis/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (5 samples, 4.13%)</title><rect x="439.1" y="227.0" width="48.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="442.1" y="238.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (3 samples, 2.48%)</title><rect x="439.1" y="211.0" width="29.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="442.1" y="222.0">co..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (3 samples, 2.48%)</title><rect x="439.1" y="195.0" width="29.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="442.1" y="206.0">co..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3 samples, 2.48%)</title><rect x="439.1" y="179.0" width="29.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="442.1" y="190.0">co..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3 samples, 2.48%)</title><rect x="439.1" y="163.0" width="29.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="442.1" y="174.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3 samples, 2.48%)</title><rect x="439.1" y="147.0" width="29.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="442.1" y="158.0">co..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 1.65%)</title><rect x="439.1" y="131.0" width="19.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="442.1" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (1 samples, 0.83%)</title><rect x="458.6" y="131.0" width="9.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="461.6" y="142.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (2 samples, 1.65%)</title><rect x="468.3" y="211.0" width="19.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="471.3" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (2 samples, 1.65%)</title><rect x="468.3" y="195.0" width="19.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="471.3" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (2 samples, 1.65%)</title><rect x="468.3" y="179.0" width="19.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="471.3" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (2 samples, 1.65%)</title><rect x="468.3" y="163.0" width="19.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="471.3" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (2 samples, 1.65%)</title><rect x="468.3" y="147.0" width="19.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="471.3" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (2 samples, 1.65%)</title><rect x="468.3" y="131.0" width="19.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="471.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (2 samples, 1.65%)</title><rect x="468.3" y="115.0" width="19.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="471.3" y="126.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 1.65%)</title><rect x="468.3" y="99.0" width="19.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="471.3" y="110.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2 samples, 1.65%)</title><rect x="468.3" y="83.0" width="19.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="471.3" y="94.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (2 samples, 1.65%)</title><rect x="468.3" y="67.0" width="19.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="471.3" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (2 samples, 1.65%)</title><rect x="468.3" y="51.0" width="19.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="471.3" y="62.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2 samples, 1.65%)</title><rect x="468.3" y="35.0" width="19.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="471.3" y="46.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (3 samples, 2.48%)</title><rect x="487.9" y="227.0" width="29.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="490.9" y="238.0">ja..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 2.48%)</title><rect x="487.9" y="211.0" width="29.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="490.9" y="222.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$69/1989688177.apply (3 samples, 2.48%)</title><rect x="517.1" y="227.0" width="29.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="520.1" y="238.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (3 samples, 2.48%)</title><rect x="517.1" y="211.0" width="29.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="520.1" y="222.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 2.48%)</title><rect x="517.1" y="195.0" width="29.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="520.1" y="206.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 2.48%)</title><rect x="517.1" y="179.0" width="29.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="520.1" y="190.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 2.48%)</title><rect x="517.1" y="163.0" width="29.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="520.1" y="174.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 2.48%)</title><rect x="517.1" y="147.0" width="29.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="520.1" y="158.0">ja..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 2.48%)</title><rect x="517.1" y="131.0" width="29.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="520.1" y="142.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 1.65%)</title><rect x="517.1" y="115.0" width="19.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="520.1" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.83%)</title><rect x="536.6" y="115.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="539.6" y="126.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (3 samples, 2.48%)</title><rect x="546.4" y="307.0" width="29.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="549.4" y="318.0">co..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (3 samples, 2.48%)</title><rect x="546.4" y="291.0" width="29.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="549.4" y="302.0">co..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3 samples, 2.48%)</title><rect x="546.4" y="275.0" width="29.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="549.4" y="286.0">co..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3 samples, 2.48%)</title><rect x="546.4" y="259.0" width="29.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="549.4" y="270.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3 samples, 2.48%)</title><rect x="546.4" y="243.0" width="29.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="549.4" y="254.0">co..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (2 samples, 1.65%)</title><rect x="556.1" y="227.0" width="19.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="559.1" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.83%)</title><rect x="556.1" y="211.0" width="9.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="559.1" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (1 samples, 0.83%)</title><rect x="556.1" y="195.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="559.1" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.83%)</title><rect x="556.1" y="179.0" width="9.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="559.1" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (1 samples, 0.83%)</title><rect x="556.1" y="163.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="559.1" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$69/1989688177.apply (1 samples, 0.83%)</title><rect x="565.9" y="211.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="568.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (1 samples, 0.83%)</title><rect x="565.9" y="195.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="568.9" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.83%)</title><rect x="565.9" y="179.0" width="9.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="568.9" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.83%)</title><rect x="565.9" y="163.0" width="9.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="568.9" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.83%)</title><rect x="565.9" y="147.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="568.9" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (3 samples, 2.48%)</title><rect x="575.6" y="307.0" width="29.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="578.6" y="318.0">ja..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 2.48%)</title><rect x="575.6" y="291.0" width="29.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="578.6" y="302.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.83%)</title><rect x="575.6" y="275.0" width="9.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="578.6" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.83%)</title><rect x="575.6" y="259.0" width="9.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="578.6" y="270.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 1.65%)</title><rect x="585.4" y="275.0" width="19.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="588.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.iterator (17 samples, 14.05%)</title><rect x="604.9" y="307.0" width="165.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="607.9" y="318.0">ru/mail/polis/dao/imp..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.cellIterator (17 samples, 14.05%)</title><rect x="604.9" y="291.0" width="165.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="607.9" y="302.0">ru/mail/polis/dao/imp..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (2 samples, 1.65%)</title><rect x="604.9" y="275.0" width="19.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="607.9" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (2 samples, 1.65%)</title><rect x="604.9" y="259.0" width="19.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="607.9" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (1 samples, 0.83%)</title><rect x="614.6" y="243.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="617.6" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.83%)</title><rect x="614.6" y="227.0" width="9.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="617.6" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1 samples, 0.83%)</title><rect x="614.6" y="211.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="617.6" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (1 samples, 0.83%)</title><rect x="614.6" y="195.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="617.6" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1 samples, 0.83%)</title><rect x="614.6" y="179.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="617.6" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.83%)</title><rect x="614.6" y="163.0" width="9.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="617.6" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (1 samples, 0.83%)</title><rect x="614.6" y="147.0" width="9.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="617.6" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (1 samples, 0.83%)</title><rect x="614.6" y="131.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="617.6" y="142.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.83%)</title><rect x="614.6" y="115.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="617.6" y="126.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.83%)</title><rect x="624.4" y="275.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="627.4" y="286.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (1 samples, 0.83%)</title><rect x="624.4" y="259.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="627.4" y="270.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (1 samples, 0.83%)</title><rect x="624.4" y="243.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="627.4" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.83%)</title><rect x="634.1" y="275.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="637.1" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.83%)</title><rect x="634.1" y="259.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="637.1" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.83%)</title><rect x="634.1" y="243.0" width="9.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="637.1" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.83%)</title><rect x="634.1" y="227.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="637.1" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.83%)</title><rect x="634.1" y="211.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="637.1" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (2 samples, 1.65%)</title><rect x="643.9" y="275.0" width="19.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="646.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.iterator (11 samples, 9.09%)</title><rect x="663.4" y="275.0" width="107.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="666.4" y="286.0">ru/mail/polis..</text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (8 samples, 6.61%)</title><rect x="663.4" y="259.0" width="78.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="666.4" y="270.0">java/util..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (8 samples, 6.61%)</title><rect x="663.4" y="243.0" width="78.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="666.4" y="254.0">java/util..</text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (8 samples, 6.61%)</title><rect x="663.4" y="227.0" width="78.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="666.4" y="238.0">java/util..</text>
</g>
<g>
<title>java/util/TreeMap.compare (8 samples, 6.61%)</title><rect x="663.4" y="211.0" width="78.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="666.4" y="222.0">java/util..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 4.13%)</title><rect x="692.6" y="195.0" width="48.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="695.6" y="206.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 4.13%)</title><rect x="692.6" y="179.0" width="48.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="695.6" y="190.0">java..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 3.31%)</title><rect x="692.6" y="163.0" width="39.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="695.6" y="174.0">jav..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.83%)</title><rect x="721.9" y="147.0" width="9.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="724.9" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.83%)</title><rect x="721.9" y="131.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="724.9" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.83%)</title><rect x="731.7" y="163.0" width="9.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="734.7" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.83%)</title><rect x="731.7" y="147.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="734.7" y="158.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.83%)</title><rect x="731.7" y="131.0" width="9.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="734.7" y="142.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (3 samples, 2.48%)</title><rect x="741.4" y="259.0" width="29.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="744.4" y="270.0">ja..</text>
</g>
<g>
<title>java/util/TreeMap.tailMap (3 samples, 2.48%)</title><rect x="741.4" y="243.0" width="29.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="744.4" y="254.0">ja..</text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (3 samples, 2.48%)</title><rect x="741.4" y="227.0" width="29.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="744.4" y="238.0">ja..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (3 samples, 2.48%)</title><rect x="741.4" y="211.0" width="29.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="744.4" y="222.0">ja..</text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.83%)</title><rect x="760.9" y="195.0" width="9.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="763.9" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.83%)</title><rect x="760.9" y="179.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="763.9" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.83%)</title><rect x="760.9" y="163.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="763.9" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.83%)</title><rect x="760.9" y="147.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="763.9" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.83%)</title><rect x="760.9" y="131.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="763.9" y="142.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.83%)</title><rect x="760.9" y="115.0" width="9.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="763.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.toByteArray (1 samples, 0.83%)</title><rect x="770.7" y="323.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="773.7" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.83%)</title><rect x="770.7" y="307.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="773.7" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.83%)</title><rect x="770.7" y="291.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="773.7" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.83%)</title><rect x="770.7" y="275.0" width="9.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="773.7" y="286.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.83%)</title><rect x="780.4" y="371.0" width="9.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="783.4" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.83%)</title><rect x="780.4" y="355.0" width="9.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="783.4" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.83%)</title><rect x="780.4" y="339.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="783.4" y="350.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.83%)</title><rect x="780.4" y="323.0" width="9.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="783.4" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.83%)</title><rect x="790.2" y="371.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="793.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.83%)</title><rect x="790.2" y="355.0" width="9.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="793.2" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.83%)</title><rect x="790.2" y="339.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="793.2" y="350.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.83%)</title><rect x="790.2" y="323.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="793.2" y="334.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.83%)</title><rect x="790.2" y="307.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="793.2" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 4.96%)</title><rect x="799.9" y="403.0" width="58.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="802.9" y="414.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 2.48%)</title><rect x="799.9" y="387.0" width="29.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="802.9" y="398.0">on..</text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 1.65%)</title><rect x="809.7" y="371.0" width="19.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="812.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 1.65%)</title><rect x="809.7" y="355.0" width="19.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="812.7" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 1.65%)</title><rect x="809.7" y="339.0" width="19.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="812.7" y="350.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.83%)</title><rect x="829.2" y="387.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="832.2" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 1.65%)</title><rect x="838.9" y="387.0" width="19.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="841.9" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 1.65%)</title><rect x="838.9" y="371.0" width="19.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="841.9" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.83%)</title><rect x="848.7" y="355.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="851.7" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.83%)</title><rect x="858.4" y="403.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="861.4" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.83%)</title><rect x="858.4" y="387.0" width="9.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="861.4" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 2.48%)</title><rect x="868.2" y="403.0" width="29.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="871.2" y="414.0">on..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 1.65%)</title><rect x="897.4" y="403.0" width="19.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="900.4" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 1.65%)</title><rect x="897.4" y="387.0" width="19.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="900.4" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.83%)</title><rect x="907.2" y="371.0" width="9.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="910.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.83%)</title><rect x="907.2" y="355.0" width="9.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="910.2" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (18 samples, 14.88%)</title><rect x="916.9" y="419.0" width="175.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="919.9" y="430.0">one/nio/net/Session.read</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (18 samples, 14.88%)</title><rect x="916.9" y="403.0" width="175.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="919.9" y="414.0">one/nio/net/NativeSocke..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (9 samples, 7.44%)</title><rect x="916.9" y="387.0" width="87.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="919.9" y="398.0">Java_one_n..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.83%)</title><rect x="936.4" y="371.0" width="9.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="939.4" y="382.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 1.65%)</title><rect x="946.2" y="371.0" width="19.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="949.2" y="382.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 1.65%)</title><rect x="965.7" y="371.0" width="19.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="968.7" y="382.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.83%)</title><rect x="985.2" y="371.0" width="9.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="988.2" y="382.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.83%)</title><rect x="995.0" y="371.0" width="9.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="998.0" y="382.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.83%)</title><rect x="1004.7" y="387.0" width="9.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1007.7" y="398.0"></text>
</g>
<g>
<title>__recv (7 samples, 5.79%)</title><rect x="1014.5" y="387.0" width="68.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1017.5" y="398.0">__recv</text>
</g>
<g>
<title>recv@plt (1 samples, 0.83%)</title><rect x="1082.7" y="387.0" width="9.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1085.7" y="398.0"></text>
</g>
<g>
<title>start_thread (10 samples, 8.26%)</title><rect x="1092.5" y="467.0" width="97.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1095.5" y="478.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (10 samples, 8.26%)</title><rect x="1092.5" y="451.0" width="97.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1095.5" y="462.0">thread_nati..</text>
</g>
<g>
<title>Thread::call_run() (10 samples, 8.26%)</title><rect x="1092.5" y="435.0" width="97.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1095.5" y="446.0">Thread::cal..</text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 4.96%)</title><rect x="1092.5" y="419.0" width="58.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1095.5" y="430.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 4.96%)</title><rect x="1092.5" y="403.0" width="58.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.5" y="414.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 1.65%)</title><rect x="1092.5" y="387.0" width="19.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.5" y="398.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 1.65%)</title><rect x="1092.5" y="371.0" width="19.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.5" y="382.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (4 samples, 3.31%)</title><rect x="1112.0" y="387.0" width="39.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.0" y="398.0">G1R..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (4 samples, 3.31%)</title><rect x="1112.0" y="371.0" width="39.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.0" y="382.0">G1R..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (4 samples, 3.31%)</title><rect x="1112.0" y="355.0" width="39.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.0" y="366.0">G1C..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (4 samples, 3.31%)</title><rect x="1112.0" y="339.0" width="39.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1115.0" y="350.0">Dir..</text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 3.31%)</title><rect x="1112.0" y="323.0" width="39.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1115.0" y="334.0">G1R..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.83%)</title><rect x="1112.0" y="307.0" width="9.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.0" y="318.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.83%)</title><rect x="1121.7" y="307.0" width="9.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.7" y="318.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.83%)</title><rect x="1121.7" y="291.0" width="9.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.7" y="302.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.83%)</title><rect x="1121.7" y="275.0" width="9.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.7" y="286.0"></text>
</g>
<g>
<title>G1ScanClosureBase::trim_queue_partially() (1 samples, 0.83%)</title><rect x="1131.5" y="307.0" width="9.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.5" y="318.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.83%)</title><rect x="1131.5" y="291.0" width="9.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.5" y="302.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.83%)</title><rect x="1131.5" y="275.0" width="9.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.5" y="286.0"></text>
</g>
<g>
<title>EnableIf&lt;!IsSame&lt;G1ScanEvacuatedObjClosure, OopClosure&gt;::value, void&gt;::type call_do_oop&lt;unsigned int, G1ScanEvacuatedObjClosure, OopClosure, G1ScanEvacuatedObjClosure&gt;(void (G1ScanEvacuatedObjClosure::*)(unsigned int*), void (OopClosure::*)(unsigned int*), G1ScanEvacuatedObjClosure*, unsigned int*) (1 samples, 0.83%)</title><rect x="1131.5" y="259.0" width="9.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.5" y="270.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;TypeArrayKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (1 samples, 0.83%)</title><rect x="1141.2" y="307.0" width="9.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.2" y="318.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (3 samples, 2.48%)</title><rect x="1151.0" y="419.0" width="29.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.0" y="430.0">Ja..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (3 samples, 2.48%)</title><rect x="1151.0" y="403.0" width="29.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.0" y="414.0">Co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (3 samples, 2.48%)</title><rect x="1151.0" y="387.0" width="29.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.0" y="398.0">Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 2.48%)</title><rect x="1151.0" y="371.0" width="29.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.0" y="382.0">C2..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (3 samples, 2.48%)</title><rect x="1151.0" y="355.0" width="29.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.0" y="366.0">Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (2 samples, 1.65%)</title><rect x="1151.0" y="339.0" width="19.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.0" y="350.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (2 samples, 1.65%)</title><rect x="1151.0" y="323.0" width="19.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.0" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.83%)</title><rect x="1151.0" y="307.0" width="9.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.0" y="318.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.83%)</title><rect x="1151.0" y="291.0" width="9.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.0" y="302.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.83%)</title><rect x="1160.7" y="307.0" width="9.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.7" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.83%)</title><rect x="1160.7" y="291.0" width="9.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.7" y="302.0"></text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.83%)</title><rect x="1170.5" y="339.0" width="9.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.5" y="350.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.83%)</title><rect x="1170.5" y="323.0" width="9.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.5" y="334.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.83%)</title><rect x="1170.5" y="307.0" width="9.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.5" y="318.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseGVN*) (1 samples, 0.83%)</title><rect x="1170.5" y="291.0" width="9.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.5" y="302.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.83%)</title><rect x="1170.5" y="275.0" width="9.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.5" y="286.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.83%)</title><rect x="1170.5" y="259.0" width="9.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.5" y="270.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.83%)</title><rect x="1180.2" y="419.0" width="9.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.2" y="430.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.83%)</title><rect x="1180.2" y="403.0" width="9.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.2" y="414.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.83%)</title><rect x="1180.2" y="387.0" width="9.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.2" y="398.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.83%)</title><rect x="1180.2" y="371.0" width="9.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.2" y="382.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.83%)</title><rect x="1180.2" y="355.0" width="9.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1183.2" y="366.0"></text>
</g>
</g>
</svg>
