<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="581"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="581"> </text>
<g id="frames">
<g>
<title>all (900 samples, 100.00%)</title><rect x="10.0" y="547.0" width="1180.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="13.0" y="558.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (849 samples, 94.33%)</title><rect x="10.0" y="531.0" width="1113.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="542.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (849 samples, 94.33%)</title><rect x="10.0" y="515.0" width="1113.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="526.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (849 samples, 94.33%)</title><rect x="10.0" y="499.0" width="1113.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="510.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (45 samples, 5.00%)</title><rect x="10.0" y="483.0" width="59.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="494.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (42 samples, 4.67%)</title><rect x="12.6" y="467.0" width="55.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.6" y="478.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (2 samples, 0.22%)</title><rect x="12.6" y="451.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.22%)</title><rect x="12.6" y="435.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.22%)</title><rect x="12.6" y="419.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (39 samples, 4.33%)</title><rect x="15.2" y="451.0" width="51.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.2" y="462.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (3 samples, 0.33%)</title><rect x="15.2" y="435.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (2 samples, 0.22%)</title><rect x="16.6" y="419.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.6" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (1 samples, 0.11%)</title><rect x="16.6" y="403.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="19.6" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.set (1 samples, 0.11%)</title><rect x="16.6" y="387.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.6" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.11%)</title><rect x="17.9" y="403.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.11%)</title><rect x="19.2" y="435.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="22.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.11%)</title><rect x="19.2" y="419.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.11%)</title><rect x="19.2" y="403.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (35 samples, 3.89%)</title><rect x="20.5" y="435.0" width="45.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.5" y="446.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (35 samples, 3.89%)</title><rect x="20.5" y="419.0" width="45.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.5" y="430.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Park (25 samples, 2.78%)</title><rect x="21.8" y="403.0" width="32.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="24.8" y="414.0">Un..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.11%)</title><rect x="25.7" y="387.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="28.7" y="398.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (10 samples, 1.11%)</title><rect x="27.0" y="387.0" width="13.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="30.0" y="398.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.11%)</title><rect x="32.3" y="371.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="35.3" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.33%)</title><rect x="33.6" y="371.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="36.6" y="382.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.22%)</title><rect x="37.5" y="371.0" width="2.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="40.5" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.11%)</title><rect x="40.2" y="387.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="43.2" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.11%)</title><rect x="41.5" y="387.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="44.5" y="398.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.11%)</title><rect x="42.8" y="387.0" width="1.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="45.8" y="398.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.11%)</title><rect x="44.1" y="387.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="47.1" y="398.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (4 samples, 0.44%)</title><rect x="45.4" y="387.0" width="5.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="48.4" y="398.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.33%)</title><rect x="50.6" y="387.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="53.6" y="398.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.67%)</title><rect x="54.6" y="403.0" width="7.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="57.6" y="414.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (6 samples, 0.67%)</title><rect x="54.6" y="387.0" width="7.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="57.6" y="398.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.33%)</title><rect x="62.4" y="403.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="65.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.11%)</title><rect x="66.4" y="451.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.11%)</title><rect x="66.4" y="435.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="69.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.11%)</title><rect x="66.4" y="419.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.11%)</title><rect x="66.4" y="403.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.4" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.11%)</title><rect x="66.4" y="387.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="69.4" y="398.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.11%)</title><rect x="66.4" y="371.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="69.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (1 samples, 0.11%)</title><rect x="67.7" y="467.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="70.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$74/223837831.run (804 samples, 89.33%)</title><rect x="69.0" y="483.0" width="1054.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="72.0" y="494.0">ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$74/223837831.run</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$get$0 (804 samples, 89.33%)</title><rect x="69.0" y="467.0" width="1054.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="72.0" y="478.0">ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$get$0</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.getValue (804 samples, 89.33%)</title><rect x="69.0" y="451.0" width="1054.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="72.0" y="462.0">ru/mail/polis/service/mrsandman5/ServiceImpl.getValue</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (16 samples, 1.78%)</title><rect x="69.0" y="435.0" width="21.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.0" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (16 samples, 1.78%)</title><rect x="69.0" y="419.0" width="21.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="72.0" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.11%)</title><rect x="71.6" y="403.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="74.6" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.11%)</title><rect x="71.6" y="387.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.6" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.11%)</title><rect x="71.6" y="371.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="74.6" y="382.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.11%)</title><rect x="71.6" y="355.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.6" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 1.44%)</title><rect x="72.9" y="403.0" width="17.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="75.9" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 1.44%)</title><rect x="72.9" y="387.0" width="17.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="75.9" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (12 samples, 1.33%)</title><rect x="74.2" y="371.0" width="15.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="77.2" y="382.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (12 samples, 1.33%)</title><rect x="74.2" y="355.0" width="15.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="77.2" y="366.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (6 samples, 0.67%)</title><rect x="74.2" y="339.0" width="7.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="77.2" y="350.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.11%)</title><rect x="74.2" y="323.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="77.2" y="334.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.11%)</title><rect x="75.6" y="323.0" width="1.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="78.6" y="334.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.44%)</title><rect x="76.9" y="323.0" width="5.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="79.9" y="334.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="78.2" y="307.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="81.2" y="318.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.11%)</title><rect x="79.5" y="307.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="82.5" y="318.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.11%)</title><rect x="80.8" y="307.0" width="1.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="83.8" y="318.0"></text>
</g>
<g>
<title>__libc_send (6 samples, 0.67%)</title><rect x="82.1" y="339.0" width="7.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="85.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (788 samples, 87.56%)</title><rect x="90.0" y="435.0" width="1033.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="93.0" y="446.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (21 samples, 2.33%)</title><rect x="90.0" y="419.0" width="27.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="93.0" y="430.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (21 samples, 2.33%)</title><rect x="90.0" y="403.0" width="27.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="93.0" y="414.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (21 samples, 2.33%)</title><rect x="90.0" y="387.0" width="27.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="93.0" y="398.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (20 samples, 2.22%)</title><rect x="91.3" y="371.0" width="26.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="94.3" y="382.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (20 samples, 2.22%)</title><rect x="91.3" y="355.0" width="26.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="94.3" y="366.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (20 samples, 2.22%)</title><rect x="91.3" y="339.0" width="26.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="94.3" y="350.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (2 samples, 0.22%)</title><rect x="91.3" y="323.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="94.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.hasNext (1 samples, 0.11%)</title><rect x="92.6" y="307.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="95.6" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (18 samples, 2.00%)</title><rect x="93.9" y="323.0" width="23.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="96.9" y="334.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (18 samples, 2.00%)</title><rect x="93.9" y="307.0" width="23.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="96.9" y="318.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (18 samples, 2.00%)</title><rect x="93.9" y="291.0" width="23.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="96.9" y="302.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (18 samples, 2.00%)</title><rect x="93.9" y="275.0" width="23.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="96.9" y="286.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (18 samples, 2.00%)</title><rect x="93.9" y="259.0" width="23.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="96.9" y="270.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (18 samples, 2.00%)</title><rect x="93.9" y="243.0" width="23.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.9" y="254.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (18 samples, 2.00%)</title><rect x="93.9" y="227.0" width="23.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.9" y="238.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (18 samples, 2.00%)</title><rect x="93.9" y="211.0" width="23.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.9" y="222.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (18 samples, 2.00%)</title><rect x="93.9" y="195.0" width="23.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="96.9" y="206.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (18 samples, 2.00%)</title><rect x="93.9" y="179.0" width="23.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.9" y="190.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (4 samples, 0.44%)</title><rect x="93.9" y="163.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="96.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (4 samples, 0.44%)</title><rect x="93.9" y="147.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.9" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (4 samples, 0.44%)</title><rect x="93.9" y="131.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="96.9" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.11%)</title><rect x="93.9" y="115.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="96.9" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.11%)</title><rect x="93.9" y="99.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="96.9" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (3 samples, 0.33%)</title><rect x="95.2" y="115.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="98.2" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2 samples, 0.22%)</title><rect x="95.2" y="99.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="98.2" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.11%)</title><rect x="95.2" y="83.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="98.2" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.11%)</title><rect x="95.2" y="67.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.2" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.11%)</title><rect x="95.2" y="51.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="98.2" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.11%)</title><rect x="95.2" y="35.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="98.2" y="46.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (1 samples, 0.11%)</title><rect x="96.5" y="83.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.5" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.11%)</title><rect x="96.5" y="67.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.5" y="78.0"></text>
</g>
<g>
<title>__pread (1 samples, 0.11%)</title><rect x="96.5" y="51.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="99.5" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.11%)</title><rect x="97.8" y="99.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="100.8" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (14 samples, 1.56%)</title><rect x="99.2" y="163.0" width="18.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="102.2" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (14 samples, 1.56%)</title><rect x="99.2" y="147.0" width="18.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.2" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.22%)</title><rect x="99.2" y="131.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="102.2" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.22%)</title><rect x="99.2" y="115.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="102.2" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.22%)</title><rect x="99.2" y="99.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.2" y="110.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.22%)</title><rect x="99.2" y="83.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="102.2" y="94.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.22%)</title><rect x="99.2" y="67.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.2" y="78.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="100.5" y="51.0" width="1.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="103.5" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (9 samples, 1.00%)</title><rect x="101.8" y="131.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="104.8" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.11%)</title><rect x="101.8" y="115.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="104.8" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (8 samples, 0.89%)</title><rect x="103.1" y="115.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="106.1" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (8 samples, 0.89%)</title><rect x="103.1" y="99.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="106.1" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (8 samples, 0.89%)</title><rect x="103.1" y="83.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="106.1" y="94.0"></text>
</g>
<g>
<title>__pread (7 samples, 0.78%)</title><rect x="103.1" y="67.0" width="9.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="106.1" y="78.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.11%)</title><rect x="112.3" y="67.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="115.3" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (3 samples, 0.33%)</title><rect x="113.6" y="131.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="116.6" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.22%)</title><rect x="114.9" y="115.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="117.9" y="126.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.11%)</title><rect x="117.5" y="419.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="120.5" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (1 samples, 0.11%)</title><rect x="117.5" y="403.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="120.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$97/1524262454.apply (1 samples, 0.11%)</title><rect x="117.5" y="387.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="120.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.lambda$iterator$2 (1 samples, 0.11%)</title><rect x="117.5" y="371.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="120.5" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (1 samples, 0.11%)</title><rect x="117.5" y="355.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="120.5" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.11%)</title><rect x="118.8" y="419.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="121.8" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.11%)</title><rect x="118.8" y="403.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="121.8" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (1 samples, 0.11%)</title><rect x="120.1" y="419.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="123.1" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (1 samples, 0.11%)</title><rect x="120.1" y="403.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="123.1" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.11%)</title><rect x="120.1" y="387.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="123.1" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.11%)</title><rect x="120.1" y="371.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="123.1" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="120.1" y="355.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="123.1" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="120.1" y="339.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="123.1" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="120.1" y="323.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="123.1" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.11%)</title><rect x="120.1" y="307.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="123.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.iterator (764 samples, 84.89%)</title><rect x="121.4" y="419.0" width="1001.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="124.4" y="430.0">ru/mail/polis/dao/impl/DAOImpl.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (2 samples, 0.22%)</title><rect x="121.4" y="403.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="124.4" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.&lt;init&gt; (2 samples, 0.22%)</title><rect x="121.4" y="387.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.4" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (2 samples, 0.22%)</title><rect x="121.4" y="371.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="124.4" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.cellIterator (762 samples, 84.67%)</title><rect x="124.1" y="403.0" width="999.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="127.1" y="414.0">ru/mail/polis/dao/impl/DAOImpl.cellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (1 samples, 0.11%)</title><rect x="124.1" y="387.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="127.1" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="124.1" y="371.0" width="1.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="127.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (2 samples, 0.22%)</title><rect x="125.4" y="387.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="128.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (2 samples, 0.22%)</title><rect x="125.4" y="371.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="128.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (2 samples, 0.22%)</title><rect x="125.4" y="355.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="128.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (2 samples, 0.22%)</title><rect x="125.4" y="339.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="128.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (2 samples, 0.22%)</title><rect x="125.4" y="323.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="128.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (2 samples, 0.22%)</title><rect x="128.0" y="387.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="131.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (2 samples, 0.22%)</title><rect x="128.0" y="371.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="131.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (2 samples, 0.22%)</title><rect x="128.0" y="355.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="131.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.22%)</title><rect x="128.0" y="339.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="131.0" y="350.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.11%)</title><rect x="128.0" y="323.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="131.0" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.11%)</title><rect x="129.3" y="323.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.3" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.11%)</title><rect x="129.3" y="307.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="132.3" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.11%)</title><rect x="129.3" y="291.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="132.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.freshCellIterators (743 samples, 82.56%)</title><rect x="130.6" y="387.0" width="974.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="133.6" y="398.0">ru/mail/polis/dao/impl/DAOImpl.freshCellIterators</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (48 samples, 5.33%)</title><rect x="130.6" y="371.0" width="63.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="133.6" y="382.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (48 samples, 5.33%)</title><rect x="130.6" y="355.0" width="63.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="133.6" y="366.0">com/go..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (47 samples, 5.22%)</title><rect x="131.9" y="339.0" width="61.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.9" y="350.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (46 samples, 5.11%)</title><rect x="133.2" y="323.0" width="60.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="136.2" y="334.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (46 samples, 5.11%)</title><rect x="133.2" y="307.0" width="60.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="136.2" y="318.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (46 samples, 5.11%)</title><rect x="133.2" y="291.0" width="60.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="136.2" y="302.0">java/u..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (46 samples, 5.11%)</title><rect x="133.2" y="275.0" width="60.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="136.2" y="286.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (46 samples, 5.11%)</title><rect x="133.2" y="259.0" width="60.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="136.2" y="270.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (43 samples, 4.78%)</title><rect x="133.2" y="243.0" width="56.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="136.2" y="254.0">com/go..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (42 samples, 4.67%)</title><rect x="134.6" y="227.0" width="55.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="137.6" y="238.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (42 samples, 4.67%)</title><rect x="134.6" y="211.0" width="55.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="137.6" y="222.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (42 samples, 4.67%)</title><rect x="134.6" y="195.0" width="55.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="137.6" y="206.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.11%)</title><rect x="134.6" y="179.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="137.6" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="134.6" y="163.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="137.6" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="134.6" y="147.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="137.6" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (11 samples, 1.22%)</title><rect x="135.9" y="179.0" width="14.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="138.9" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (11 samples, 1.22%)</title><rect x="135.9" y="163.0" width="14.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="138.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (11 samples, 1.22%)</title><rect x="135.9" y="147.0" width="14.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="138.9" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 1.22%)</title><rect x="135.9" y="131.0" width="14.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="138.9" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (11 samples, 1.22%)</title><rect x="135.9" y="115.0" width="14.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="138.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (11 samples, 1.22%)</title><rect x="135.9" y="99.0" width="14.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="138.9" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (11 samples, 1.22%)</title><rect x="135.9" y="83.0" width="14.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="138.9" y="94.0"></text>
</g>
<g>
<title>__pread (11 samples, 1.22%)</title><rect x="135.9" y="67.0" width="14.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="138.9" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (30 samples, 3.33%)</title><rect x="150.3" y="179.0" width="39.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="153.3" y="190.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (30 samples, 3.33%)</title><rect x="150.3" y="163.0" width="39.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="153.3" y="174.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.11%)</title><rect x="151.6" y="147.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="154.6" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.11%)</title><rect x="151.6" y="131.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="154.6" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 2.67%)</title><rect x="152.9" y="147.0" width="31.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="155.9" y="158.0">su..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.22%)</title><rect x="152.9" y="131.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="155.9" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.11%)</title><rect x="154.2" y="115.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="157.2" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (20 samples, 2.22%)</title><rect x="155.5" y="131.0" width="26.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="158.5" y="142.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (19 samples, 2.11%)</title><rect x="156.8" y="115.0" width="25.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="159.8" y="126.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (19 samples, 2.11%)</title><rect x="156.8" y="99.0" width="25.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="159.8" y="110.0">s..</text>
</g>
<g>
<title>__pread (17 samples, 1.89%)</title><rect x="159.5" y="83.0" width="22.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="162.5" y="94.0">_..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.22%)</title><rect x="181.8" y="131.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="184.8" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.22%)</title><rect x="181.8" y="115.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="184.8" y="126.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.11%)</title><rect x="183.1" y="99.0" width="1.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="186.1" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (4 samples, 0.44%)</title><rect x="184.4" y="147.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="187.4" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.11%)</title><rect x="188.3" y="131.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="191.3" y="142.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (3 samples, 0.33%)</title><rect x="189.6" y="243.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="192.6" y="254.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (3 samples, 0.33%)</title><rect x="189.6" y="227.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="192.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (3 samples, 0.33%)</title><rect x="189.6" y="211.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="192.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (3 samples, 0.33%)</title><rect x="189.6" y="195.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="192.6" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compare (1 samples, 0.11%)</title><rect x="189.6" y="179.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="192.6" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.22%)</title><rect x="190.9" y="179.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="193.9" y="190.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.22%)</title><rect x="190.9" y="163.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="193.9" y="174.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.11%)</title><rect x="192.2" y="147.0" width="1.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="195.2" y="158.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (675 samples, 75.00%)</title><rect x="193.6" y="371.0" width="885.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="196.6" y="382.0">java/util/Collections$UnmodifiableCollection.forEach</text>
</g>
<g>
<title>java/lang/Iterable.forEach (675 samples, 75.00%)</title><rect x="193.6" y="355.0" width="885.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="196.6" y="366.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (1 samples, 0.11%)</title><rect x="194.9" y="339.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="197.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$83/1445426015.accept (673 samples, 74.78%)</title><rect x="196.2" y="339.0" width="882.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="199.2" y="350.0">ru/mail/polis/dao/impl/DAOImpl$$Lambda$83/1445426015.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.lambda$freshCellIterators$6 (673 samples, 74.78%)</title><rect x="196.2" y="323.0" width="882.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="199.2" y="334.0">ru/mail/polis/dao/impl/DAOImpl.lambda$freshCellIterators$6</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.iterator (673 samples, 74.78%)</title><rect x="196.2" y="307.0" width="882.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.2" y="318.0">ru/mail/polis/dao/impl/tables/SSTable.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt; (673 samples, 74.78%)</title><rect x="196.2" y="291.0" width="882.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="199.2" y="302.0">ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getPosition (673 samples, 74.78%)</title><rect x="196.2" y="275.0" width="882.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="199.2" y="286.0">ru/mail/polis/dao/impl/tables/SSTable.getPosition</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.89%)</title><rect x="196.2" y="259.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.2" y="270.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.89%)</title><rect x="196.2" y="243.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="199.2" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.22%)</title><rect x="204.0" y="227.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="207.0" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.22%)</title><rect x="204.0" y="211.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="207.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.keyAt (665 samples, 73.89%)</title><rect x="206.7" y="259.0" width="871.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="209.7" y="270.0">ru/mail/polis/dao/impl/tables/SSTable.keyAt</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7 samples, 0.78%)</title><rect x="208.0" y="243.0" width="9.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.0" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.67%)</title><rect x="209.3" y="227.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="212.3" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.56%)</title><rect x="210.6" y="211.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="213.6" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="214.5" y="195.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="217.5" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.11%)</title><rect x="214.5" y="179.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="217.5" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.11%)</title><rect x="214.5" y="163.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (1 samples, 0.11%)</title><rect x="214.5" y="147.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.5" y="158.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.11%)</title><rect x="215.8" y="195.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.8" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (7 samples, 0.78%)</title><rect x="217.2" y="243.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="220.2" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.22%)</title><rect x="219.8" y="227.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="222.8" y="238.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.22%)</title><rect x="219.8" y="211.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="222.8" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.22%)</title><rect x="219.8" y="195.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="222.8" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.22%)</title><rect x="219.8" y="179.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="222.8" y="190.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.22%)</title><rect x="219.8" y="163.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="222.8" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.22%)</title><rect x="219.8" y="147.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="222.8" y="158.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.11%)</title><rect x="219.8" y="131.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="222.8" y="142.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.11%)</title><rect x="219.8" y="115.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="222.8" y="126.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire_region(HeapRegion*, unsigned long) (1 samples, 0.11%)</title><rect x="219.8" y="99.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="222.8" y="110.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.11%)</title><rect x="221.1" y="131.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="224.1" y="142.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.11%)</title><rect x="221.1" y="115.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="224.1" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.33%)</title><rect x="222.4" y="227.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.4" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.33%)</title><rect x="222.4" y="211.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="225.4" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.33%)</title><rect x="222.4" y="195.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="225.4" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.11%)</title><rect x="222.4" y="179.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.4" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.22%)</title><rect x="223.7" y="179.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="226.7" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.22%)</title><rect x="223.7" y="163.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="226.7" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.22%)</title><rect x="223.7" y="147.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="226.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (2 samples, 0.22%)</title><rect x="223.7" y="131.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.7" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getInt (1 samples, 0.11%)</title><rect x="226.3" y="243.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="229.3" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (1 samples, 0.11%)</title><rect x="226.3" y="227.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="229.3" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (1 samples, 0.11%)</title><rect x="226.3" y="211.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (222 samples, 24.67%)</title><rect x="227.6" y="243.0" width="291.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.6" y="254.0">ru/mail/polis/dao/impl/tables/SSTable.g..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.33%)</title><rect x="234.2" y="227.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.2" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.22%)</title><rect x="235.5" y="211.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="238.5" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.22%)</title><rect x="235.5" y="195.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.5" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (9 samples, 1.00%)</title><rect x="238.1" y="227.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.1" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.22%)</title><rect x="247.3" y="211.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.3" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="248.6" y="195.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.6" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="248.6" y="179.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.6" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.11%)</title><rect x="248.6" y="163.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.6" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (205 samples, 22.78%)</title><rect x="249.9" y="227.0" width="268.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="252.9" y="238.0">sun/nio/ch/FileChannelImpl.read</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (204 samples, 22.67%)</title><rect x="251.2" y="211.0" width="267.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="254.2" y="222.0">sun/nio/ch/FileChannelImpl.readInter..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.11%)</title><rect x="259.1" y="195.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="262.1" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.11%)</title><rect x="259.1" y="179.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.1" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.22%)</title><rect x="260.4" y="195.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.4" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.11%)</title><rect x="261.7" y="179.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="264.7" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.11%)</title><rect x="261.7" y="163.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.7" y="174.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.11%)</title><rect x="261.7" y="147.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="264.7" y="158.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.11%)</title><rect x="261.7" y="131.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.7" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (178 samples, 19.78%)</title><rect x="263.0" y="195.0" width="233.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.0" y="206.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (5 samples, 0.56%)</title><rect x="263.0" y="179.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.0" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.44%)</title><rect x="264.4" y="163.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="267.4" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (149 samples, 16.56%)</title><rect x="269.6" y="179.0" width="195.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="272.6" y="190.0">sun/nio/ch/IOUtil.readInt..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.44%)</title><rect x="269.6" y="163.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="272.6" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.44%)</title><rect x="269.6" y="147.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.6" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.44%)</title><rect x="269.6" y="131.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="272.6" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.22%)</title><rect x="272.2" y="115.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="275.2" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (145 samples, 16.11%)</title><rect x="274.8" y="163.0" width="190.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="277.8" y="174.0">sun/nio/ch/FileDispatcher..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (144 samples, 16.00%)</title><rect x="276.2" y="147.0" width="188.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="279.2" y="158.0">sun/nio/ch/FileDispatche..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.11%)</title><rect x="281.4" y="131.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="284.4" y="142.0"></text>
</g>
<g>
<title>__pread (132 samples, 14.67%)</title><rect x="282.7" y="131.0" width="173.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="285.7" y="142.0">__pread</text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.67%)</title><rect x="455.8" y="131.0" width="7.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="458.8" y="142.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.11%)</title><rect x="463.6" y="131.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="466.6" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (19 samples, 2.11%)</title><rect x="465.0" y="179.0" width="24.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="468.0" y="190.0">s..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.67%)</title><rect x="466.3" y="163.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="469.3" y="174.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.22%)</title><rect x="471.5" y="147.0" width="2.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="474.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (12 samples, 1.33%)</title><rect x="474.1" y="163.0" width="15.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="477.1" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="487.2" y="147.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="490.2" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.11%)</title><rect x="488.6" y="147.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="491.6" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.11%)</title><rect x="488.6" y="131.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="491.6" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (5 samples, 0.56%)</title><rect x="489.9" y="179.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="492.9" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.56%)</title><rect x="489.9" y="163.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="492.9" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (3 samples, 0.33%)</title><rect x="492.5" y="147.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="495.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (17 samples, 1.89%)</title><rect x="496.4" y="195.0" width="22.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="499.4" y="206.0">s..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.11%)</title><rect x="509.5" y="179.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="512.5" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (6 samples, 0.67%)</title><rect x="510.8" y="179.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="513.8" y="190.0"></text>
</g>
<g>
<title>pthread_self (2 samples, 0.22%)</title><rect x="516.1" y="163.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="519.1" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (427 samples, 47.44%)</title><rect x="518.7" y="243.0" width="559.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="521.7" y="254.0">sun/nio/ch/FileChannelImpl.read</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.ensureOpen (1 samples, 0.11%)</title><rect x="518.7" y="227.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="521.7" y="238.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (1 samples, 0.11%)</title><rect x="518.7" y="211.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="521.7" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (426 samples, 47.33%)</title><rect x="520.0" y="227.0" width="558.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="523.0" y="238.0">sun/nio/ch/FileChannelImpl.readInternal</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (32 samples, 3.56%)</title><rect x="526.6" y="211.0" width="41.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="529.6" y="222.0">sun..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (32 samples, 3.56%)</title><rect x="526.6" y="195.0" width="41.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="529.6" y="206.0">jav..</text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.33%)</title><rect x="538.4" y="179.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="541.4" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.11%)</title><rect x="541.0" y="163.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="544.0" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.22%)</title><rect x="542.3" y="179.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="545.3" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (18 samples, 2.00%)</title><rect x="544.9" y="179.0" width="23.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="547.9" y="190.0">j..</text>
</g>
<g>
<title>java/lang/System$2.blockedOn (16 samples, 1.78%)</title><rect x="547.6" y="163.0" width="20.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="550.6" y="174.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (16 samples, 1.78%)</title><rect x="547.6" y="147.0" width="20.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="550.6" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="560.7" y="131.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="563.7" y="142.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.22%)</title><rect x="562.0" y="131.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="565.0" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.11%)</title><rect x="564.6" y="131.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="567.6" y="142.0"></text>
</g>
<g>
<title>unsafe_arraycopy (2 samples, 0.22%)</title><rect x="565.9" y="131.0" width="2.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="568.9" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (346 samples, 38.44%)</title><rect x="568.5" y="211.0" width="453.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="571.5" y="222.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>_complete_monitor_locking_Java (1 samples, 0.11%)</title><rect x="569.8" y="195.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="572.8" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (23 samples, 2.56%)</title><rect x="571.2" y="195.0" width="30.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="574.2" y="206.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (13 samples, 1.44%)</title><rect x="584.3" y="179.0" width="17.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="587.3" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (2 samples, 0.22%)</title><rect x="590.8" y="163.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="593.8" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (6 samples, 0.67%)</title><rect x="593.4" y="163.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="596.4" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (6 samples, 0.67%)</title><rect x="593.4" y="147.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="596.4" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (6 samples, 0.67%)</title><rect x="593.4" y="131.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="596.4" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (1 samples, 0.11%)</title><rect x="600.0" y="115.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="603.0" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (291 samples, 32.33%)</title><rect x="601.3" y="195.0" width="381.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="604.3" y="206.0">sun/nio/ch/IOUtil.readIntoNativeBuffer</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (291 samples, 32.33%)</title><rect x="601.3" y="179.0" width="381.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="604.3" y="190.0">sun/nio/ch/FileDispatcherImpl.pread</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (290 samples, 32.22%)</title><rect x="602.6" y="163.0" width="380.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="605.6" y="174.0">sun/nio/ch/FileDispatcherImpl.pread0</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (3 samples, 0.33%)</title><rect x="621.0" y="147.0" width="3.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="624.0" y="158.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.11%)</title><rect x="623.6" y="131.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="626.6" y="142.0"></text>
</g>
<g>
<title>__pread (253 samples, 28.11%)</title><rect x="624.9" y="147.0" width="331.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="627.9" y="158.0">__pread</text>
</g>
<g>
<title>__pthread_disable_asynccancel (8 samples, 0.89%)</title><rect x="956.6" y="147.0" width="10.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="959.6" y="158.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (8 samples, 0.89%)</title><rect x="967.1" y="147.0" width="10.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="970.1" y="158.0"></text>
</g>
<g>
<title>convertReturnVal (3 samples, 0.33%)</title><rect x="977.6" y="147.0" width="3.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="980.6" y="158.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.11%)</title><rect x="981.5" y="147.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="984.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (21 samples, 2.33%)</title><rect x="982.8" y="195.0" width="27.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="985.8" y="206.0">s..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.67%)</title><rect x="984.2" y="179.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="987.2" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.11%)</title><rect x="988.1" y="163.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="991.1" y="174.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.22%)</title><rect x="989.4" y="163.0" width="2.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="992.4" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.11%)</title><rect x="992.0" y="179.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="995.0" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.11%)</title><rect x="992.0" y="163.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="995.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (13 samples, 1.44%)</title><rect x="993.3" y="179.0" width="17.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="996.3" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.11%)</title><rect x="1006.4" y="163.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1009.4" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (2 samples, 0.22%)</title><rect x="1007.8" y="163.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1010.8" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (9 samples, 1.00%)</title><rect x="1010.4" y="195.0" width="11.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1013.4" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 1.00%)</title><rect x="1010.4" y="179.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1013.4" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="1014.3" y="163.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1017.3" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (3 samples, 0.33%)</title><rect x="1015.6" y="163.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1018.6" y="174.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.22%)</title><rect x="1019.6" y="163.0" width="2.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1022.6" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (41 samples, 4.56%)</title><rect x="1022.2" y="211.0" width="53.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1025.2" y="222.0">sun/n..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.11%)</title><rect x="1058.9" y="195.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.9" y="206.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.11%)</title><rect x="1058.9" y="179.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1061.9" y="190.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.11%)</title><rect x="1058.9" y="163.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1061.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (12 samples, 1.33%)</title><rect x="1060.2" y="195.0" width="15.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1063.2" y="206.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (1 samples, 0.11%)</title><rect x="1074.6" y="179.0" width="1.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1077.6" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (2 samples, 0.22%)</title><rect x="1075.9" y="211.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1078.9" y="222.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.11%)</title><rect x="1075.9" y="195.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.9" y="206.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.11%)</title><rect x="1075.9" y="179.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1078.9" y="190.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.11%)</title><rect x="1075.9" y="163.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.11%)</title><rect x="1077.2" y="195.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1080.2" y="206.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.11%)</title><rect x="1077.2" y="179.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1080.2" y="190.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.11%)</title><rect x="1077.2" y="163.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1080.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (20 samples, 2.22%)</title><rect x="1078.6" y="371.0" width="26.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1081.6" y="382.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (20 samples, 2.22%)</title><rect x="1078.6" y="355.0" width="26.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1081.6" y="366.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (20 samples, 2.22%)</title><rect x="1078.6" y="339.0" width="26.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1081.6" y="350.0">c..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (20 samples, 2.22%)</title><rect x="1078.6" y="323.0" width="26.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1081.6" y="334.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (20 samples, 2.22%)</title><rect x="1078.6" y="307.0" width="26.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1081.6" y="318.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (20 samples, 2.22%)</title><rect x="1078.6" y="291.0" width="26.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1081.6" y="302.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (20 samples, 2.22%)</title><rect x="1078.6" y="275.0" width="26.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1081.6" y="286.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (20 samples, 2.22%)</title><rect x="1078.6" y="259.0" width="26.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1081.6" y="270.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (19 samples, 2.11%)</title><rect x="1079.9" y="243.0" width="24.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1082.9" y="254.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (17 samples, 1.89%)</title><rect x="1079.9" y="227.0" width="22.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1082.9" y="238.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (17 samples, 1.89%)</title><rect x="1079.9" y="211.0" width="22.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1082.9" y="222.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (17 samples, 1.89%)</title><rect x="1079.9" y="195.0" width="22.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1082.9" y="206.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (17 samples, 1.89%)</title><rect x="1079.9" y="179.0" width="22.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1082.9" y="190.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (4 samples, 0.44%)</title><rect x="1079.9" y="163.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1082.9" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.11%)</title><rect x="1079.9" y="147.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1082.9" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (3 samples, 0.33%)</title><rect x="1081.2" y="147.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1084.2" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (3 samples, 0.33%)</title><rect x="1081.2" y="131.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1084.2" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.22%)</title><rect x="1081.2" y="115.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1084.2" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.11%)</title><rect x="1081.2" y="99.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1084.2" y="110.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.11%)</title><rect x="1081.2" y="83.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1084.2" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.11%)</title><rect x="1082.5" y="99.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1085.5" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (1 samples, 0.11%)</title><rect x="1082.5" y="83.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1085.5" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.11%)</title><rect x="1082.5" y="67.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1085.5" y="78.0"></text>
</g>
<g>
<title>__pread (1 samples, 0.11%)</title><rect x="1082.5" y="51.0" width="1.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1085.5" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.11%)</title><rect x="1083.8" y="115.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1086.8" y="126.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.11%)</title><rect x="1083.8" y="99.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1086.8" y="110.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.11%)</title><rect x="1083.8" y="83.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1086.8" y="94.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.11%)</title><rect x="1083.8" y="67.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1086.8" y="78.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.11%)</title><rect x="1083.8" y="51.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1086.8" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (13 samples, 1.44%)</title><rect x="1085.1" y="163.0" width="17.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1088.1" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (13 samples, 1.44%)</title><rect x="1085.1" y="147.0" width="17.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1088.1" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.22%)</title><rect x="1085.1" y="131.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1088.1" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.22%)</title><rect x="1085.1" y="115.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1088.1" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.22%)</title><rect x="1085.1" y="99.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1088.1" y="110.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.11%)</title><rect x="1086.4" y="83.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1089.4" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (9 samples, 1.00%)</title><rect x="1087.7" y="131.0" width="11.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1090.7" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (8 samples, 0.89%)</title><rect x="1087.7" y="115.0" width="10.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1090.7" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (8 samples, 0.89%)</title><rect x="1087.7" y="99.0" width="10.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1090.7" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (8 samples, 0.89%)</title><rect x="1087.7" y="83.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1090.7" y="94.0"></text>
</g>
<g>
<title>__pread (8 samples, 0.89%)</title><rect x="1087.7" y="67.0" width="10.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1090.7" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.11%)</title><rect x="1098.2" y="115.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1101.2" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="1098.2" y="99.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1101.2" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.11%)</title><rect x="1098.2" y="83.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1101.2" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.22%)</title><rect x="1099.5" y="131.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1102.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.22%)</title><rect x="1099.5" y="115.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1102.5" y="126.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.22%)</title><rect x="1102.2" y="227.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1105.2" y="238.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.22%)</title><rect x="1102.2" y="211.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1105.2" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (2 samples, 0.22%)</title><rect x="1102.2" y="195.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1105.2" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (2 samples, 0.22%)</title><rect x="1102.2" y="179.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1105.2" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.11%)</title><rect x="1102.2" y="163.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1105.2" y="174.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.11%)</title><rect x="1102.2" y="147.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1105.2" y="158.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.11%)</title><rect x="1102.2" y="131.0" width="1.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1105.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (1 samples, 0.11%)</title><rect x="1103.5" y="163.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1106.5" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.11%)</title><rect x="1103.5" y="147.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1106.5" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1103.5" y="131.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1106.5" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1103.5" y="115.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1106.5" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1103.5" y="99.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1106.5" y="110.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1103.5" y="83.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1106.5" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.11%)</title><rect x="1103.5" y="67.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1106.5" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.iterator (14 samples, 1.56%)</title><rect x="1104.8" y="387.0" width="18.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1107.8" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (1 samples, 0.11%)</title><rect x="1104.8" y="371.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1107.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (12 samples, 1.33%)</title><rect x="1106.1" y="371.0" width="15.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1109.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (12 samples, 1.33%)</title><rect x="1106.1" y="355.0" width="15.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1109.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (12 samples, 1.33%)</title><rect x="1106.1" y="339.0" width="15.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1109.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (1 samples, 0.11%)</title><rect x="1106.1" y="323.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1109.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (1 samples, 0.11%)</title><rect x="1106.1" y="307.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1109.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.11%)</title><rect x="1106.1" y="291.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1109.1" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.11%)</title><rect x="1106.1" y="275.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1109.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (11 samples, 1.22%)</title><rect x="1107.4" y="323.0" width="14.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1110.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (11 samples, 1.22%)</title><rect x="1107.4" y="307.0" width="14.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1110.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (11 samples, 1.22%)</title><rect x="1107.4" y="291.0" width="14.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1110.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (5 samples, 0.56%)</title><rect x="1115.3" y="275.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1118.3" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.44%)</title><rect x="1116.6" y="259.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1119.6" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.11%)</title><rect x="1120.5" y="243.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1123.5" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.11%)</title><rect x="1120.5" y="227.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1123.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (1 samples, 0.11%)</title><rect x="1121.8" y="371.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1124.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (1 samples, 0.11%)</title><rect x="1121.8" y="355.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1124.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (1 samples, 0.11%)</title><rect x="1121.8" y="339.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1124.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1121.8" y="323.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1124.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.11%)</title><rect x="1121.8" y="307.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1124.8" y="318.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (51 samples, 5.67%)</title><rect x="1123.1" y="531.0" width="66.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1126.1" y="542.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.11%)</title><rect x="1123.1" y="515.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1126.1" y="526.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.11%)</title><rect x="1123.1" y="499.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1126.1" y="510.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (12 samples, 1.33%)</title><rect x="1124.4" y="515.0" width="15.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1127.4" y="526.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1125.8" y="499.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1128.8" y="510.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (10 samples, 1.11%)</title><rect x="1127.1" y="499.0" width="13.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1130.1" y="510.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.22%)</title><rect x="1127.1" y="483.0" width="2.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1130.1" y="494.0"></text>
</g>
<g>
<title>epoll_wait (8 samples, 0.89%)</title><rect x="1129.7" y="483.0" width="10.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1132.7" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (38 samples, 4.22%)</title><rect x="1140.2" y="515.0" width="49.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1143.2" y="526.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (34 samples, 3.78%)</title><rect x="1142.8" y="499.0" width="44.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1145.8" y="510.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (24 samples, 2.67%)</title><rect x="1142.8" y="483.0" width="31.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1145.8" y="494.0">on..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="1146.7" y="467.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1149.7" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (15 samples, 1.67%)</title><rect x="1148.0" y="467.0" width="19.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1151.0" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (14 samples, 1.56%)</title><rect x="1149.4" y="451.0" width="18.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1152.4" y="462.0"></text>
</g>
<g>
<title>RequestHandler1_response.handleRequest (13 samples, 1.44%)</title><rect x="1149.4" y="435.0" width="17.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1152.4" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (2 samples, 0.22%)</title><rect x="1149.4" y="419.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1152.4" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.22%)</title><rect x="1149.4" y="403.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1152.4" y="414.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.11%)</title><rect x="1150.7" y="387.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1153.7" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.11%)</title><rect x="1150.7" y="371.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1153.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.11%)</title><rect x="1150.7" y="355.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1153.7" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.11%)</title><rect x="1150.7" y="339.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1153.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (11 samples, 1.22%)</title><rect x="1152.0" y="419.0" width="14.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1155.0" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.11%)</title><rect x="1152.0" y="403.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1155.0" y="414.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.11%)</title><rect x="1152.0" y="387.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1155.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.get (10 samples, 1.11%)</title><rect x="1153.3" y="403.0" width="13.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1156.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (10 samples, 1.11%)</title><rect x="1153.3" y="387.0" width="13.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1156.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (10 samples, 1.11%)</title><rect x="1153.3" y="371.0" width="13.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1156.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (2 samples, 0.22%)</title><rect x="1153.3" y="355.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1156.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.11%)</title><rect x="1154.6" y="339.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1157.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.11%)</title><rect x="1154.6" y="323.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1157.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.11%)</title><rect x="1154.6" y="307.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1157.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.11%)</title><rect x="1154.6" y="291.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1157.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.22%)</title><rect x="1155.9" y="355.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1158.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.22%)</title><rect x="1155.9" y="339.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1158.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.22%)</title><rect x="1155.9" y="323.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1158.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.22%)</title><rect x="1155.9" y="307.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1158.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.11%)</title><rect x="1157.2" y="291.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1160.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.67%)</title><rect x="1158.5" y="355.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1161.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.67%)</title><rect x="1158.5" y="339.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1161.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.67%)</title><rect x="1158.5" y="323.0" width="7.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1161.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.67%)</title><rect x="1158.5" y="307.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1161.5" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.67%)</title><rect x="1158.5" y="291.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1161.5" y="302.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.11%)</title><rect x="1158.5" y="275.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.5" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.33%)</title><rect x="1159.8" y="275.0" width="4.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1162.8" y="286.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.22%)</title><rect x="1159.8" y="259.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.8" y="270.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.11%)</title><rect x="1162.5" y="259.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.5" y="270.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.22%)</title><rect x="1163.8" y="275.0" width="2.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1166.8" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.11%)</title><rect x="1166.4" y="435.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1169.4" y="446.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.11%)</title><rect x="1166.4" y="419.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1169.4" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.11%)</title><rect x="1166.4" y="403.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1169.4" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.11%)</title><rect x="1166.4" y="387.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1169.4" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="1166.4" y="371.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.4" y="382.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.11%)</title><rect x="1166.4" y="355.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.4" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.11%)</title><rect x="1166.4" y="339.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.4" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="1166.4" y="323.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.4" y="334.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="1166.4" y="307.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.4" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="1166.4" y="291.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.4" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.11%)</title><rect x="1166.4" y="275.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.4" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.44%)</title><rect x="1167.7" y="467.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1170.7" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.33%)</title><rect x="1167.7" y="451.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1170.7" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="1167.7" y="435.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.7" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.11%)</title><rect x="1167.7" y="419.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.7" y="430.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.22%)</title><rect x="1169.0" y="435.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1172.0" y="446.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.22%)</title><rect x="1169.0" y="419.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1172.0" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.11%)</title><rect x="1170.3" y="403.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1173.3" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.11%)</title><rect x="1171.6" y="451.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1174.6" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.11%)</title><rect x="1171.6" y="435.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1174.6" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.11%)</title><rect x="1173.0" y="467.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1176.0" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.11%)</title><rect x="1173.0" y="451.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1176.0" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1173.0" y="435.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1176.0" y="446.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1173.0" y="419.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1176.0" y="430.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.11%)</title><rect x="1173.0" y="403.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1176.0" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="1173.0" y="387.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.0" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (10 samples, 1.11%)</title><rect x="1174.3" y="483.0" width="13.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1177.3" y="494.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (10 samples, 1.11%)</title><rect x="1174.3" y="467.0" width="13.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1177.3" y="478.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (7 samples, 0.78%)</title><rect x="1175.6" y="451.0" width="9.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1178.6" y="462.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.11%)</title><rect x="1176.9" y="435.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.9" y="446.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.44%)</title><rect x="1178.2" y="435.0" width="5.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1181.2" y="446.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.22%)</title><rect x="1180.8" y="419.0" width="2.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1183.8" y="430.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.11%)</title><rect x="1183.4" y="435.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.4" y="446.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.11%)</title><rect x="1184.8" y="451.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1187.8" y="462.0"></text>
</g>
<g>
<title>__recv (1 samples, 0.11%)</title><rect x="1186.1" y="451.0" width="1.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1189.1" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.22%)</title><rect x="1187.4" y="499.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.4" y="510.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.22%)</title><rect x="1187.4" y="483.0" width="2.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1190.4" y="494.0"></text>
</g>
</g>
</svg>
