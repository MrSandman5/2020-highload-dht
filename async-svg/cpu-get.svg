<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="741"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="741"> </text>
<g id="frames">
<g>
<title>all (4,135 samples, 100.00%)</title><rect x="10.0" y="707.0" width="1180.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.0" y="718.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (28 samples, 0.68%)</title><rect x="10.0" y="691.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (28 samples, 0.68%)</title><rect x="10.0" y="675.0" width="8.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (28 samples, 0.68%)</title><rect x="10.0" y="659.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.05%)</title><rect x="10.0" y="643.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (22 samples, 0.53%)</title><rect x="10.6" y="643.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.6" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (8 samples, 0.19%)</title><rect x="14.6" y="627.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.6" y="638.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.02%)</title><rect x="16.8" y="643.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="19.8" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.02%)</title><rect x="17.1" y="643.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="20.1" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="17.4" y="643.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="20.4" y="654.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.02%)</title><rect x="17.7" y="643.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="20.7" y="654.0"></text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.02%)</title><rect x="18.0" y="691.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="21.0" y="702.0"></text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.10%)</title><rect x="18.3" y="691.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="21.3" y="702.0"></text>
</g>
<g>
<title>G1BarrierSet::invalidate(MemRegion) (1 samples, 0.02%)</title><rect x="18.3" y="675.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="21.3" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="18.6" y="675.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="21.6" y="686.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (1 samples, 0.02%)</title><rect x="18.6" y="659.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="21.6" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.05%)</title><rect x="18.8" y="675.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="21.8" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.05%)</title><rect x="18.8" y="659.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="21.8" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.05%)</title><rect x="18.8" y="643.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="21.8" y="654.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.05%)</title><rect x="18.8" y="627.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="21.8" y="638.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.02%)</title><rect x="18.8" y="611.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="21.8" y="622.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.02%)</title><rect x="19.1" y="611.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="22.1" y="622.0"></text>
</g>
<g>
<title>[unknown_Java] (12 samples, 0.29%)</title><rect x="19.4" y="691.0" width="3.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="22.4" y="702.0"></text>
</g>
<g>
<title>G1BarrierSetRuntime::write_ref_array_post_entry(HeapWord*, unsigned long) (1 samples, 0.02%)</title><rect x="19.4" y="675.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="22.4" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.05%)</title><rect x="19.7" y="675.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="22.7" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (2 samples, 0.05%)</title><rect x="19.7" y="659.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="22.7" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.17%)</title><rect x="20.3" y="675.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="23.3" y="686.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (6 samples, 0.15%)</title><rect x="20.3" y="659.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="23.3" y="670.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.02%)</title><rect x="22.0" y="659.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="25.0" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.02%)</title><rect x="22.3" y="675.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="25.3" y="686.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="22.3" y="659.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="25.3" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.02%)</title><rect x="22.6" y="675.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="25.6" y="686.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,622 samples, 87.59%)</title><rect x="22.8" y="691.0" width="1033.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.8" y="702.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,622 samples, 87.59%)</title><rect x="22.8" y="675.0" width="1033.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.8" y="686.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,622 samples, 87.59%)</title><rect x="22.8" y="659.0" width="1033.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.8" y="670.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="24.0" y="643.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="27.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (3,161 samples, 76.44%)</title><rect x="24.3" y="643.0" width="902.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.3" y="654.0">java/util/concurrent/CompletableFuture$AsyncSupply.run</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (176 samples, 4.26%)</title><rect x="24.6" y="627.0" width="50.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.6" y="638.0">java/..</text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="24.8" y="611.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="27.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (149 samples, 3.60%)</title><rect x="25.1" y="611.0" width="42.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.1" y="622.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeRelay (1 samples, 0.02%)</title><rect x="25.1" y="595.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.encodeRelay (1 samples, 0.02%)</title><rect x="25.1" y="579.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.1" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$161/701954098.apply (148 samples, 3.58%)</title><rect x="25.4" y="595.0" width="42.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.4" y="606.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$2 (147 samples, 3.56%)</title><rect x="25.7" y="579.0" width="41.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.7" y="590.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsyncImpl (147 samples, 3.56%)</title><rect x="25.7" y="563.0" width="41.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.7" y="574.0">jdk..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (2 samples, 0.05%)</title><rect x="26.0" y="547.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (2 samples, 0.05%)</title><rect x="26.0" y="531.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (1 samples, 0.02%)</title><rect x="26.0" y="515.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.02%)</title><rect x="26.3" y="515.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="29.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (2 samples, 0.05%)</title><rect x="26.6" y="547.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="29.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (2 samples, 0.05%)</title><rect x="26.6" y="531.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="29.6" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="26.8" y="515.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="29.8" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="26.8" y="499.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="29.8" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="26.8" y="483.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="29.8" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="26.8" y="467.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="29.8" y="478.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="26.8" y="451.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="29.8" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="26.8" y="435.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="29.8" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsync (127 samples, 3.07%)</title><rect x="27.1" y="547.0" width="36.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.1" y="558.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsyncImpl (127 samples, 3.07%)</title><rect x="27.1" y="531.0" width="36.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.1" y="542.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsyncImpl0 (127 samples, 3.07%)</title><rect x="27.1" y="515.0" width="36.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="30.1" y="526.0">jdk..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (70 samples, 1.69%)</title><rect x="27.1" y="499.0" width="20.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (70 samples, 1.69%)</title><rect x="27.1" y="483.0" width="20.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (69 samples, 1.67%)</title><rect x="27.1" y="467.0" width="19.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.1" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$280/1794368300.apply (69 samples, 1.67%)</title><rect x="27.1" y="451.0" width="19.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.1" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$9 (69 samples, 1.67%)</title><rect x="27.1" y="435.0" width="19.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.1" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (69 samples, 1.67%)</title><rect x="27.1" y="419.0" width="19.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.1" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$204/1335605778.apply (69 samples, 1.67%)</title><rect x="27.1" y="403.0" width="19.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="30.1" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$8 (69 samples, 1.67%)</title><rect x="27.1" y="387.0" width="19.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="30.1" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendHeadersAsync (69 samples, 1.67%)</title><rect x="27.1" y="371.0" width="19.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="30.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (56 samples, 1.35%)</title><rect x="27.1" y="355.0" width="16.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="30.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (56 samples, 1.35%)</title><rect x="27.1" y="339.0" width="16.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="30.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.02%)</title><rect x="27.1" y="323.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.1" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$310/618589503.apply (1 samples, 0.02%)</title><rect x="27.1" y="307.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.1" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$308/596850472.apply (55 samples, 1.33%)</title><rect x="27.4" y="323.0" width="15.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.4" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.lambda$sendHeadersAsync$4 (55 samples, 1.33%)</title><rect x="27.4" y="307.0" width="15.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="30.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.02%)</title><rect x="27.4" y="291.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="30.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.02%)</title><rect x="27.4" y="275.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.&lt;init&gt; (1 samples, 0.02%)</title><rect x="27.4" y="259.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.&lt;init&gt; (1 samples, 0.02%)</title><rect x="27.4" y="243.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="30.4" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (1 samples, 0.02%)</title><rect x="27.7" y="291.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.7" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (1 samples, 0.02%)</title><rect x="27.7" y="275.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.add (1 samples, 0.02%)</title><rect x="27.7" y="259.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="30.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.offerLast (1 samples, 0.02%)</title><rect x="27.7" y="243.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="30.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.linkLast (1 samples, 0.02%)</title><rect x="27.7" y="227.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.7" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.02%)</title><rect x="27.7" y="211.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.7" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.02%)</title><rect x="27.7" y="195.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="30.7" y="206.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.connectFlows (11 samples, 0.27%)</title><rect x="28.0" y="291.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.0" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.connectFlows (10 samples, 0.24%)</title><rect x="28.3" y="275.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.3" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher.subscribe (4 samples, 0.10%)</title><rect x="28.3" y="259.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="31.3" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onSubscribe (2 samples, 0.05%)</title><rect x="28.8" y="243.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.8" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onSubscribe (2 samples, 0.05%)</title><rect x="28.8" y="227.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="31.8" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (1 samples, 0.02%)</title><rect x="28.8" y="211.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.8" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (1 samples, 0.02%)</title><rect x="28.8" y="195.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.8" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (1 samples, 0.02%)</title><rect x="28.8" y="179.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.8" y="190.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.dropSubscription (1 samples, 0.02%)</title><rect x="29.1" y="211.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="32.1" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.subscribe (6 samples, 0.15%)</title><rect x="29.4" y="259.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="32.4" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher.subscribe (6 samples, 0.15%)</title><rect x="29.4" y="243.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.4" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalSubscribe (5 samples, 0.12%)</title><rect x="29.4" y="227.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="32.4" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (5 samples, 0.12%)</title><rect x="29.4" y="211.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.4" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (5 samples, 0.12%)</title><rect x="29.4" y="195.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.4" y="206.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="29.7" y="179.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="32.7" y="190.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.02%)</title><rect x="29.7" y="163.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="32.7" y="174.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.02%)</title><rect x="29.7" y="147.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="32.7" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (3 samples, 0.07%)</title><rect x="30.0" y="179.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="33.0" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (3 samples, 0.07%)</title><rect x="30.0" y="163.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.0" y="174.0"></text>
</g>
<g>
<title>__libc_write (2 samples, 0.05%)</title><rect x="30.3" y="147.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="33.3" y="158.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.signalOnSubscribe (1 samples, 0.02%)</title><rect x="30.8" y="227.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.8" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onSubscribe (1 samples, 0.02%)</title><rect x="30.8" y="211.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.8" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="30.8" y="195.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.8" y="206.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.headers (42 samples, 1.02%)</title><rect x="31.1" y="291.0" width="12.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.1" y="302.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.02%)</title><rect x="31.4" y="275.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.4" y="286.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.02%)</title><rect x="31.4" y="259.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.4" y="270.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.02%)</title><rect x="31.4" y="243.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.4" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectHeaders0 (31 samples, 0.75%)</title><rect x="31.7" y="275.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="34.7" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectCookies (2 samples, 0.05%)</title><rect x="31.7" y="259.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="34.7" y="270.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (2 samples, 0.05%)</title><rect x="31.7" y="243.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.7" y="254.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.05%)</title><rect x="31.7" y="227.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.7" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (2 samples, 0.05%)</title><rect x="31.7" y="211.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="34.7" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (2 samples, 0.05%)</title><rect x="31.7" y="195.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.7" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (2 samples, 0.05%)</title><rect x="31.7" y="179.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="34.7" y="190.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectHeaders1 (15 samples, 0.36%)</title><rect x="32.3" y="259.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.3" y="270.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.05%)</title><rect x="34.3" y="243.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="37.3" y="254.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.05%)</title><rect x="34.3" y="227.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.3" y="238.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.05%)</title><rect x="34.3" y="211.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="37.3" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="34.5" y="195.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="37.5" y="206.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate$$Lambda$350/198188022.test (5 samples, 0.12%)</title><rect x="34.8" y="243.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.8" y="254.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate.lambda$and$0 (5 samples, 0.12%)</title><rect x="34.8" y="227.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="37.8" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$86/1605851606.test (5 samples, 0.12%)</title><rect x="34.8" y="211.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.8" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$10 (5 samples, 0.12%)</title><rect x="34.8" y="195.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.8" y="206.0"></text>
</g>
<g>
<title>java/util/function/Predicate$$Lambda$75/253601149.test (5 samples, 0.12%)</title><rect x="34.8" y="179.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="37.8" y="190.0"></text>
</g>
<g>
<title>java/util/function/Predicate.lambda$negate$1 (5 samples, 0.12%)</title><rect x="34.8" y="163.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="37.8" y="174.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$74/403170294.test (5 samples, 0.12%)</title><rect x="34.8" y="147.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="37.8" y="158.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$3 (5 samples, 0.12%)</title><rect x="34.8" y="131.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.8" y="142.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (5 samples, 0.12%)</title><rect x="34.8" y="115.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="37.8" y="126.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.12%)</title><rect x="34.8" y="99.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="37.8" y="110.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.12%)</title><rect x="34.8" y="83.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="37.8" y="94.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.10%)</title><rect x="34.8" y="67.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="37.8" y="78.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.10%)</title><rect x="34.8" y="51.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="37.8" y="62.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.02%)</title><rect x="35.1" y="35.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="38.1" y="46.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.05%)</title><rect x="35.4" y="35.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.4" y="46.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.02%)</title><rect x="36.0" y="67.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="39.0" y="78.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.02%)</title><rect x="36.0" y="51.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="39.0" y="62.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="36.3" y="243.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="39.3" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.build (14 samples, 0.34%)</title><rect x="36.5" y="259.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="39.5" y="270.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (14 samples, 0.34%)</title><rect x="36.5" y="243.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="39.5" y="254.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (12 samples, 0.29%)</title><rect x="37.1" y="227.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="40.1" y="238.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="37.4" y="211.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="40.4" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (10 samples, 0.24%)</title><rect x="37.7" y="211.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.7" y="222.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$131/176766706.accept (7 samples, 0.17%)</title><rect x="37.7" y="195.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.7" y="206.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (7 samples, 0.17%)</title><rect x="37.7" y="179.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.7" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (3 samples, 0.07%)</title><rect x="38.3" y="163.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.3" y="174.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$141/1026326437.accept (2 samples, 0.05%)</title><rect x="38.5" y="147.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.5" y="158.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (2 samples, 0.05%)</title><rect x="38.5" y="131.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.5" y="142.0"></text>
</g>
<g>
<title>java/lang/String.trim (2 samples, 0.05%)</title><rect x="38.5" y="115.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.5" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (2 samples, 0.05%)</title><rect x="38.5" y="99.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.5" y="110.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="38.5" y="83.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="41.5" y="94.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (2 samples, 0.05%)</title><rect x="39.1" y="163.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.1" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.02%)</title><rect x="39.4" y="147.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="42.4" y="158.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (1 samples, 0.02%)</title><rect x="39.7" y="195.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.7" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (2 samples, 0.05%)</title><rect x="40.0" y="195.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.0" y="206.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$131/176766706.accept (2 samples, 0.05%)</title><rect x="40.0" y="179.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="43.0" y="190.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.hostString (1 samples, 0.02%)</title><rect x="40.5" y="275.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="43.5" y="286.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.02%)</title><rect x="40.5" y="259.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="43.5" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.requestURI (3 samples, 0.07%)</title><rect x="40.8" y="275.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="43.8" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.getPathAndQuery (3 samples, 0.07%)</title><rect x="40.8" y="259.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.8" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.encode (3 samples, 0.07%)</title><rect x="40.8" y="243.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="43.8" y="254.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="40.8" y="227.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="43.8" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="41.1" y="227.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="44.1" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.setHeader (5 samples, 0.12%)</title><rect x="41.7" y="275.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.7" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="41.7" y="259.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.7" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="41.7" y="243.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="44.7" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="41.7" y="227.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="44.7" y="238.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="41.7" y="211.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="44.7" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (1 samples, 0.02%)</title><rect x="41.7" y="195.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.7" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (4 samples, 0.10%)</title><rect x="42.0" y="259.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.0" y="270.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.05%)</title><rect x="42.0" y="243.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="45.0" y="254.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.05%)</title><rect x="42.0" y="227.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="45.0" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (2 samples, 0.05%)</title><rect x="42.0" y="211.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.0" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.02%)</title><rect x="42.5" y="243.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.5" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.02%)</title><rect x="42.8" y="243.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="45.8" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.&lt;init&gt; (12 samples, 0.29%)</title><rect x="43.1" y="355.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="46.1" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="43.7" y="339.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="46.7" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="43.7" y="323.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="46.7" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$285/2098894801.get$Lambda (1 samples, 0.02%)</title><rect x="43.7" y="307.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="46.7" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$285/2098894801.&lt;init&gt; (1 samples, 0.02%)</title><rect x="43.7" y="291.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="46.7" y="302.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="43.7" y="275.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="46.7" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.subscribe (5 samples, 0.12%)</title><rect x="44.0" y="339.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.0" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (5 samples, 0.12%)</title><rect x="44.0" y="323.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.0" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (5 samples, 0.12%)</title><rect x="44.0" y="307.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.0" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (5 samples, 0.12%)</title><rect x="44.0" y="291.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.0" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (5 samples, 0.12%)</title><rect x="44.0" y="275.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.0" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (3 samples, 0.07%)</title><rect x="44.0" y="259.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="47.0" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$270/1387273586.run (3 samples, 0.07%)</title><rect x="44.0" y="243.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.0" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (3 samples, 0.07%)</title><rect x="44.0" y="227.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="47.0" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.checkForErrors (2 samples, 0.05%)</title><rect x="44.0" y="211.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="47.0" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.checkRequestMore (2 samples, 0.05%)</title><rect x="44.0" y="195.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="47.0" y="206.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (1 samples, 0.02%)</title><rect x="44.5" y="211.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="47.5" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onSubscribe (1 samples, 0.02%)</title><rect x="44.5" y="195.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="47.5" y="206.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.onSubscribe (1 samples, 0.02%)</title><rect x="44.5" y="179.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.5" y="190.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onSubscribe (1 samples, 0.02%)</title><rect x="44.5" y="163.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="47.5" y="174.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$NullSubscriber.onSubscribe (1 samples, 0.02%)</title><rect x="44.5" y="147.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.5" y="158.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1AsyncDelegateSubscription.request (1 samples, 0.02%)</title><rect x="44.5" y="131.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.5" y="142.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (2 samples, 0.05%)</title><rect x="44.8" y="259.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.8" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (2 samples, 0.05%)</title><rect x="44.8" y="243.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="47.8" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (2 samples, 0.05%)</title><rect x="44.8" y="227.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="47.8" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$270/1387273586.run (2 samples, 0.05%)</title><rect x="44.8" y="211.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.8" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (1 samples, 0.02%)</title><rect x="45.1" y="195.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="48.1" y="206.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (1 samples, 0.02%)</title><rect x="45.1" y="179.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="48.1" y="190.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onSubscribe (1 samples, 0.02%)</title><rect x="45.1" y="163.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.1" y="174.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.onSubscribe (1 samples, 0.02%)</title><rect x="45.1" y="147.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.1" y="158.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onSubscribe (1 samples, 0.02%)</title><rect x="45.1" y="131.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="48.1" y="142.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$NullSubscriber.onSubscribe (1 samples, 0.02%)</title><rect x="45.1" y="115.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="48.1" y="126.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1AsyncDelegateSubscription.request (1 samples, 0.02%)</title><rect x="45.1" y="99.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="48.1" y="110.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.&lt;init&gt; (3 samples, 0.07%)</title><rect x="45.4" y="339.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="48.4" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.getDebugLogger (1 samples, 0.02%)</title><rect x="46.2" y="339.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="49.2" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.getDebugLogger (1 samples, 0.02%)</title><rect x="46.2" y="323.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.2" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/DebugLogger.createHttpLogger (1 samples, 0.02%)</title><rect x="46.2" y="307.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.2" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/DebugLogger.levelEnabledFor (1 samples, 0.02%)</title><rect x="46.2" y="291.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="49.2" y="302.0"></text>
</g>
<g>
<title>sun/util/logging/internal/LoggingProviderImpl$JULWrapper.isLoggable (1 samples, 0.02%)</title><rect x="46.2" y="275.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.2" y="286.0"></text>
</g>
<g>
<title>sun/util/logging/internal/LoggingProviderImpl$JULWrapper.toJUL (1 samples, 0.02%)</title><rect x="46.2" y="259.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.2" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PlainHttpConnection.connectAsync (1 samples, 0.02%)</title><rect x="46.5" y="355.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.5" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerTimer (1 samples, 0.02%)</title><rect x="46.5" y="339.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="49.5" y="350.0"></text>
</g>
<g>
<title>java/util/TreeSet.add (1 samples, 0.02%)</title><rect x="46.5" y="323.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="49.5" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.02%)</title><rect x="46.8" y="467.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="49.8" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.02%)</title><rect x="46.8" y="451.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.8" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.&lt;init&gt; (1 samples, 0.02%)</title><rect x="46.8" y="435.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="49.8" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.establishExchange (57 samples, 1.38%)</title><rect x="47.1" y="499.0" width="16.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.02%)</title><rect x="47.1" y="483.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.02%)</title><rect x="47.1" y="467.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.&lt;init&gt; (1 samples, 0.02%)</title><rect x="47.1" y="451.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.&lt;init&gt; (1 samples, 0.02%)</title><rect x="47.1" y="435.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.1" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$274/776394132.accept (1 samples, 0.02%)</title><rect x="47.1" y="419.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.1" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.get (56 samples, 1.35%)</title><rect x="47.4" y="483.0" width="16.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.4" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.createHttp1Exchange (56 samples, 1.35%)</title><rect x="47.4" y="467.0" width="16.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="50.4" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.&lt;init&gt; (55 samples, 1.33%)</title><rect x="47.4" y="451.0" width="15.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.4" y="462.0"></text>
</g>
<g>
<title>java/util/LinkedList.add (1 samples, 0.02%)</title><rect x="47.4" y="435.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.4" y="446.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkLast (1 samples, 0.02%)</title><rect x="47.4" y="419.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.&lt;init&gt; (1 samples, 0.02%)</title><rect x="47.7" y="435.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque$Node.&lt;init&gt; (1 samples, 0.02%)</title><rect x="47.7" y="419.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="50.7" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.&lt;init&gt; (2 samples, 0.05%)</title><rect x="48.0" y="435.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="51.0" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.&lt;init&gt; (1 samples, 0.02%)</title><rect x="48.5" y="435.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.5" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher.&lt;init&gt; (4 samples, 0.10%)</title><rect x="48.8" y="435.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.8" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="49.4" y="419.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="52.4" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="49.4" y="403.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="52.4" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$$Lambda$214/182580392.get$Lambda (1 samples, 0.02%)</title><rect x="49.4" y="387.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="52.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque$Node.&lt;init&gt; (1 samples, 0.02%)</title><rect x="49.7" y="419.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="52.7" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.getConnection (19 samples, 0.46%)</title><rect x="50.0" y="435.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="53.0" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.getConnection (18 samples, 0.44%)</title><rect x="50.0" y="419.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="53.0" y="430.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.10%)</title><rect x="50.2" y="403.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="53.2" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.10%)</title><rect x="50.2" y="387.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="53.2" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.10%)</title><rect x="50.2" y="371.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="53.2" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.findConnection (13 samples, 0.31%)</title><rect x="51.4" y="403.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="54.4" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.10%)</title><rect x="51.9" y="387.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="54.9" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.05%)</title><rect x="51.9" y="371.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.9" y="382.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.hashCode (1 samples, 0.02%)</title><rect x="52.2" y="355.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="55.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.05%)</title><rect x="52.5" y="371.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="55.5" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CacheKey.hashCode (2 samples, 0.05%)</title><rect x="52.5" y="355.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="55.5" y="366.0"></text>
</g>
<g>
<title>java/util/Objects.hash (2 samples, 0.05%)</title><rect x="52.5" y="339.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="55.5" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.hashCode (2 samples, 0.05%)</title><rect x="52.5" y="323.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="55.5" y="334.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.hashCode (1 samples, 0.02%)</title><rect x="52.8" y="307.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.8" y="318.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress$InetSocketAddressHolder.hashCode (1 samples, 0.02%)</title><rect x="52.8" y="291.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.8" y="302.0"></text>
</g>
<g>
<title>java/net/Inet4Address.hashCode (1 samples, 0.02%)</title><rect x="52.8" y="275.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="55.8" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.remove (7 samples, 0.17%)</title><rect x="53.1" y="387.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="56.1" y="398.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (7 samples, 0.17%)</title><rect x="53.1" y="371.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="56.1" y="382.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (7 samples, 0.17%)</title><rect x="53.1" y="355.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.1" y="366.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.&lt;init&gt; (7 samples, 0.17%)</title><rect x="53.1" y="339.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="56.1" y="350.0"></text>
</g>
<g>
<title>java/util/LinkedList.node (7 samples, 0.17%)</title><rect x="53.1" y="323.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.1" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.getPlainConnection (1 samples, 0.02%)</title><rect x="55.1" y="419.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="58.1" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PlainHttpConnection.&lt;init&gt; (1 samples, 0.02%)</title><rect x="55.1" y="403.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.1" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.open (1 samples, 0.02%)</title><rect x="55.1" y="387.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.1" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.getAddress (26 samples, 0.63%)</title><rect x="55.4" y="435.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="58.4" y="446.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (26 samples, 0.63%)</title><rect x="55.4" y="419.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="58.4" y="430.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (21 samples, 0.51%)</title><rect x="55.7" y="403.0" width="6.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="58.7" y="414.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.02%)</title><rect x="55.9" y="387.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="58.9" y="398.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.02%)</title><rect x="56.2" y="387.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="59.2" y="398.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (8 samples, 0.19%)</title><rect x="56.5" y="387.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="59.5" y="398.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.02%)</title><rect x="57.1" y="371.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="60.1" y="382.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.02%)</title><rect x="57.4" y="371.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="60.4" y="382.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.02%)</title><rect x="57.7" y="371.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="60.7" y="382.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.02%)</title><rect x="57.9" y="371.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="60.9" y="382.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (2 samples, 0.05%)</title><rect x="58.2" y="371.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="61.2" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.05%)</title><rect x="58.8" y="387.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="61.8" y="398.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (1 samples, 0.02%)</title><rect x="59.4" y="387.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="62.4" y="398.0"></text>
</g>
<g>
<title>vframeStream::vframeStream(JavaThread*, bool) (3 samples, 0.07%)</title><rect x="59.7" y="387.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="62.7" y="398.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.07%)</title><rect x="59.7" y="371.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="62.7" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="59.7" y="355.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="62.7" y="366.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="59.9" y="355.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="62.9" y="366.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.02%)</title><rect x="60.2" y="355.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="63.2" y="366.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (4 samples, 0.10%)</title><rect x="60.5" y="387.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="63.5" y="398.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (3 samples, 0.07%)</title><rect x="60.8" y="371.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="63.8" y="382.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (1 samples, 0.02%)</title><rect x="61.4" y="355.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="64.4" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl$$Lambda$217/1260205426.run (4 samples, 0.10%)</title><rect x="61.7" y="403.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="64.7" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.lambda$getAddress$5 (4 samples, 0.10%)</title><rect x="61.7" y="387.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.7" y="398.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.&lt;init&gt; (4 samples, 0.10%)</title><rect x="61.7" y="371.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="64.7" y="382.0"></text>
</g>
<g>
<title>java/net/InetAddress.getByName (4 samples, 0.10%)</title><rect x="61.7" y="355.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="64.7" y="366.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName (4 samples, 0.10%)</title><rect x="61.7" y="339.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="64.7" y="350.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName (4 samples, 0.10%)</title><rect x="61.7" y="323.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.7" y="334.0"></text>
</g>
<g>
<title>java/lang/String.isEmpty (1 samples, 0.02%)</title><rect x="61.7" y="307.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="64.7" y="318.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName0 (3 samples, 0.07%)</title><rect x="61.9" y="307.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.05%)</title><rect x="61.9" y="291.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.9" y="302.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.05%)</title><rect x="61.9" y="275.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="64.9" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.05%)</title><rect x="61.9" y="259.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.9" y="270.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="62.5" y="291.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="65.5" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.&lt;init&gt; (1 samples, 0.02%)</title><rect x="62.8" y="435.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="65.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.02%)</title><rect x="62.8" y="419.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="65.8" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.completedFuture (1 samples, 0.02%)</title><rect x="63.1" y="451.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="66.1" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.&lt;init&gt; (1 samples, 0.02%)</title><rect x="63.1" y="435.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="66.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.02%)</title><rect x="63.1" y="419.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="66.1" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerTimer (5 samples, 0.12%)</title><rect x="63.4" y="547.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="66.4" y="558.0"></text>
</g>
<g>
<title>java/util/TreeSet.add (3 samples, 0.07%)</title><rect x="63.4" y="531.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="66.4" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (3 samples, 0.07%)</title><rect x="63.4" y="515.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="66.4" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.02%)</title><rect x="63.6" y="499.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="66.6" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/TimeoutEvent.compareTo (1 samples, 0.02%)</title><rect x="63.9" y="499.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="66.9" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.wakeupSelector (2 samples, 0.05%)</title><rect x="64.2" y="531.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="67.2" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (2 samples, 0.05%)</title><rect x="64.2" y="515.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="67.2" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (2 samples, 0.05%)</title><rect x="64.2" y="499.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="67.2" y="510.0"></text>
</g>
<g>
<title>__libc_write (2 samples, 0.05%)</title><rect x="64.2" y="483.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="67.2" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.getExchange (2 samples, 0.05%)</title><rect x="64.8" y="547.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="67.8" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="65.1" y="531.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="68.1" y="542.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="65.1" y="515.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="68.1" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.requestFilters (5 samples, 0.12%)</title><rect x="65.4" y="547.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="68.4" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.request (4 samples, 0.10%)</title><rect x="65.6" y="531.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="68.6" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.getCache (4 samples, 0.10%)</title><rect x="65.6" y="515.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="68.6" y="526.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.get (3 samples, 0.07%)</title><rect x="65.9" y="499.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="68.9" y="510.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.getTable (2 samples, 0.05%)</title><rect x="65.9" y="483.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="68.9" y="494.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.expungeStaleEntries (1 samples, 0.02%)</title><rect x="66.2" y="467.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="69.2" y="478.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.poll (1 samples, 0.02%)</title><rect x="66.2" y="451.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="69.2" y="462.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.reallyPoll (1 samples, 0.02%)</title><rect x="66.2" y="435.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="69.2" y="446.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.hash (1 samples, 0.02%)</title><rect x="66.5" y="483.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="69.5" y="494.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (1 samples, 0.02%)</title><rect x="66.5" y="467.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.5" y="478.0"></text>
</g>
<g>
<title>JVM_IHashCode (1 samples, 0.02%)</title><rect x="66.5" y="451.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="69.5" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.02%)</title><rect x="66.5" y="435.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="69.5" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseTimerEvent.of (3 samples, 0.07%)</title><rect x="66.8" y="547.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="69.8" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseTimerEvent.&lt;init&gt; (3 samples, 0.07%)</title><rect x="66.8" y="531.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="69.8" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/TimeoutEvent.&lt;init&gt; (3 samples, 0.07%)</title><rect x="66.8" y="515.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.8" y="526.0"></text>
</g>
<g>
<title>java/time/Instant.now (3 samples, 0.07%)</title><rect x="66.8" y="499.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="69.8" y="510.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (3 samples, 0.07%)</title><rect x="66.8" y="483.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="69.8" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.getNanoTimeAdjustment (2 samples, 0.05%)</title><rect x="67.1" y="467.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="70.1" y="478.0"></text>
</g>
<g>
<title>JVM_GetNanoTimeAdjustment (1 samples, 0.02%)</title><rect x="67.4" y="451.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="70.4" y="462.0"></text>
</g>
<g>
<title>os::javaTimeSystemUTC(long&amp;, long&amp;) (1 samples, 0.02%)</title><rect x="67.4" y="435.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="70.4" y="446.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="67.4" y="419.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="70.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (24 samples, 0.58%)</title><rect x="67.6" y="611.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (24 samples, 0.58%)</title><rect x="67.6" y="595.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (3 samples, 0.07%)</title><rect x="67.6" y="579.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="70.6" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="67.6" y="563.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="70.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.02%)</title><rect x="67.9" y="563.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.02%)</title><rect x="68.2" y="563.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="71.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.02%)</title><rect x="68.2" y="547.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.02%)</title><rect x="68.2" y="531.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="71.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.02%)</title><rect x="68.2" y="515.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="71.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.02%)</title><rect x="68.2" y="499.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.02%)</title><rect x="68.2" y="483.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="71.2" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.02%)</title><rect x="68.2" y="467.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="71.2" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.02%)</title><rect x="68.2" y="451.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="71.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$206/2123650476.accept (21 samples, 0.51%)</title><rect x="68.5" y="579.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="71.5" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$respond$0 (21 samples, 0.51%)</title><rect x="68.5" y="563.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.5" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.sendResponse (21 samples, 0.51%)</title><rect x="68.5" y="547.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="71.5" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (21 samples, 0.51%)</title><rect x="68.5" y="531.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="71.5" y="542.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.10%)</title><rect x="68.8" y="515.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.8" y="526.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.10%)</title><rect x="68.8" y="499.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="71.8" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.10%)</title><rect x="68.8" y="483.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="71.8" y="494.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="69.4" y="467.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="72.4" y="478.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="69.6" y="467.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="72.6" y="478.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="69.6" y="451.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="72.6" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (15 samples, 0.36%)</title><rect x="69.9" y="515.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="72.9" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.02%)</title><rect x="69.9" y="499.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="72.9" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.10%)</title><rect x="70.2" y="499.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="73.2" y="510.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.02%)</title><rect x="71.1" y="483.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="74.1" y="494.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="71.1" y="467.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="74.1" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (10 samples, 0.24%)</title><rect x="71.4" y="499.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.4" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (10 samples, 0.24%)</title><rect x="71.4" y="483.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.4" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (10 samples, 0.24%)</title><rect x="71.4" y="467.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="74.4" y="478.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (8 samples, 0.19%)</title><rect x="71.9" y="451.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.9" y="462.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (6 samples, 0.15%)</title><rect x="72.2" y="435.0" width="1.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="75.2" y="446.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="72.2" y="419.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="75.2" y="430.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="72.5" y="419.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="75.5" y="430.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.05%)</title><rect x="72.8" y="419.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="75.8" y="430.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.02%)</title><rect x="72.8" y="403.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="75.8" y="414.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="73.1" y="403.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="76.1" y="414.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.05%)</title><rect x="73.4" y="419.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="76.4" y="430.0"></text>
</g>
<g>
<title>__libc_send (1 samples, 0.02%)</title><rect x="73.9" y="435.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="76.9" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.02%)</title><rect x="74.2" y="515.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.2" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$172/1002107470.get (1 samples, 0.02%)</title><rect x="74.5" y="611.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$444/142104323.get (995 samples, 24.06%)</title><rect x="74.8" y="627.0" width="283.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="77.8" y="638.0">ru/mail/polis/service/mrsandman5/Servi..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replicasGet$1 (995 samples, 24.06%)</title><rect x="74.8" y="611.0" width="283.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="77.8" y="622.0">ru/mail/polis/service/mrsandman5/Servi..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.entryFromBytes (995 samples, 24.06%)</title><rect x="74.8" y="595.0" width="283.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="77.8" y="606.0">ru/mail/polis/service/mrsandman5/repli..</text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.02%)</title><rect x="74.8" y="579.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="77.8" y="590.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="74.8" y="563.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="77.8" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (78 samples, 1.89%)</title><rect x="75.1" y="579.0" width="22.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="78.1" y="590.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (77 samples, 1.86%)</title><rect x="75.1" y="563.0" width="21.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="78.1" y="574.0">c..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (8 samples, 0.19%)</title><rect x="75.1" y="547.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.1" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (8 samples, 0.19%)</title><rect x="75.1" y="531.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.1" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (8 samples, 0.19%)</title><rect x="75.1" y="515.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="78.1" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6 samples, 0.15%)</title><rect x="75.1" y="499.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="78.1" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6 samples, 0.15%)</title><rect x="75.1" y="483.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.1" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1 samples, 0.02%)</title><rect x="75.1" y="467.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.1" y="478.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (5 samples, 0.12%)</title><rect x="75.3" y="467.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.3" y="478.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (4 samples, 0.10%)</title><rect x="75.6" y="451.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.6" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (4 samples, 0.10%)</title><rect x="75.6" y="435.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (4 samples, 0.10%)</title><rect x="75.6" y="419.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.6" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.10%)</title><rect x="75.6" y="403.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="78.6" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.05%)</title><rect x="75.6" y="387.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="78.6" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="75.6" y="371.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.6" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (1 samples, 0.02%)</title><rect x="75.9" y="371.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.9" y="382.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.05%)</title><rect x="76.2" y="387.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (2 samples, 0.05%)</title><rect x="76.8" y="499.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="79.8" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (69 samples, 1.67%)</title><rect x="77.3" y="547.0" width="19.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="80.3" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (69 samples, 1.67%)</title><rect x="77.3" y="531.0" width="19.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="80.3" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (69 samples, 1.67%)</title><rect x="77.3" y="515.0" width="19.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.3" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1 samples, 0.02%)</title><rect x="77.3" y="499.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="80.3" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1 samples, 0.02%)</title><rect x="77.3" y="483.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.3" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1 samples, 0.02%)</title><rect x="77.3" y="467.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="80.3" y="478.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.02%)</title><rect x="77.3" y="451.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="80.3" y="462.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.02%)</title><rect x="77.3" y="435.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="80.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (1 samples, 0.02%)</title><rect x="77.3" y="419.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.02%)</title><rect x="77.3" y="403.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="80.3" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.02%)</title><rect x="77.3" y="387.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.3" y="398.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.02%)</title><rect x="77.3" y="371.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.3" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (68 samples, 1.64%)</title><rect x="77.6" y="499.0" width="19.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.6" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (68 samples, 1.64%)</title><rect x="77.6" y="483.0" width="19.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.6" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (68 samples, 1.64%)</title><rect x="77.6" y="467.0" width="19.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.6" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (66 samples, 1.60%)</title><rect x="77.6" y="451.0" width="18.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="80.6" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.02%)</title><rect x="78.2" y="435.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="81.2" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (1 samples, 0.02%)</title><rect x="78.2" y="419.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="81.2" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable$$Lambda$442/658008298.apply (1 samples, 0.02%)</title><rect x="78.2" y="403.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="81.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.lambda$iterator$0 (1 samples, 0.02%)</title><rect x="78.2" y="387.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="81.2" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (1 samples, 0.02%)</title><rect x="78.2" y="371.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="81.2" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.02%)</title><rect x="78.2" y="355.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.2" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="78.2" y="339.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="81.2" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="78.2" y="323.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.2" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="78.2" y="307.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.2" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="78.2" y="291.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="81.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="78.2" y="275.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.2" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (63 samples, 1.52%)</title><rect x="78.5" y="435.0" width="18.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (63 samples, 1.52%)</title><rect x="78.5" y="419.0" width="18.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (63 samples, 1.52%)</title><rect x="78.5" y="403.0" width="18.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="81.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (25 samples, 0.60%)</title><rect x="78.5" y="387.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="81.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (25 samples, 0.60%)</title><rect x="78.5" y="371.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="81.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (25 samples, 0.60%)</title><rect x="78.5" y="355.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="81.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.07%)</title><rect x="78.5" y="339.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.5" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.07%)</title><rect x="78.5" y="323.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="81.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.02%)</title><rect x="79.3" y="339.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.3" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.02%)</title><rect x="79.3" y="323.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="82.3" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.02%)</title><rect x="79.3" y="307.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="82.3" y="318.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.02%)</title><rect x="79.3" y="291.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="82.3" y="302.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.02%)</title><rect x="79.3" y="275.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="82.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (19 samples, 0.46%)</title><rect x="79.6" y="339.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="82.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (17 samples, 0.41%)</title><rect x="79.6" y="323.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="82.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (16 samples, 0.39%)</title><rect x="79.6" y="307.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="82.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (16 samples, 0.39%)</title><rect x="79.6" y="291.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="82.6" y="302.0"></text>
</g>
<g>
<title>__pread (13 samples, 0.31%)</title><rect x="80.2" y="275.0" width="3.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="83.2" y="286.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="83.9" y="275.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="86.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.02%)</title><rect x="84.2" y="307.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="87.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.05%)</title><rect x="84.5" y="323.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="87.5" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.05%)</title><rect x="84.5" y="307.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="87.5" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.05%)</title><rect x="84.5" y="291.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="87.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (2 samples, 0.05%)</title><rect x="84.5" y="275.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="87.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.02%)</title><rect x="85.1" y="339.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.02%)</title><rect x="85.1" y="323.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="88.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.02%)</title><rect x="85.3" y="339.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (38 samples, 0.92%)</title><rect x="85.6" y="387.0" width="10.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="88.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (36 samples, 0.87%)</title><rect x="86.2" y="371.0" width="10.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="89.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (4 samples, 0.10%)</title><rect x="86.5" y="355.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="89.5" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (4 samples, 0.10%)</title><rect x="86.5" y="339.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="89.5" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.02%)</title><rect x="87.3" y="323.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.3" y="334.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.02%)</title><rect x="87.3" y="307.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="90.3" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.02%)</title><rect x="87.3" y="291.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="90.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.02%)</title><rect x="87.6" y="355.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.6" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.02%)</title><rect x="87.6" y="339.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (27 samples, 0.65%)</title><rect x="87.9" y="355.0" width="7.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="90.9" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.02%)</title><rect x="87.9" y="339.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="90.9" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="87.9" y="323.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="90.9" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="87.9" y="307.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="90.9" y="318.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="87.9" y="291.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="90.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (25 samples, 0.60%)</title><rect x="88.2" y="339.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (23 samples, 0.56%)</title><rect x="88.2" y="323.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="91.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (23 samples, 0.56%)</title><rect x="88.2" y="307.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="91.2" y="318.0"></text>
</g>
<g>
<title>__pread (19 samples, 0.46%)</title><rect x="89.0" y="291.0" width="5.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="92.0" y="302.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.02%)</title><rect x="94.5" y="291.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="97.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (2 samples, 0.05%)</title><rect x="94.8" y="323.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="97.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.02%)</title><rect x="95.3" y="339.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.3" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.02%)</title><rect x="95.3" y="323.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="98.3" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.02%)</title><rect x="95.3" y="307.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (1 samples, 0.02%)</title><rect x="95.3" y="291.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.05%)</title><rect x="95.6" y="355.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.6" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="95.9" y="339.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="98.9" y="350.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.02%)</title><rect x="95.9" y="323.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="98.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.02%)</title><rect x="96.2" y="355.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.2" y="366.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.05%)</title><rect x="96.5" y="451.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="99.5" y="462.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.05%)</title><rect x="96.5" y="435.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="99.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (2 samples, 0.05%)</title><rect x="96.5" y="419.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (2 samples, 0.05%)</title><rect x="96.5" y="403.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="99.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.02%)</title><rect x="96.5" y="387.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="99.5" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="96.5" y="371.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="99.5" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (1 samples, 0.02%)</title><rect x="96.8" y="387.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="99.8" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.02%)</title><rect x="96.8" y="371.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="99.8" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="96.8" y="355.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="99.8" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="96.8" y="339.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="99.8" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="96.8" y="323.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="99.8" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="96.8" y="307.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.02%)</title><rect x="97.0" y="563.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.0" y="574.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="97.0" y="547.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.0" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils.entryIterators (916 samples, 22.15%)</title><rect x="97.3" y="579.0" width="261.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="100.3" y="590.0">ru/mail/polis/utils/IteratorUtils.e..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (113 samples, 2.73%)</title><rect x="97.6" y="563.0" width="32.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="100.6" y="574.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (113 samples, 2.73%)</title><rect x="97.6" y="547.0" width="32.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.6" y="558.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (1 samples, 0.02%)</title><rect x="98.2" y="531.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="101.2" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.&lt;init&gt; (1 samples, 0.02%)</title><rect x="98.2" y="515.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="101.2" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (110 samples, 2.66%)</title><rect x="98.5" y="531.0" width="31.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="101.5" y="542.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (110 samples, 2.66%)</title><rect x="98.5" y="515.0" width="31.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="101.5" y="526.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (110 samples, 2.66%)</title><rect x="98.5" y="499.0" width="31.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="101.5" y="510.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (110 samples, 2.66%)</title><rect x="98.5" y="483.0" width="31.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="101.5" y="494.0">ja..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (110 samples, 2.66%)</title><rect x="98.5" y="467.0" width="31.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="101.5" y="478.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (110 samples, 2.66%)</title><rect x="98.5" y="451.0" width="31.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.5" y="462.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (103 samples, 2.49%)</title><rect x="98.5" y="435.0" width="29.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="101.5" y="446.0">co..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.02%)</title><rect x="98.7" y="419.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="101.7" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (1 samples, 0.02%)</title><rect x="98.7" y="403.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="101.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable$$Lambda$442/658008298.apply (1 samples, 0.02%)</title><rect x="98.7" y="387.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="101.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.lambda$iterator$0 (1 samples, 0.02%)</title><rect x="98.7" y="371.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="101.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (101 samples, 2.44%)</title><rect x="99.0" y="419.0" width="28.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="102.0" y="430.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (101 samples, 2.44%)</title><rect x="99.0" y="403.0" width="28.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.0" y="414.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (100 samples, 2.42%)</title><rect x="99.3" y="387.0" width="28.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="102.3" y="398.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.07%)</title><rect x="99.9" y="371.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.9" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.05%)</title><rect x="100.2" y="355.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="103.2" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.05%)</title><rect x="100.2" y="339.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="103.2" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.05%)</title><rect x="100.2" y="323.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="103.2" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="100.2" y="307.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="103.2" y="318.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="100.2" y="291.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="103.2" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="100.2" y="275.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="103.2" y="286.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.02%)</title><rect x="100.2" y="259.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="103.2" y="270.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="100.5" y="307.0" width="0.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="103.5" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.07%)</title><rect x="100.7" y="371.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (36 samples, 0.87%)</title><rect x="101.6" y="371.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="104.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.02%)</title><rect x="101.6" y="355.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="104.6" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="101.6" y="339.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="104.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (35 samples, 0.85%)</title><rect x="101.9" y="355.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="104.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (34 samples, 0.82%)</title><rect x="102.2" y="339.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="105.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.02%)</title><rect x="102.2" y="323.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="105.2" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.02%)</title><rect x="102.2" y="307.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="105.2" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.02%)</title><rect x="102.2" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="105.2" y="302.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.02%)</title><rect x="102.2" y="275.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.2" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.02%)</title><rect x="102.2" y="259.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="105.2" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.02%)</title><rect x="102.5" y="323.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="105.5" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.02%)</title><rect x="102.5" y="307.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.5" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.02%)</title><rect x="102.5" y="291.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="105.5" y="302.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.02%)</title><rect x="102.5" y="275.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="105.5" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.02%)</title><rect x="102.5" y="259.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="105.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (29 samples, 0.70%)</title><rect x="102.7" y="323.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="105.7" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.05%)</title><rect x="102.7" y="307.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="105.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.05%)</title><rect x="102.7" y="291.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="105.7" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.05%)</title><rect x="102.7" y="275.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="105.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (25 samples, 0.60%)</title><rect x="103.3" y="307.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="106.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (19 samples, 0.46%)</title><rect x="103.3" y="291.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="106.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (19 samples, 0.46%)</title><rect x="103.3" y="275.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="106.3" y="286.0"></text>
</g>
<g>
<title>__pread (18 samples, 0.44%)</title><rect x="103.3" y="259.0" width="5.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="106.3" y="270.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="108.5" y="259.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="111.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (6 samples, 0.15%)</title><rect x="108.7" y="291.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="111.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.05%)</title><rect x="110.4" y="307.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="113.4" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.05%)</title><rect x="110.4" y="291.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="113.4" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.05%)</title><rect x="110.4" y="275.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="113.4" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (2 samples, 0.05%)</title><rect x="110.4" y="259.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="113.4" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (3 samples, 0.07%)</title><rect x="111.0" y="323.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="114.0" y="334.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="111.6" y="307.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="114.6" y="318.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.02%)</title><rect x="111.6" y="291.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="114.6" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.02%)</title><rect x="111.6" y="275.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="114.6" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.02%)</title><rect x="111.6" y="259.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="114.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (56 samples, 1.35%)</title><rect x="111.9" y="371.0" width="16.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="114.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (55 samples, 1.33%)</title><rect x="112.2" y="355.0" width="15.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="115.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (5 samples, 0.12%)</title><rect x="112.2" y="339.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.2" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (5 samples, 0.12%)</title><rect x="112.2" y="323.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="115.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (3 samples, 0.07%)</title><rect x="113.6" y="339.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="116.6" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (3 samples, 0.07%)</title><rect x="113.6" y="323.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="116.6" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.07%)</title><rect x="113.6" y="307.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="116.6" y="318.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.07%)</title><rect x="113.6" y="291.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="116.6" y="302.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.07%)</title><rect x="113.6" y="275.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="116.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (44 samples, 1.06%)</title><rect x="114.4" y="339.0" width="12.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="117.4" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.02%)</title><rect x="114.7" y="323.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="117.7" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.02%)</title><rect x="114.7" y="307.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="117.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.02%)</title><rect x="114.7" y="291.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="117.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (38 samples, 0.92%)</title><rect x="115.0" y="323.0" width="10.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="118.0" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="115.0" y="307.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="118.0" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="115.0" y="291.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="118.0" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="115.0" y="275.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="118.0" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="115.0" y="259.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="118.0" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (35 samples, 0.85%)</title><rect x="115.3" y="307.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (35 samples, 0.85%)</title><rect x="115.3" y="291.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="118.3" y="302.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.02%)</title><rect x="115.9" y="275.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="118.9" y="286.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.02%)</title><rect x="115.9" y="259.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="118.9" y="270.0"></text>
</g>
<g>
<title>__pread (27 samples, 0.65%)</title><rect x="116.2" y="275.0" width="7.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="119.2" y="286.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="123.9" y="275.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="126.9" y="286.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (4 samples, 0.10%)</title><rect x="124.1" y="275.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="127.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (2 samples, 0.05%)</title><rect x="125.3" y="307.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="128.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.10%)</title><rect x="125.9" y="323.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="128.9" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.10%)</title><rect x="125.9" y="307.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="128.9" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (4 samples, 0.10%)</title><rect x="125.9" y="291.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="128.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (4 samples, 0.10%)</title><rect x="125.9" y="275.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="128.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.02%)</title><rect x="127.0" y="339.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="130.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.02%)</title><rect x="127.0" y="323.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="130.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (2 samples, 0.05%)</title><rect x="127.3" y="339.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="130.3" y="350.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (7 samples, 0.17%)</title><rect x="127.9" y="435.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="130.9" y="446.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (7 samples, 0.17%)</title><rect x="127.9" y="419.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="130.9" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="127.9" y="403.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="130.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (6 samples, 0.15%)</title><rect x="128.1" y="403.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="131.1" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (6 samples, 0.15%)</title><rect x="128.1" y="387.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="131.1" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.10%)</title><rect x="128.1" y="371.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="131.1" y="382.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.10%)</title><rect x="128.1" y="355.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="131.1" y="366.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.02%)</title><rect x="129.0" y="339.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="132.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (2 samples, 0.05%)</title><rect x="129.3" y="371.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="132.3" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.05%)</title><rect x="129.3" y="355.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="132.3" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="129.3" y="339.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="132.3" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="129.3" y="323.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="132.3" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="129.3" y="307.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="132.3" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.05%)</title><rect x="129.3" y="291.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="132.3" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="129.6" y="275.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="132.6" y="286.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (772 samples, 18.67%)</title><rect x="129.9" y="563.0" width="220.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="132.9" y="574.0">java/util/Collections$Unmodif..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (772 samples, 18.67%)</title><rect x="129.9" y="547.0" width="220.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="132.9" y="558.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="130.1" y="531.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="133.1" y="542.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$AbstractImmutableList.iterator (1 samples, 0.02%)</title><rect x="130.4" y="531.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="133.4" y="542.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$ListItr.&lt;init&gt; (1 samples, 0.02%)</title><rect x="130.4" y="515.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="133.4" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (1 samples, 0.02%)</title><rect x="130.4" y="499.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="133.4" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils$$Lambda$463/1829357065.accept (769 samples, 18.60%)</title><rect x="130.7" y="531.0" width="219.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="133.7" y="542.0">ru/mail/polis/utils/IteratorU..</text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils.lambda$entryIterators$3 (767 samples, 18.55%)</title><rect x="131.3" y="515.0" width="218.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="134.3" y="526.0">ru/mail/polis/utils/IteratorU..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="131.3" y="499.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="134.3" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="131.3" y="483.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="134.3" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="131.3" y="467.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="134.3" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="131.3" y="451.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="134.3" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.02%)</title><rect x="131.3" y="435.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="134.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.iterator (766 samples, 18.52%)</title><rect x="131.6" y="499.0" width="218.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="134.6" y="510.0">ru/mail/polis/dao/impl/tables..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt; (765 samples, 18.50%)</title><rect x="131.9" y="483.0" width="218.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="134.9" y="494.0">ru/mail/polis/dao/impl/tables..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getPosition (765 samples, 18.50%)</title><rect x="131.9" y="467.0" width="218.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.9" y="478.0">ru/mail/polis/dao/impl/tables..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 0.34%)</title><rect x="131.9" y="451.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="134.9" y="462.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (14 samples, 0.34%)</title><rect x="131.9" y="435.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="134.9" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (7 samples, 0.17%)</title><rect x="133.9" y="419.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="136.9" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.02%)</title><rect x="135.3" y="403.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="138.3" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.02%)</title><rect x="135.6" y="403.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="138.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.keyAt (751 samples, 18.16%)</title><rect x="135.8" y="451.0" width="214.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="138.8" y="462.0">ru/mail/polis/dao/impl/table..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.02%)</title><rect x="137.0" y="435.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="140.0" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="137.0" y="419.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="140.0" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="137.0" y="403.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="140.0" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="137.0" y="387.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="140.0" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="137.0" y="371.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="140.0" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="137.0" y="355.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="140.0" y="366.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.02%)</title><rect x="137.0" y="339.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="140.0" y="350.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="137.0" y="323.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="140.0" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (13 samples, 0.31%)</title><rect x="137.3" y="435.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="140.3" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="140.1" y="419.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="143.1" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="140.1" y="403.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="143.1" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="140.1" y="387.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="143.1" y="398.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.05%)</title><rect x="140.4" y="371.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="143.4" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (261 samples, 6.31%)</title><rect x="141.0" y="435.0" width="74.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="144.0" y="446.0">ru/mail/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (18 samples, 0.44%)</title><rect x="141.3" y="419.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="144.3" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="142.1" y="403.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="145.1" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.34%)</title><rect x="142.4" y="403.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="145.4" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.27%)</title><rect x="143.3" y="387.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="146.3" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.17%)</title><rect x="144.1" y="371.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="147.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.07%)</title><rect x="144.4" y="355.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="147.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.07%)</title><rect x="144.4" y="339.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="147.4" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.05%)</title><rect x="144.7" y="323.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="147.7" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.07%)</title><rect x="145.3" y="355.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="148.3" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.05%)</title><rect x="145.6" y="339.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.6" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.05%)</title><rect x="145.6" y="323.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.02%)</title><rect x="146.1" y="371.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="149.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (242 samples, 5.85%)</title><rect x="146.4" y="419.0" width="69.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="149.4" y="430.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.ensureOpen (1 samples, 0.02%)</title><rect x="146.7" y="403.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="149.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (240 samples, 5.80%)</title><rect x="147.0" y="403.0" width="68.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="150.0" y="414.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (26 samples, 0.63%)</title><rect x="147.0" y="387.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="150.0" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (25 samples, 0.60%)</title><rect x="147.3" y="371.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="150.3" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (15 samples, 0.36%)</title><rect x="150.1" y="355.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.1" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (13 samples, 0.31%)</title><rect x="150.7" y="339.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="153.7" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (13 samples, 0.31%)</title><rect x="150.7" y="323.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="153.7" y="334.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.05%)</title><rect x="153.8" y="307.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="156.8" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.05%)</title><rect x="154.4" y="387.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="157.4" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.05%)</title><rect x="154.4" y="371.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="157.4" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.02%)</title><rect x="154.7" y="355.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="157.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (199 samples, 4.81%)</title><rect x="155.0" y="387.0" width="56.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="158.0" y="398.0">sun/ni..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (9 samples, 0.22%)</title><rect x="155.0" y="371.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="158.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.12%)</title><rect x="155.0" y="355.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="158.0" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.12%)</title><rect x="155.0" y="339.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="158.0" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.10%)</title><rect x="156.4" y="355.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (4 samples, 0.10%)</title><rect x="156.4" y="339.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="159.4" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.02%)</title><rect x="157.3" y="323.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="160.3" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (1 samples, 0.02%)</title><rect x="157.3" y="307.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="160.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (182 samples, 4.40%)</title><rect x="157.5" y="371.0" width="52.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="160.5" y="382.0">sun/n..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.07%)</title><rect x="158.1" y="355.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="161.1" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.07%)</title><rect x="158.1" y="339.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.1" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.07%)</title><rect x="158.1" y="323.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="161.1" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.07%)</title><rect x="158.1" y="307.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="161.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (153 samples, 3.70%)</title><rect x="159.0" y="355.0" width="43.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="162.0" y="366.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (153 samples, 3.70%)</title><rect x="159.0" y="339.0" width="43.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="162.0" y="350.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (2 samples, 0.05%)</title><rect x="160.4" y="323.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="163.4" y="334.0"></text>
</g>
<g>
<title>__pread (137 samples, 3.31%)</title><rect x="161.0" y="323.0" width="39.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="164.0" y="334.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.12%)</title><rect x="200.1" y="323.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="203.1" y="334.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (4 samples, 0.10%)</title><rect x="201.5" y="323.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="204.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (24 samples, 0.58%)</title><rect x="202.6" y="355.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="205.6" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (8 samples, 0.19%)</title><rect x="209.5" y="371.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="212.5" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.19%)</title><rect x="209.5" y="355.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="212.5" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (8 samples, 0.19%)</title><rect x="209.5" y="339.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="212.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (8 samples, 0.19%)</title><rect x="209.5" y="323.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="212.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (12 samples, 0.29%)</title><rect x="211.8" y="387.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="214.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (4 samples, 0.10%)</title><rect x="214.0" y="371.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="217.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.02%)</title><rect x="215.2" y="387.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (472 samples, 11.41%)</title><rect x="215.5" y="435.0" width="134.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="218.5" y="446.0">sun/nio/ch/FileCh..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (472 samples, 11.41%)</title><rect x="215.5" y="419.0" width="134.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.5" y="430.0">sun/nio/ch/FileCh..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (2 samples, 0.05%)</title><rect x="217.2" y="403.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (19 samples, 0.46%)</title><rect x="217.7" y="403.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="220.7" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (19 samples, 0.46%)</title><rect x="217.7" y="387.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="220.7" y="398.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.07%)</title><rect x="219.2" y="371.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="222.2" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (11 samples, 0.27%)</title><rect x="220.0" y="371.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="223.0" y="382.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (7 samples, 0.17%)</title><rect x="221.2" y="355.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.2" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (7 samples, 0.17%)</title><rect x="221.2" y="339.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="224.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (12 samples, 0.29%)</title><rect x="223.2" y="403.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.2" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (3 samples, 0.07%)</title><rect x="225.7" y="387.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="228.7" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.07%)</title><rect x="225.7" y="371.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="228.7" y="382.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.02%)</title><rect x="226.3" y="355.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.3" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.02%)</title><rect x="226.3" y="339.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (401 samples, 9.70%)</title><rect x="226.6" y="403.0" width="114.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.6" y="414.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (18 samples, 0.44%)</title><rect x="226.9" y="387.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.9" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.02%)</title><rect x="226.9" y="371.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.9" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (11 samples, 0.27%)</title><rect x="227.2" y="371.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.2" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (11 samples, 0.27%)</title><rect x="227.2" y="355.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.2" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="229.2" y="339.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="232.2" y="350.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.07%)</title><rect x="229.4" y="339.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="232.4" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (6 samples, 0.15%)</title><rect x="230.3" y="371.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.3" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (6 samples, 0.15%)</title><rect x="230.3" y="355.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.3" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (5 samples, 0.12%)</title><rect x="230.6" y="339.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.6" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (2 samples, 0.05%)</title><rect x="230.6" y="323.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.6" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (3 samples, 0.07%)</title><rect x="231.2" y="323.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (353 samples, 8.54%)</title><rect x="232.0" y="387.0" width="100.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.0" y="398.0">sun/nio/ch/I..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.05%)</title><rect x="232.3" y="371.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="235.3" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.05%)</title><rect x="232.3" y="355.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.3" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.05%)</title><rect x="232.3" y="339.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.3" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.05%)</title><rect x="232.3" y="323.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (320 samples, 7.74%)</title><rect x="232.9" y="371.0" width="91.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="235.9" y="382.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (319 samples, 7.71%)</title><rect x="233.2" y="355.0" width="91.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.2" y="366.0">sun/nio/ch/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (5 samples, 0.12%)</title><rect x="237.2" y="339.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="240.2" y="350.0"></text>
</g>
<g>
<title>__pread (285 samples, 6.89%)</title><rect x="238.6" y="339.0" width="81.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="241.6" y="350.0">__pread</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.17%)</title><rect x="319.9" y="339.0" width="2.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="322.9" y="350.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (6 samples, 0.15%)</title><rect x="321.9" y="339.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="324.9" y="350.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.02%)</title><rect x="323.6" y="339.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="326.6" y="350.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.02%)</title><rect x="323.9" y="339.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="326.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (30 samples, 0.73%)</title><rect x="324.2" y="371.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="327.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (29 samples, 0.70%)</title><rect x="332.8" y="387.0" width="8.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="335.8" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (25 samples, 0.60%)</title><rect x="332.8" y="371.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="335.8" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (25 samples, 0.60%)</title><rect x="332.8" y="355.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="335.8" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (25 samples, 0.60%)</title><rect x="332.8" y="339.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="335.8" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.02%)</title><rect x="339.6" y="323.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="342.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (4 samples, 0.10%)</title><rect x="339.9" y="371.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="342.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (27 samples, 0.65%)</title><rect x="341.0" y="403.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="344.0" y="414.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.02%)</title><rect x="346.7" y="387.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="349.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (6 samples, 0.15%)</title><rect x="347.0" y="387.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="350.0" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.10%)</title><rect x="347.6" y="371.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="350.6" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (3 samples, 0.07%)</title><rect x="347.9" y="355.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="350.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (5 samples, 0.12%)</title><rect x="348.7" y="403.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="351.7" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="349.6" y="387.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="352.6" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.02%)</title><rect x="349.6" y="371.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="352.6" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.02%)</title><rect x="349.6" y="355.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="352.6" y="366.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.02%)</title><rect x="349.9" y="371.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="352.9" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.values (1 samples, 0.02%)</title><rect x="350.2" y="563.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="353.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (17 samples, 0.41%)</title><rect x="350.4" y="563.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="353.4" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (17 samples, 0.41%)</title><rect x="350.4" y="547.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="353.4" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (17 samples, 0.41%)</title><rect x="350.4" y="531.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="353.4" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (2 samples, 0.05%)</title><rect x="350.4" y="515.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="353.4" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (2 samples, 0.05%)</title><rect x="350.4" y="499.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="353.4" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (2 samples, 0.05%)</title><rect x="350.4" y="483.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="353.4" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2 samples, 0.05%)</title><rect x="350.4" y="467.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="353.4" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2 samples, 0.05%)</title><rect x="350.4" y="451.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="353.4" y="462.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.05%)</title><rect x="350.4" y="435.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="353.4" y="446.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.05%)</title><rect x="350.4" y="419.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="353.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (2 samples, 0.05%)</title><rect x="350.4" y="403.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="353.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (2 samples, 0.05%)</title><rect x="350.4" y="387.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="353.4" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.05%)</title><rect x="350.4" y="371.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="353.4" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="350.4" y="355.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="353.4" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="350.7" y="355.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="353.7" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="350.7" y="339.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="353.7" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (14 samples, 0.34%)</title><rect x="351.0" y="515.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="354.0" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (14 samples, 0.34%)</title><rect x="351.0" y="499.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="354.0" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (14 samples, 0.34%)</title><rect x="351.0" y="483.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="354.0" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (14 samples, 0.34%)</title><rect x="351.0" y="467.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="354.0" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 0.31%)</title><rect x="351.0" y="451.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="354.0" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 0.31%)</title><rect x="351.0" y="435.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="354.0" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (11 samples, 0.27%)</title><rect x="351.0" y="419.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="354.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (11 samples, 0.27%)</title><rect x="351.0" y="403.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="354.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (11 samples, 0.27%)</title><rect x="351.0" y="387.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="354.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (11 samples, 0.27%)</title><rect x="351.0" y="371.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="354.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (3 samples, 0.07%)</title><rect x="351.0" y="355.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="354.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (3 samples, 0.07%)</title><rect x="351.0" y="339.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="354.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (3 samples, 0.07%)</title><rect x="351.0" y="323.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="354.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.02%)</title><rect x="351.0" y="307.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="354.0" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.02%)</title><rect x="351.0" y="291.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="354.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.02%)</title><rect x="351.3" y="307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="354.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.02%)</title><rect x="351.3" y="291.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="354.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (1 samples, 0.02%)</title><rect x="351.3" y="275.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="354.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.02%)</title><rect x="351.3" y="259.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.3" y="270.0"></text>
</g>
<g>
<title>__pread (1 samples, 0.02%)</title><rect x="351.3" y="243.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="354.3" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.02%)</title><rect x="351.6" y="307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="354.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (8 samples, 0.19%)</title><rect x="351.9" y="355.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="354.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (8 samples, 0.19%)</title><rect x="351.9" y="339.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="354.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (7 samples, 0.17%)</title><rect x="351.9" y="323.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="354.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (6 samples, 0.15%)</title><rect x="351.9" y="307.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="354.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (6 samples, 0.15%)</title><rect x="351.9" y="291.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="354.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (6 samples, 0.15%)</title><rect x="351.9" y="275.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="354.9" y="286.0"></text>
</g>
<g>
<title>__pread (5 samples, 0.12%)</title><rect x="351.9" y="259.0" width="1.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="354.9" y="270.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="353.3" y="259.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="356.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.02%)</title><rect x="353.6" y="307.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="356.6" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.02%)</title><rect x="353.6" y="291.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="356.6" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.02%)</title><rect x="353.6" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="356.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (1 samples, 0.02%)</title><rect x="353.6" y="259.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="356.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.02%)</title><rect x="353.9" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="356.9" y="334.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.05%)</title><rect x="354.2" y="419.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="357.2" y="430.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.05%)</title><rect x="354.2" y="403.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="357.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (2 samples, 0.05%)</title><rect x="354.2" y="387.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="357.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (2 samples, 0.05%)</title><rect x="354.2" y="371.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="357.2" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.02%)</title><rect x="354.4" y="355.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="357.4" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="354.4" y="339.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="357.4" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (1 samples, 0.02%)</title><rect x="354.7" y="451.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="357.7" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1 samples, 0.02%)</title><rect x="355.0" y="515.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="358.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.iterator (12 samples, 0.29%)</title><rect x="355.3" y="563.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="358.3" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (1 samples, 0.02%)</title><rect x="355.3" y="547.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="358.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (11 samples, 0.27%)</title><rect x="355.6" y="547.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="358.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (11 samples, 0.27%)</title><rect x="355.6" y="531.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (11 samples, 0.27%)</title><rect x="355.6" y="515.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="358.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (10 samples, 0.24%)</title><rect x="355.9" y="499.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="358.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (10 samples, 0.24%)</title><rect x="355.9" y="483.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="358.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.02%)</title><rect x="355.9" y="467.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="358.9" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.02%)</title><rect x="355.9" y="451.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="358.9" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.02%)</title><rect x="355.9" y="435.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="358.9" y="446.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="355.9" y="419.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="358.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (9 samples, 0.22%)</title><rect x="356.2" y="467.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="359.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.07%)</title><rect x="357.9" y="451.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="360.9" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.07%)</title><rect x="357.9" y="435.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="360.9" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.07%)</title><rect x="357.9" y="419.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="360.9" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.07%)</title><rect x="357.9" y="403.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="360.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/SimpleRequests$$Lambda$458/395499714.get (1,989 samples, 48.10%)</title><rect x="358.7" y="627.0" width="567.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="361.7" y="638.0">ru/mail/polis/service/mrsandman5/replication/SimpleRequests$$Lambda$458/3954997..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/SimpleRequests.lambda$get$0 (1,989 samples, 48.10%)</title><rect x="358.7" y="611.0" width="567.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="361.7" y="622.0">ru/mail/polis/service/mrsandman5/replication/SimpleRequests.lambda$get$0</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.entryFromBytes (1,985 samples, 48.00%)</title><rect x="358.7" y="595.0" width="566.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="361.7" y="606.0">ru/mail/polis/service/mrsandman5/replication/Entry.entryFromBytes</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (151 samples, 3.65%)</title><rect x="359.0" y="579.0" width="43.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="362.0" y="590.0">ru/m..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (1 samples, 0.02%)</title><rect x="359.0" y="563.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="362.0" y="574.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (1 samples, 0.02%)</title><rect x="359.0" y="547.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="362.0" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.size (1 samples, 0.02%)</title><rect x="359.0" y="531.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="362.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils.entryIterators (1 samples, 0.02%)</title><rect x="359.0" y="515.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="362.0" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (143 samples, 3.46%)</title><rect x="359.3" y="563.0" width="40.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="362.3" y="574.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (2 samples, 0.05%)</title><rect x="359.6" y="547.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="362.6" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (2 samples, 0.05%)</title><rect x="359.6" y="531.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="362.6" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Value.getData (1 samples, 0.02%)</title><rect x="359.9" y="515.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="362.9" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (12 samples, 0.29%)</title><rect x="360.1" y="547.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="363.1" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (12 samples, 0.29%)</title><rect x="360.1" y="531.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="363.1" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (12 samples, 0.29%)</title><rect x="360.1" y="515.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="363.1" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (11 samples, 0.27%)</title><rect x="360.1" y="499.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="363.1" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (11 samples, 0.27%)</title><rect x="360.1" y="483.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="363.1" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1 samples, 0.02%)</title><rect x="360.1" y="467.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="363.1" y="478.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (10 samples, 0.24%)</title><rect x="360.4" y="467.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="363.4" y="478.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (10 samples, 0.24%)</title><rect x="360.4" y="451.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="363.4" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (9 samples, 0.22%)</title><rect x="360.7" y="435.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="363.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (9 samples, 0.22%)</title><rect x="360.7" y="419.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="363.7" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.17%)</title><rect x="360.7" y="403.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="363.7" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="360.7" y="387.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="363.7" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.15%)</title><rect x="361.0" y="387.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="364.0" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="362.1" y="371.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="365.1" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.02%)</title><rect x="362.1" y="355.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="365.1" y="366.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.02%)</title><rect x="362.4" y="371.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="365.4" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (2 samples, 0.05%)</title><rect x="362.7" y="403.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="365.7" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (2 samples, 0.05%)</title><rect x="362.7" y="387.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="365.7" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.05%)</title><rect x="362.7" y="371.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="365.7" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="362.7" y="355.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="365.7" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="362.7" y="339.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="365.7" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="362.7" y="323.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="365.7" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.05%)</title><rect x="362.7" y="307.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="365.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="363.0" y="291.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="366.0" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="363.0" y="275.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="366.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (1 samples, 0.02%)</title><rect x="363.3" y="499.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="366.3" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (128 samples, 3.10%)</title><rect x="363.6" y="547.0" width="36.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="366.6" y="558.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (128 samples, 3.10%)</title><rect x="363.6" y="531.0" width="36.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="366.6" y="542.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (128 samples, 3.10%)</title><rect x="363.6" y="515.0" width="36.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="366.6" y="526.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1 samples, 0.02%)</title><rect x="363.6" y="499.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="366.6" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1 samples, 0.02%)</title><rect x="363.6" y="483.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="366.6" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1 samples, 0.02%)</title><rect x="363.6" y="467.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="366.6" y="478.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.02%)</title><rect x="363.6" y="451.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="366.6" y="462.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.02%)</title><rect x="363.6" y="435.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="366.6" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getInt (1 samples, 0.02%)</title><rect x="363.6" y="419.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="366.6" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (1 samples, 0.02%)</title><rect x="363.6" y="403.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="366.6" y="414.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (127 samples, 3.07%)</title><rect x="363.9" y="499.0" width="36.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="366.9" y="510.0">jav..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (127 samples, 3.07%)</title><rect x="363.9" y="483.0" width="36.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="366.9" y="494.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (127 samples, 3.07%)</title><rect x="363.9" y="467.0" width="36.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="366.9" y="478.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (121 samples, 2.93%)</title><rect x="363.9" y="451.0" width="34.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="366.9" y="462.0">co..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.02%)</title><rect x="364.1" y="435.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="367.1" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (119 samples, 2.88%)</title><rect x="364.4" y="435.0" width="34.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="367.4" y="446.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (119 samples, 2.88%)</title><rect x="364.4" y="419.0" width="34.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="367.4" y="430.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (119 samples, 2.88%)</title><rect x="364.4" y="403.0" width="34.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="367.4" y="414.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.05%)</title><rect x="364.4" y="387.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="367.4" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="364.7" y="371.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="367.7" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="364.7" y="355.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="367.7" y="366.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="364.7" y="339.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="367.7" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="364.7" y="323.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="367.7" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="364.7" y="307.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="367.7" y="318.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="364.7" y="291.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="367.7" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="364.7" y="275.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="367.7" y="286.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)</title><rect x="364.7" y="259.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="367.7" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.02%)</title><rect x="364.7" y="243.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="367.7" y="254.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.02%)</title><rect x="364.7" y="227.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="367.7" y="238.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.02%)</title><rect x="364.7" y="211.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="367.7" y="222.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.02%)</title><rect x="364.7" y="195.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="367.7" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (1 samples, 0.02%)</title><rect x="365.0" y="387.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="368.0" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.02%)</title><rect x="365.3" y="387.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="368.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (34 samples, 0.82%)</title><rect x="365.6" y="387.0" width="9.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="368.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (34 samples, 0.82%)</title><rect x="365.6" y="371.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="368.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (34 samples, 0.82%)</title><rect x="365.6" y="355.0" width="9.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="368.6" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.07%)</title><rect x="365.6" y="339.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="368.6" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.07%)</title><rect x="365.6" y="323.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="368.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.05%)</title><rect x="366.4" y="339.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="369.4" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.02%)</title><rect x="366.7" y="323.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="369.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (22 samples, 0.53%)</title><rect x="367.0" y="339.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="370.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (22 samples, 0.53%)</title><rect x="367.0" y="323.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="370.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (20 samples, 0.48%)</title><rect x="367.0" y="307.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="370.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (20 samples, 0.48%)</title><rect x="367.0" y="291.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="370.0" y="302.0"></text>
</g>
<g>
<title>__pread (18 samples, 0.44%)</title><rect x="367.3" y="275.0" width="5.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="370.3" y="286.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="372.4" y="275.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="375.4" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (2 samples, 0.05%)</title><rect x="372.7" y="307.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="375.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (5 samples, 0.12%)</title><rect x="373.3" y="339.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="376.3" y="350.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="374.1" y="323.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="377.1" y="334.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.02%)</title><rect x="374.1" y="307.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="377.1" y="318.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.02%)</title><rect x="374.1" y="291.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="377.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.02%)</title><rect x="374.4" y="323.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="377.4" y="334.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (1 samples, 0.02%)</title><rect x="374.4" y="307.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="377.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (2 samples, 0.05%)</title><rect x="374.7" y="339.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="377.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (81 samples, 1.96%)</title><rect x="375.3" y="387.0" width="23.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.3" y="398.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (81 samples, 1.96%)</title><rect x="375.3" y="371.0" width="23.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="378.3" y="382.0">s..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (1 samples, 0.02%)</title><rect x="375.3" y="355.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="378.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (6 samples, 0.15%)</title><rect x="375.6" y="355.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="378.6" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (6 samples, 0.15%)</title><rect x="375.6" y="339.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.05%)</title><rect x="377.3" y="355.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="380.3" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.05%)</title><rect x="377.3" y="339.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="380.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (65 samples, 1.57%)</title><rect x="377.8" y="355.0" width="18.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="380.8" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (4 samples, 0.10%)</title><rect x="378.1" y="339.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="381.1" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.02%)</title><rect x="378.1" y="323.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="381.1" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.05%)</title><rect x="378.4" y="323.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="381.4" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.05%)</title><rect x="378.4" y="307.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="381.4" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.02%)</title><rect x="379.0" y="323.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="382.0" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.02%)</title><rect x="379.0" y="307.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="382.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (56 samples, 1.35%)</title><rect x="379.3" y="339.0" width="15.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="382.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (50 samples, 1.21%)</title><rect x="379.3" y="323.0" width="14.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="382.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (50 samples, 1.21%)</title><rect x="379.3" y="307.0" width="14.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="382.3" y="318.0"></text>
</g>
<g>
<title>__pread (46 samples, 1.11%)</title><rect x="379.8" y="291.0" width="13.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="382.8" y="302.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.05%)</title><rect x="393.0" y="291.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="396.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (6 samples, 0.15%)</title><rect x="393.5" y="323.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.10%)</title><rect x="395.2" y="339.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="398.2" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.10%)</title><rect x="395.2" y="323.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="398.2" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (4 samples, 0.10%)</title><rect x="395.2" y="307.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="398.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (4 samples, 0.10%)</title><rect x="395.2" y="291.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="398.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (5 samples, 0.12%)</title><rect x="396.4" y="355.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="399.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (3 samples, 0.07%)</title><rect x="397.0" y="339.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="400.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (2 samples, 0.05%)</title><rect x="397.8" y="355.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="400.8" y="366.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (6 samples, 0.15%)</title><rect x="398.4" y="451.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="401.4" y="462.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (6 samples, 0.15%)</title><rect x="398.4" y="435.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="401.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (6 samples, 0.15%)</title><rect x="398.4" y="419.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="401.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (6 samples, 0.15%)</title><rect x="398.4" y="403.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="401.4" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.05%)</title><rect x="398.4" y="387.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="401.4" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="398.7" y="371.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="401.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (1 samples, 0.02%)</title><rect x="398.7" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="401.7" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (4 samples, 0.10%)</title><rect x="399.0" y="387.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="402.0" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.05%)</title><rect x="399.0" y="371.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="402.0" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="399.0" y="355.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="402.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="399.0" y="339.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="402.0" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (2 samples, 0.05%)</title><rect x="399.5" y="371.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="402.5" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="399.5" y="355.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="402.5" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="399.5" y="339.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="402.5" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="399.5" y="323.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="402.5" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="399.5" y="307.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="402.5" y="318.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="399.5" y="291.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="402.5" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="399.5" y="275.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="402.5" y="286.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.02%)</title><rect x="399.5" y="259.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="402.5" y="270.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.02%)</title><rect x="399.5" y="243.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="402.5" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="399.8" y="355.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="402.8" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="399.8" y="339.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="402.8" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="399.8" y="323.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="402.8" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="399.8" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="402.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="399.8" y="291.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="402.8" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="399.8" y="275.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="402.8" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="399.8" y="259.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="402.8" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (3 samples, 0.07%)</title><rect x="400.1" y="563.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="403.1" y="574.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.07%)</title><rect x="400.1" y="547.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="403.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils$$Lambda$474/2029930833.apply (4 samples, 0.10%)</title><rect x="401.0" y="563.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="404.0" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (2 samples, 0.05%)</title><rect x="401.5" y="547.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="404.5" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.05%)</title><rect x="401.5" y="531.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="404.5" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="401.8" y="515.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="404.8" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="401.8" y="499.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="404.8" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="401.8" y="483.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="404.8" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="401.8" y="467.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="404.8" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="401.8" y="451.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="404.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Value.getData (1 samples, 0.02%)</title><rect x="402.1" y="579.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="405.1" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.02%)</title><rect x="402.1" y="563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="405.1" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="402.1" y="547.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="405.1" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="402.1" y="531.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="405.1" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="402.1" y="515.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="405.1" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils.entryIterators (1,832 samples, 44.30%)</title><rect x="402.4" y="579.0" width="522.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="405.4" y="590.0">ru/mail/polis/utils/IteratorUtils.entryIterators</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.02%)</title><rect x="402.7" y="563.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="405.7" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (202 samples, 4.89%)</title><rect x="403.0" y="563.0" width="57.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="406.0" y="574.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (202 samples, 4.89%)</title><rect x="403.0" y="547.0" width="57.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="406.0" y="558.0">com/go..</text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (1 samples, 0.02%)</title><rect x="403.5" y="531.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="406.5" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (199 samples, 4.81%)</title><rect x="403.8" y="531.0" width="56.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="406.8" y="542.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (199 samples, 4.81%)</title><rect x="403.8" y="515.0" width="56.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="406.8" y="526.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (1 samples, 0.02%)</title><rect x="403.8" y="499.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="406.8" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (198 samples, 4.79%)</title><rect x="404.1" y="499.0" width="56.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="407.1" y="510.0">java/u..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.02%)</title><rect x="404.1" y="483.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="407.1" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (1 samples, 0.02%)</title><rect x="404.1" y="467.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="407.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable$$Lambda$442/658008298.apply (1 samples, 0.02%)</title><rect x="404.1" y="451.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="407.1" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.lambda$iterator$0 (1 samples, 0.02%)</title><rect x="404.1" y="435.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="407.1" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (197 samples, 4.76%)</title><rect x="404.4" y="483.0" width="56.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="407.4" y="494.0">java/u..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (197 samples, 4.76%)</title><rect x="404.4" y="467.0" width="56.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="407.4" y="478.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (197 samples, 4.76%)</title><rect x="404.4" y="451.0" width="56.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="407.4" y="462.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (188 samples, 4.55%)</title><rect x="404.4" y="435.0" width="53.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="407.4" y="446.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (2 samples, 0.05%)</title><rect x="405.5" y="419.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="408.5" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (2 samples, 0.05%)</title><rect x="405.5" y="403.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="408.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable$$Lambda$442/658008298.apply (2 samples, 0.05%)</title><rect x="405.5" y="387.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="408.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.lambda$iterator$0 (2 samples, 0.05%)</title><rect x="405.5" y="371.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="408.5" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (1 samples, 0.02%)</title><rect x="405.5" y="355.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="408.5" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.02%)</title><rect x="405.5" y="339.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="408.5" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="405.5" y="323.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="408.5" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="405.5" y="307.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="408.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="405.5" y="291.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="408.5" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="405.5" y="275.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="408.5" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="405.5" y="259.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="408.5" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="405.5" y="243.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="408.5" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.02%)</title><rect x="405.8" y="355.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="408.8" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="405.8" y="339.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="408.8" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="405.8" y="323.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="408.8" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="405.8" y="307.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="408.8" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="405.8" y="291.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="408.8" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="405.8" y="275.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="408.8" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="405.8" y="259.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="408.8" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="405.8" y="243.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="408.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (182 samples, 4.40%)</title><rect x="406.1" y="419.0" width="51.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="409.1" y="430.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (181 samples, 4.38%)</title><rect x="406.4" y="403.0" width="51.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="409.4" y="414.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (181 samples, 4.38%)</title><rect x="406.4" y="387.0" width="51.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="409.4" y="398.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (5 samples, 0.12%)</title><rect x="406.4" y="371.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="409.4" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (8 samples, 0.19%)</title><rect x="407.8" y="371.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="410.8" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="409.8" y="355.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="412.8" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="409.8" y="339.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="412.8" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="409.8" y="323.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="412.8" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="409.8" y="307.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="412.8" y="318.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="409.8" y="291.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="412.8" y="302.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.02%)</title><rect x="409.8" y="275.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="412.8" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.&lt;init&gt; (1 samples, 0.02%)</title><rect x="410.1" y="371.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="413.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (1 samples, 0.02%)</title><rect x="410.1" y="355.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="413.1" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (60 samples, 1.45%)</title><rect x="410.4" y="371.0" width="17.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="413.4" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.02%)</title><rect x="410.4" y="355.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="413.4" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="410.4" y="339.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="413.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (59 samples, 1.43%)</title><rect x="410.7" y="355.0" width="16.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="413.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (59 samples, 1.43%)</title><rect x="410.7" y="339.0" width="16.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="413.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.07%)</title><rect x="410.7" y="323.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="413.7" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.07%)</title><rect x="410.7" y="307.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="413.7" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.02%)</title><rect x="411.2" y="291.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="414.2" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/SharedSecrets.getJavaLangAccess (1 samples, 0.02%)</title><rect x="411.2" y="275.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="414.2" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.02%)</title><rect x="411.5" y="323.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="414.5" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.02%)</title><rect x="411.5" y="307.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="414.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (49 samples, 1.19%)</title><rect x="411.8" y="323.0" width="14.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="414.8" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.05%)</title><rect x="412.1" y="307.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="415.1" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.05%)</title><rect x="412.1" y="291.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="415.1" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.05%)</title><rect x="412.1" y="275.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="415.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (41 samples, 0.99%)</title><rect x="412.7" y="307.0" width="11.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="415.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (36 samples, 0.87%)</title><rect x="412.7" y="291.0" width="10.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="415.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (36 samples, 0.87%)</title><rect x="412.7" y="275.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="415.7" y="286.0"></text>
</g>
<g>
<title>__pread (33 samples, 0.80%)</title><rect x="413.2" y="259.0" width="9.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="416.2" y="270.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="422.6" y="259.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="425.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (5 samples, 0.12%)</title><rect x="422.9" y="291.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.12%)</title><rect x="424.4" y="307.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="427.4" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.12%)</title><rect x="424.4" y="291.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="427.4" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (5 samples, 0.12%)</title><rect x="424.4" y="275.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="427.4" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (5 samples, 0.12%)</title><rect x="424.4" y="259.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="427.4" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.02%)</title><rect x="425.5" y="243.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="428.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.05%)</title><rect x="425.8" y="323.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="428.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.05%)</title><rect x="425.8" y="307.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="428.8" y="318.0"></text>
</g>
<g>
<title>pthread_self (2 samples, 0.05%)</title><rect x="425.8" y="291.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="428.8" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (4 samples, 0.10%)</title><rect x="426.4" y="323.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="429.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (107 samples, 2.59%)</title><rect x="427.5" y="371.0" width="30.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="430.5" y="382.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (107 samples, 2.59%)</title><rect x="427.5" y="355.0" width="30.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="430.5" y="366.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (8 samples, 0.19%)</title><rect x="427.5" y="339.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="430.5" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (8 samples, 0.19%)</title><rect x="427.5" y="323.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="430.5" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.05%)</title><rect x="429.2" y="307.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="432.2" y="318.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.05%)</title><rect x="429.2" y="291.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="432.2" y="302.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.05%)</title><rect x="429.2" y="275.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="432.2" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (5 samples, 0.12%)</title><rect x="429.8" y="339.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="432.8" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (5 samples, 0.12%)</title><rect x="429.8" y="323.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="432.8" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.05%)</title><rect x="430.6" y="307.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.6" y="318.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.05%)</title><rect x="430.6" y="291.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.6" y="302.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.05%)</title><rect x="430.6" y="275.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="433.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (86 samples, 2.08%)</title><rect x="431.2" y="339.0" width="24.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="434.2" y="350.0">s..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (5 samples, 0.12%)</title><rect x="431.8" y="323.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="434.8" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.05%)</title><rect x="431.8" y="307.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="434.8" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.05%)</title><rect x="431.8" y="291.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="434.8" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.07%)</title><rect x="432.3" y="307.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="435.3" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.07%)</title><rect x="432.3" y="291.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="435.3" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.05%)</title><rect x="432.6" y="275.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="435.6" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (1 samples, 0.02%)</title><rect x="432.6" y="259.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="435.6" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (1 samples, 0.02%)</title><rect x="432.9" y="259.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="435.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (72 samples, 1.74%)</title><rect x="433.2" y="323.0" width="20.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="436.2" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.05%)</title><rect x="433.2" y="307.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="436.2" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.05%)</title><rect x="433.2" y="291.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="436.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.05%)</title><rect x="433.2" y="275.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="436.2" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.05%)</title><rect x="433.2" y="259.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="436.2" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (62 samples, 1.50%)</title><rect x="433.8" y="307.0" width="17.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="436.8" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (62 samples, 1.50%)</title><rect x="433.8" y="291.0" width="17.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="436.8" y="302.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (2 samples, 0.05%)</title><rect x="434.3" y="275.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="437.3" y="286.0"></text>
</g>
<g>
<title>__pread (54 samples, 1.31%)</title><rect x="434.9" y="275.0" width="15.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="437.9" y="286.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="450.3" y="275.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="453.3" y="286.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.07%)</title><rect x="450.6" y="275.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="453.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (8 samples, 0.19%)</title><rect x="451.5" y="307.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="454.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (7 samples, 0.17%)</title><rect x="453.7" y="323.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="456.7" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.17%)</title><rect x="453.7" y="307.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="456.7" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (7 samples, 0.17%)</title><rect x="453.7" y="291.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="456.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (7 samples, 0.17%)</title><rect x="453.7" y="275.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="456.7" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.05%)</title><rect x="455.2" y="259.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="458.2" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (5 samples, 0.12%)</title><rect x="455.7" y="339.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="458.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.05%)</title><rect x="456.6" y="323.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="459.6" y="334.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="456.6" y="307.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="459.6" y="318.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.02%)</title><rect x="456.6" y="291.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="459.6" y="302.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.02%)</title><rect x="456.9" y="307.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="459.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (3 samples, 0.07%)</title><rect x="457.2" y="339.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="460.2" y="350.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="457.7" y="323.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="460.7" y="334.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.02%)</title><rect x="457.7" y="307.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="460.7" y="318.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.02%)</title><rect x="457.7" y="291.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="460.7" y="302.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (9 samples, 0.22%)</title><rect x="458.0" y="435.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="461.0" y="446.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (9 samples, 0.22%)</title><rect x="458.0" y="419.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="461.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (9 samples, 0.22%)</title><rect x="458.0" y="403.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="461.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (9 samples, 0.22%)</title><rect x="458.0" y="387.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="461.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.19%)</title><rect x="458.0" y="371.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="461.0" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.07%)</title><rect x="458.3" y="355.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="461.3" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="458.3" y="339.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="461.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (2 samples, 0.05%)</title><rect x="458.6" y="339.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="461.6" y="350.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.10%)</title><rect x="459.2" y="355.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="462.2" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.05%)</title><rect x="459.5" y="339.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="462.5" y="350.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.02%)</title><rect x="460.0" y="339.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="463.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (1 samples, 0.02%)</title><rect x="460.3" y="371.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="463.3" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.02%)</title><rect x="460.3" y="355.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="463.3" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.02%)</title><rect x="460.6" y="563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="463.6" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="460.9" y="563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="463.9" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.iterator (1 samples, 0.02%)</title><rect x="460.9" y="547.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="463.9" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (1,561 samples, 37.75%)</title><rect x="461.2" y="563.0" width="445.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="464.2" y="574.0">java/util/Collections$UnmodifiableCollection.forEach</text>
</g>
<g>
<title>java/lang/Iterable.forEach (1,561 samples, 37.75%)</title><rect x="461.2" y="547.0" width="445.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="464.2" y="558.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (3 samples, 0.07%)</title><rect x="461.7" y="531.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="464.7" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next (2 samples, 0.05%)</title><rect x="461.7" y="515.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="464.7" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next (2 samples, 0.05%)</title><rect x="461.7" y="499.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="464.7" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.prevEntry (2 samples, 0.05%)</title><rect x="461.7" y="483.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="464.7" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.predecessor (2 samples, 0.05%)</title><rect x="461.7" y="467.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="464.7" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.prevEntry (1 samples, 0.02%)</title><rect x="462.3" y="515.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="465.3" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (1 samples, 0.02%)</title><rect x="462.6" y="531.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="465.6" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (1 samples, 0.02%)</title><rect x="462.6" y="515.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="465.6" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (1 samples, 0.02%)</title><rect x="462.6" y="499.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="465.6" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils$$Lambda$463/1829357065.accept (1,555 samples, 37.61%)</title><rect x="462.9" y="531.0" width="443.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="465.9" y="542.0">ru/mail/polis/utils/IteratorUtils$$Lambda$463/1829357065.accept</text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils.lambda$entryIterators$3 (1,552 samples, 37.53%)</title><rect x="463.7" y="515.0" width="442.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="466.7" y="526.0">ru/mail/polis/utils/IteratorUtils.lambda$entryIterators$3</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.iterator (1,552 samples, 37.53%)</title><rect x="463.7" y="499.0" width="442.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="466.7" y="510.0">ru/mail/polis/dao/impl/tables/SSTable.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt; (1,551 samples, 37.51%)</title><rect x="464.0" y="483.0" width="442.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="467.0" y="494.0">ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getPosition (1,551 samples, 37.51%)</title><rect x="464.0" y="467.0" width="442.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="467.0" y="478.0">ru/mail/polis/dao/impl/tables/SSTable.getPosition</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (30 samples, 0.73%)</title><rect x="464.6" y="451.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="467.6" y="462.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (30 samples, 0.73%)</title><rect x="464.6" y="435.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="467.6" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (18 samples, 0.44%)</title><rect x="468.0" y="419.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="471.0" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (8 samples, 0.19%)</title><rect x="470.6" y="403.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="473.6" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.02%)</title><rect x="472.9" y="403.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="475.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.keyAt (1,519 samples, 36.74%)</title><rect x="473.2" y="451.0" width="433.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="476.2" y="462.0">ru/mail/polis/dao/impl/tables/SSTable.keyAt</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.07%)</title><rect x="473.7" y="435.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="476.7" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="473.7" y="419.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="476.7" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="473.7" y="403.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="476.7" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="474.0" y="387.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="477.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="474.0" y="371.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="477.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="474.0" y="355.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="477.0" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="474.0" y="339.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="477.0" y="350.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.02%)</title><rect x="474.3" y="403.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="477.3" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (24 samples, 0.58%)</title><rect x="474.6" y="435.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="477.6" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.07%)</title><rect x="478.6" y="419.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="481.6" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.07%)</title><rect x="478.6" y="403.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="481.6" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.05%)</title><rect x="478.9" y="387.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="481.9" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="478.9" y="371.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="481.9" y="382.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.02%)</title><rect x="478.9" y="355.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="481.9" y="366.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="478.9" y="339.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="481.9" y="350.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="479.1" y="355.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="482.1" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="479.1" y="339.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="482.1" y="350.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.02%)</title><rect x="479.1" y="323.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="482.1" y="334.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.02%)</title><rect x="479.1" y="307.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="482.1" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.markValue (1 samples, 0.02%)</title><rect x="479.4" y="419.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="482.4" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.15%)</title><rect x="479.7" y="419.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="482.7" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.15%)</title><rect x="479.7" y="403.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="482.7" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.10%)</title><rect x="480.3" y="387.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="483.3" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="481.1" y="371.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="484.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="481.1" y="355.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="484.1" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="481.1" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="484.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (493 samples, 11.92%)</title><rect x="481.4" y="435.0" width="140.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="484.4" y="446.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (14 samples, 0.34%)</title><rect x="481.7" y="419.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="484.7" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.34%)</title><rect x="481.7" y="403.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="484.7" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="482.0" y="387.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="485.0" y="398.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="482.0" y="371.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="485.0" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="482.0" y="355.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="485.0" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="482.0" y="339.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="485.0" y="350.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="482.0" y="323.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="485.0" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.02%)</title><rect x="482.0" y="307.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="485.0" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.29%)</title><rect x="482.3" y="387.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="485.3" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.10%)</title><rect x="484.6" y="371.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="487.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.07%)</title><rect x="484.9" y="355.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="487.9" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.07%)</title><rect x="484.9" y="339.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="487.9" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.07%)</title><rect x="484.9" y="323.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="487.9" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (27 samples, 0.65%)</title><rect x="485.7" y="419.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="488.7" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="487.1" y="403.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="490.1" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="487.1" y="387.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="490.1" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="487.1" y="371.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="490.1" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="487.1" y="355.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="490.1" y="366.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="487.1" y="339.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="490.1" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="487.1" y="323.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="490.1" y="334.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="487.1" y="307.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="490.1" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.05%)</title><rect x="487.4" y="403.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="490.4" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="488.0" y="403.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="491.0" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (18 samples, 0.44%)</title><rect x="488.3" y="403.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="491.3" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (14 samples, 0.34%)</title><rect x="488.8" y="387.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="491.8" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (11 samples, 0.27%)</title><rect x="489.7" y="371.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="492.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.12%)</title><rect x="490.0" y="355.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="493.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.12%)</title><rect x="490.0" y="339.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="493.0" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.05%)</title><rect x="490.8" y="323.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="493.8" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.12%)</title><rect x="491.4" y="355.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="494.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.12%)</title><rect x="491.4" y="339.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="494.4" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.12%)</title><rect x="491.4" y="323.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="494.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.05%)</title><rect x="492.3" y="307.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="495.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.05%)</title><rect x="492.8" y="387.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="495.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (451 samples, 10.91%)</title><rect x="493.4" y="419.0" width="128.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="496.4" y="430.0">sun/nio/ch/FileC..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (445 samples, 10.76%)</title><rect x="494.6" y="403.0" width="126.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="497.6" y="414.0">sun/nio/ch/FileC..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (48 samples, 1.16%)</title><rect x="495.1" y="387.0" width="13.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="498.1" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (47 samples, 1.14%)</title><rect x="495.4" y="371.0" width="13.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="498.4" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.02%)</title><rect x="504.0" y="355.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="507.0" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (16 samples, 0.39%)</title><rect x="504.3" y="355.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="507.3" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (15 samples, 0.36%)</title><rect x="504.5" y="339.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="507.5" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (15 samples, 0.36%)</title><rect x="504.5" y="323.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="507.5" y="334.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.10%)</title><rect x="507.7" y="307.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="510.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.05%)</title><rect x="508.8" y="387.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="511.8" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.05%)</title><rect x="508.8" y="371.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="511.8" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.05%)</title><rect x="508.8" y="355.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="511.8" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.05%)</title><rect x="508.8" y="339.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="511.8" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.05%)</title><rect x="508.8" y="323.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="511.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (356 samples, 8.61%)</title><rect x="509.4" y="387.0" width="101.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="512.4" y="398.0">sun/nio/ch/I..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (15 samples, 0.36%)</title><rect x="510.0" y="371.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="513.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.02%)</title><rect x="510.0" y="355.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="513.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.12%)</title><rect x="510.3" y="355.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="513.3" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.12%)</title><rect x="510.3" y="339.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="513.3" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (9 samples, 0.22%)</title><rect x="511.7" y="355.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="514.7" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (8 samples, 0.19%)</title><rect x="512.0" y="339.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="515.0" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (1 samples, 0.02%)</title><rect x="513.1" y="323.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="516.1" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.07%)</title><rect x="513.4" y="323.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="516.4" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (1 samples, 0.02%)</title><rect x="513.4" y="307.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="516.4" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (2 samples, 0.05%)</title><rect x="513.7" y="307.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="516.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (317 samples, 7.67%)</title><rect x="514.2" y="371.0" width="90.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="517.2" y="382.0">sun/nio/ch..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="514.5" y="355.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="517.5" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="514.5" y="339.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="517.5" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="514.5" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="517.5" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="514.5" y="307.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="517.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (279 samples, 6.75%)</title><rect x="514.8" y="355.0" width="79.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="517.8" y="366.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (279 samples, 6.75%)</title><rect x="514.8" y="339.0" width="79.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="517.8" y="350.0">sun/nio/c..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (5 samples, 0.12%)</title><rect x="516.8" y="323.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="519.8" y="334.0"></text>
</g>
<g>
<title>__pread (255 samples, 6.17%)</title><rect x="518.2" y="323.0" width="72.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="521.2" y="334.0">__pread</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.17%)</title><rect x="591.0" y="323.0" width="2.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="594.0" y="334.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (4 samples, 0.10%)</title><rect x="593.0" y="323.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="596.0" y="334.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.02%)</title><rect x="594.1" y="323.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="597.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (36 samples, 0.87%)</title><rect x="594.4" y="355.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="597.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (22 samples, 0.53%)</title><rect x="604.7" y="371.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="607.7" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (22 samples, 0.53%)</title><rect x="604.7" y="355.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="607.7" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (22 samples, 0.53%)</title><rect x="604.7" y="339.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="607.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (22 samples, 0.53%)</title><rect x="604.7" y="323.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="607.7" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.05%)</title><rect x="610.4" y="307.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="613.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (37 samples, 0.89%)</title><rect x="611.0" y="387.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="614.0" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.07%)</title><rect x="617.0" y="371.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="620.0" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.07%)</title><rect x="617.0" y="355.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="620.0" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.02%)</title><rect x="617.3" y="339.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="620.3" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.02%)</title><rect x="617.6" y="339.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="620.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (13 samples, 0.31%)</title><rect x="617.8" y="371.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="620.8" y="382.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.02%)</title><rect x="621.0" y="355.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="624.0" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="621.3" y="355.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="624.3" y="366.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.02%)</title><rect x="621.3" y="339.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="624.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.05%)</title><rect x="621.5" y="403.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="624.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (997 samples, 24.11%)</title><rect x="622.1" y="435.0" width="284.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="625.1" y="446.0">sun/nio/ch/FileChannelImpl.read</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.ensureOpen (1 samples, 0.02%)</title><rect x="622.1" y="419.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="625.1" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (1 samples, 0.02%)</title><rect x="622.1" y="403.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="625.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (996 samples, 24.09%)</title><rect x="622.4" y="419.0" width="284.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="625.4" y="430.0">sun/nio/ch/FileChannelImpl.readInternal</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (6 samples, 0.15%)</title><rect x="631.8" y="403.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="634.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (62 samples, 1.50%)</title><rect x="633.5" y="403.0" width="17.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="636.5" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (62 samples, 1.50%)</title><rect x="633.5" y="387.0" width="17.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="636.5" y="398.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (8 samples, 0.19%)</title><rect x="637.8" y="371.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="640.8" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (39 samples, 0.94%)</title><rect x="640.1" y="371.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="643.1" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="641.0" y="355.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="644.0" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (35 samples, 0.85%)</title><rect x="641.2" y="355.0" width="10.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="644.2" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (35 samples, 0.85%)</title><rect x="641.2" y="339.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="644.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (19 samples, 0.46%)</title><rect x="651.2" y="403.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="654.2" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (7 samples, 0.17%)</title><rect x="654.6" y="387.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="657.6" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (7 samples, 0.17%)</title><rect x="654.6" y="371.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="657.6" y="382.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.02%)</title><rect x="656.4" y="355.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="659.4" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.02%)</title><rect x="656.4" y="339.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="659.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (788 samples, 19.06%)</title><rect x="656.6" y="403.0" width="224.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="659.6" y="414.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (36 samples, 0.87%)</title><rect x="657.2" y="387.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="660.2" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (26 samples, 0.63%)</title><rect x="657.2" y="371.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="660.2" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (26 samples, 0.63%)</title><rect x="657.2" y="355.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="660.2" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="662.9" y="339.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="665.9" y="350.0"></text>
</g>
<g>
<title>jlong_arraycopy (2 samples, 0.05%)</title><rect x="663.5" y="339.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="666.5" y="350.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="664.1" y="339.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="667.1" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (10 samples, 0.24%)</title><rect x="664.6" y="371.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="667.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (10 samples, 0.24%)</title><rect x="664.6" y="355.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="667.6" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.05%)</title><rect x="666.9" y="339.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="669.9" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (2 samples, 0.05%)</title><rect x="666.9" y="323.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="669.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (692 samples, 16.74%)</title><rect x="667.5" y="387.0" width="197.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.5" y="398.0">sun/nio/ch/IOUtil.readInto..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.12%)</title><rect x="668.3" y="371.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="671.3" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.12%)</title><rect x="668.3" y="355.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="671.3" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.12%)</title><rect x="668.3" y="339.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="671.3" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.12%)</title><rect x="668.3" y="323.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="671.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (620 samples, 14.99%)</title><rect x="669.8" y="371.0" width="176.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="672.8" y="382.0">sun/nio/ch/FileDispatch..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (619 samples, 14.97%)</title><rect x="670.1" y="355.0" width="176.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="673.1" y="366.0">sun/nio/ch/FileDispatch..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (6 samples, 0.15%)</title><rect x="678.0" y="339.0" width="1.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="681.0" y="350.0"></text>
</g>
<g>
<title>__pread (540 samples, 13.06%)</title><rect x="679.8" y="339.0" width="154.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="682.8" y="350.0">__pread</text>
</g>
<g>
<title>__pthread_disable_asynccancel (18 samples, 0.44%)</title><rect x="833.9" y="339.0" width="5.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="836.9" y="350.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (19 samples, 0.46%)</title><rect x="839.0" y="339.0" width="5.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="842.0" y="350.0"></text>
</g>
<g>
<title>convertReturnVal (3 samples, 0.07%)</title><rect x="844.4" y="339.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="847.4" y="350.0"></text>
</g>
<g>
<title>fdval (4 samples, 0.10%)</title><rect x="845.3" y="339.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="848.3" y="350.0"></text>
</g>
<g>
<title>pread64@plt (1 samples, 0.02%)</title><rect x="846.4" y="339.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="849.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (64 samples, 1.55%)</title><rect x="846.7" y="371.0" width="18.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="849.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (58 samples, 1.40%)</title><rect x="865.0" y="387.0" width="16.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="868.0" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (52 samples, 1.26%)</title><rect x="865.0" y="371.0" width="14.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="868.0" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (52 samples, 1.26%)</title><rect x="865.0" y="355.0" width="14.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="868.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (52 samples, 1.26%)</title><rect x="865.0" y="339.0" width="14.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="868.0" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (5 samples, 0.12%)</title><rect x="878.4" y="323.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="881.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (6 samples, 0.15%)</title><rect x="879.8" y="371.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="882.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (87 samples, 2.10%)</title><rect x="881.5" y="403.0" width="24.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="884.5" y="414.0">s..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.12%)</title><rect x="897.2" y="387.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="900.2" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.07%)</title><rect x="897.2" y="371.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="900.2" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.02%)</title><rect x="897.5" y="355.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="900.5" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.02%)</title><rect x="897.5" y="339.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="900.5" y="350.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.02%)</title><rect x="897.8" y="355.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="900.8" y="366.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.02%)</title><rect x="898.1" y="371.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="901.1" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.02%)</title><rect x="898.1" y="355.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="901.1" y="366.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.02%)</title><rect x="898.4" y="371.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="901.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (27 samples, 0.65%)</title><rect x="898.6" y="387.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="901.6" y="398.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (2 samples, 0.05%)</title><rect x="905.5" y="371.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="908.5" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="906.1" y="371.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="909.1" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.02%)</title><rect x="906.1" y="355.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="909.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.02%)</title><rect x="906.3" y="403.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="909.3" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="906.3" y="387.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="909.3" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.02%)</title><rect x="906.3" y="371.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="909.3" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.02%)</title><rect x="906.3" y="355.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="909.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (38 samples, 0.92%)</title><rect x="906.6" y="563.0" width="10.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="909.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (38 samples, 0.92%)</title><rect x="906.6" y="547.0" width="10.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="909.6" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (38 samples, 0.92%)</title><rect x="906.6" y="531.0" width="10.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="909.6" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (2 samples, 0.05%)</title><rect x="906.6" y="515.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="909.6" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (2 samples, 0.05%)</title><rect x="906.6" y="499.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="909.6" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (2 samples, 0.05%)</title><rect x="906.6" y="483.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="909.6" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2 samples, 0.05%)</title><rect x="906.6" y="467.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="909.6" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2 samples, 0.05%)</title><rect x="906.6" y="451.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="909.6" y="462.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.05%)</title><rect x="906.6" y="435.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="909.6" y="446.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.05%)</title><rect x="906.6" y="419.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="909.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (2 samples, 0.05%)</title><rect x="906.6" y="403.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="909.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (2 samples, 0.05%)</title><rect x="906.6" y="387.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="909.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.05%)</title><rect x="906.6" y="371.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="909.6" y="382.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.05%)</title><rect x="906.6" y="355.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="909.6" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.05%)</title><rect x="906.6" y="339.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="909.6" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.02%)</title><rect x="906.9" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="909.9" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (36 samples, 0.87%)</title><rect x="907.2" y="515.0" width="10.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="910.2" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (36 samples, 0.87%)</title><rect x="907.2" y="499.0" width="10.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="910.2" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (36 samples, 0.87%)</title><rect x="907.2" y="483.0" width="10.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="910.2" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (36 samples, 0.87%)</title><rect x="907.2" y="467.0" width="10.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="910.2" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (36 samples, 0.87%)</title><rect x="907.2" y="451.0" width="10.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="910.2" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (36 samples, 0.87%)</title><rect x="907.2" y="435.0" width="10.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="910.2" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (36 samples, 0.87%)</title><rect x="907.2" y="419.0" width="10.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="910.2" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (36 samples, 0.87%)</title><rect x="907.2" y="403.0" width="10.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="910.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (36 samples, 0.87%)</title><rect x="907.2" y="387.0" width="10.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="910.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (36 samples, 0.87%)</title><rect x="907.2" y="371.0" width="10.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="910.2" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.02%)</title><rect x="907.5" y="355.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="910.5" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="907.5" y="339.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="910.5" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="907.5" y="323.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="910.5" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="907.5" y="307.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="910.5" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="907.5" y="291.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="910.5" y="302.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.02%)</title><rect x="907.5" y="275.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="910.5" y="286.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="907.5" y="259.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="910.5" y="270.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.02%)</title><rect x="907.5" y="243.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="910.5" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.02%)</title><rect x="907.8" y="355.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="910.8" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (12 samples, 0.29%)</title><rect x="908.1" y="355.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="911.1" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.02%)</title><rect x="908.1" y="339.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="911.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (11 samples, 0.27%)</title><rect x="908.3" y="339.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="911.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (11 samples, 0.27%)</title><rect x="908.3" y="323.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="911.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.02%)</title><rect x="908.3" y="307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="911.3" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.02%)</title><rect x="908.3" y="291.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="911.3" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.02%)</title><rect x="908.3" y="275.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="911.3" y="286.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.02%)</title><rect x="908.3" y="259.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="911.3" y="270.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.02%)</title><rect x="908.3" y="243.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="911.3" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (8 samples, 0.19%)</title><rect x="908.6" y="307.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="911.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (8 samples, 0.19%)</title><rect x="908.6" y="291.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="911.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (7 samples, 0.17%)</title><rect x="908.6" y="275.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="911.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (7 samples, 0.17%)</title><rect x="908.6" y="259.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="911.6" y="270.0"></text>
</g>
<g>
<title>__pread (7 samples, 0.17%)</title><rect x="908.6" y="243.0" width="2.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="911.6" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.02%)</title><rect x="910.6" y="275.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="913.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.05%)</title><rect x="910.9" y="307.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="913.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.02%)</title><rect x="911.2" y="291.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="914.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (21 samples, 0.51%)</title><rect x="911.5" y="355.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="914.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (21 samples, 0.51%)</title><rect x="911.5" y="339.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="914.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.07%)</title><rect x="911.5" y="323.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="914.5" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.07%)</title><rect x="911.5" y="307.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="914.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.05%)</title><rect x="912.3" y="323.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="915.3" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.05%)</title><rect x="912.3" y="307.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="915.3" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.02%)</title><rect x="912.6" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="915.6" y="302.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.02%)</title><rect x="912.6" y="275.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="915.6" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.02%)</title><rect x="912.6" y="259.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="915.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (14 samples, 0.34%)</title><rect x="912.9" y="323.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="915.9" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.02%)</title><rect x="912.9" y="307.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="915.9" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.02%)</title><rect x="912.9" y="291.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="915.9" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.02%)</title><rect x="912.9" y="275.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="915.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (12 samples, 0.29%)</title><rect x="913.2" y="307.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="916.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (11 samples, 0.27%)</title><rect x="913.2" y="291.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="916.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (11 samples, 0.27%)</title><rect x="913.2" y="275.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="916.2" y="286.0"></text>
</g>
<g>
<title>__pread (11 samples, 0.27%)</title><rect x="913.2" y="259.0" width="3.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="916.2" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.02%)</title><rect x="916.3" y="291.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="919.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.02%)</title><rect x="916.6" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="919.6" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.02%)</title><rect x="916.6" y="291.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="919.6" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.02%)</title><rect x="916.6" y="275.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="919.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (1 samples, 0.02%)</title><rect x="916.6" y="259.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="919.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.05%)</title><rect x="916.9" y="323.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="919.9" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.iterator (27 samples, 0.65%)</title><rect x="917.5" y="563.0" width="7.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="920.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (27 samples, 0.65%)</title><rect x="917.5" y="547.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="920.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (27 samples, 0.65%)</title><rect x="917.5" y="531.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="920.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (27 samples, 0.65%)</title><rect x="917.5" y="515.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="920.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (27 samples, 0.65%)</title><rect x="917.5" y="499.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (27 samples, 0.65%)</title><rect x="917.5" y="483.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="920.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (25 samples, 0.60%)</title><rect x="918.0" y="467.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="921.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (13 samples, 0.31%)</title><rect x="921.5" y="451.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="924.5" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 0.31%)</title><rect x="921.5" y="435.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="924.5" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (12 samples, 0.29%)</title><rect x="921.8" y="419.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="924.8" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (11 samples, 0.27%)</title><rect x="922.0" y="403.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="925.0" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.05%)</title><rect x="924.6" y="387.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="927.6" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.02%)</title><rect x="924.9" y="371.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="927.9" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.entryToResponse (4 samples, 0.10%)</title><rect x="925.2" y="595.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="928.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.getTimestamp (3 samples, 0.07%)</title><rect x="925.5" y="579.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="928.5" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/116669570.linkToTargetMethod (3 samples, 0.07%)</title><rect x="925.5" y="563.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="928.5" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1675409185.invoke (3 samples, 0.07%)</title><rect x="925.5" y="547.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="928.5" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1795816257.invokeStatic (3 samples, 0.07%)</title><rect x="925.5" y="531.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="928.5" y="542.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixLen (3 samples, 0.07%)</title><rect x="925.5" y="515.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="928.5" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.stringSize (2 samples, 0.05%)</title><rect x="925.7" y="499.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="928.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (29 samples, 0.70%)</title><rect x="926.3" y="643.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="929.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (27 samples, 0.65%)</title><rect x="926.6" y="627.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="929.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (16 samples, 0.39%)</title><rect x="926.6" y="611.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="929.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (16 samples, 0.39%)</title><rect x="926.6" y="595.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="929.6" y="606.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="926.6" y="579.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="929.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (15 samples, 0.36%)</title><rect x="926.9" y="579.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="929.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 0.36%)</title><rect x="926.9" y="563.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="929.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (3 samples, 0.07%)</title><rect x="926.9" y="547.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="929.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.02%)</title><rect x="926.9" y="531.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="929.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.05%)</title><rect x="927.2" y="531.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="930.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.05%)</title><rect x="927.2" y="515.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="930.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.02%)</title><rect x="927.2" y="499.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="930.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.02%)</title><rect x="927.2" y="483.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="930.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.02%)</title><rect x="927.2" y="467.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="930.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.02%)</title><rect x="927.2" y="451.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="930.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.02%)</title><rect x="927.2" y="435.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="930.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.02%)</title><rect x="927.5" y="499.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="930.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.02%)</title><rect x="927.5" y="483.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="930.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.02%)</title><rect x="927.5" y="467.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="930.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.02%)</title><rect x="927.5" y="451.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="930.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.02%)</title><rect x="927.5" y="435.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="930.5" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.02%)</title><rect x="927.5" y="419.0" width="0.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="930.5" y="430.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.02%)</title><rect x="927.5" y="403.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="930.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$206/2123650476.accept (12 samples, 0.29%)</title><rect x="927.7" y="547.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="930.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$respond$0 (12 samples, 0.29%)</title><rect x="927.7" y="531.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="930.7" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.sendResponse (12 samples, 0.29%)</title><rect x="927.7" y="515.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="930.7" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (12 samples, 0.29%)</title><rect x="927.7" y="499.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="930.7" y="510.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.02%)</title><rect x="928.0" y="483.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="931.0" y="494.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.02%)</title><rect x="928.0" y="467.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="931.0" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.02%)</title><rect x="928.0" y="451.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="931.0" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="928.0" y="435.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="931.0" y="446.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="928.0" y="419.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="931.0" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (8 samples, 0.19%)</title><rect x="928.3" y="483.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="931.3" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.19%)</title><rect x="928.3" y="467.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="931.3" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.19%)</title><rect x="928.3" y="451.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="931.3" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (7 samples, 0.17%)</title><rect x="928.6" y="435.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="931.6" y="446.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (7 samples, 0.17%)</title><rect x="928.6" y="419.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="931.6" y="430.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (4 samples, 0.10%)</title><rect x="928.9" y="403.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="931.9" y="414.0"></text>
</g>
<g>
<title>WeakPreserveExceptionMark::WeakPreserveExceptionMark(Thread*) (1 samples, 0.02%)</title><rect x="929.2" y="387.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="932.2" y="398.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.02%)</title><rect x="929.5" y="387.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="932.5" y="398.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.02%)</title><rect x="929.7" y="387.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="932.7" y="398.0"></text>
</g>
<g>
<title>__libc_send (1 samples, 0.02%)</title><rect x="930.0" y="403.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="933.0" y="414.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="930.3" y="403.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="933.3" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.05%)</title><rect x="930.6" y="483.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="933.6" y="494.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.02%)</title><rect x="930.9" y="467.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="933.9" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.02%)</title><rect x="930.9" y="451.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="933.9" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$454/2018724675.apply (11 samples, 0.27%)</title><rect x="931.2" y="611.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="934.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.entriesToResponse (11 samples, 0.27%)</title><rect x="931.2" y="595.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="934.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.entryToResponse (4 samples, 0.10%)</title><rect x="931.2" y="579.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="934.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.getTimestamp (2 samples, 0.05%)</title><rect x="931.5" y="563.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="934.5" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/116669570.linkToTargetMethod (2 samples, 0.05%)</title><rect x="931.5" y="547.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="934.5" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1675409185.invoke (2 samples, 0.05%)</title><rect x="931.5" y="531.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="934.5" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="931.5" y="515.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="934.5" y="526.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (1 samples, 0.02%)</title><rect x="931.5" y="499.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="934.5" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="931.5" y="483.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="934.5" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="931.5" y="467.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="934.5" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="931.5" y="451.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="934.5" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="931.5" y="435.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="934.5" y="446.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="931.5" y="419.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="934.5" y="430.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="931.5" y="403.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="934.5" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)</title><rect x="931.5" y="387.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="934.5" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.02%)</title><rect x="931.5" y="371.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="934.5" y="382.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.02%)</title><rect x="931.5" y="355.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="934.5" y="366.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.02%)</title><rect x="931.5" y="339.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="934.5" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1795816257.invokeStatic (1 samples, 0.02%)</title><rect x="931.7" y="515.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="934.7" y="526.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixLen (1 samples, 0.02%)</title><rect x="931.7" y="499.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="934.7" y="510.0"></text>
</g>
<g>
<title>java/lang/Long.stringSize (1 samples, 0.02%)</title><rect x="931.7" y="483.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="934.7" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.nonemptyResponse (1 samples, 0.02%)</title><rect x="932.0" y="563.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="935.0" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.02%)</title><rect x="932.0" y="547.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="935.0" y="558.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="932.0" y="531.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="935.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.mergeEntries (7 samples, 0.17%)</title><rect x="932.3" y="579.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="935.3" y="590.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.02%)</title><rect x="932.3" y="563.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="935.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.spliterator (1 samples, 0.02%)</title><rect x="932.3" y="547.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="935.3" y="558.0"></text>
</g>
<g>
<title>java/util/Spliterators.spliterator (1 samples, 0.02%)</title><rect x="932.3" y="531.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="935.3" y="542.0"></text>
</g>
<g>
<title>java/util/Spliterators$ArraySpliterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="932.3" y="515.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="935.3" y="526.0"></text>
</g>
<g>
<title>java/util/Spliterators$ArraySpliterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="932.3" y="499.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="935.3" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (6 samples, 0.15%)</title><rect x="932.6" y="563.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="935.6" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (6 samples, 0.15%)</title><rect x="932.6" y="547.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="935.6" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (6 samples, 0.15%)</title><rect x="932.6" y="531.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="935.6" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (6 samples, 0.15%)</title><rect x="932.6" y="515.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="935.6" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (6 samples, 0.15%)</title><rect x="932.6" y="499.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="935.6" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (6 samples, 0.15%)</title><rect x="932.6" y="483.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="935.6" y="494.0"></text>
</g>
<g>
<title>java/util/Spliterators$ArraySpliterator.forEachRemaining (2 samples, 0.05%)</title><rect x="932.9" y="467.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="935.9" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.05%)</title><rect x="932.9" y="451.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="935.9" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry$$Lambda$480/1206619819.test (2 samples, 0.05%)</title><rect x="932.9" y="435.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="935.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.lambda$mergeEntries$0 (1 samples, 0.02%)</title><rect x="933.2" y="419.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="936.2" y="430.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.02%)</title><rect x="933.5" y="467.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="936.5" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry$$Lambda$480/1206619819.test (1 samples, 0.02%)</title><rect x="933.5" y="451.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="936.5" y="462.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.isKnown (2 samples, 0.05%)</title><rect x="933.7" y="467.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="936.7" y="478.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="933.7" y="451.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="936.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.02%)</title><rect x="934.3" y="627.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="937.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.02%)</title><rect x="934.3" y="611.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="937.3" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/FuturesUtils$$Lambda$192/574997146.accept (1 samples, 0.02%)</title><rect x="934.3" y="595.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="937.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/FuturesUtils.lambda$atLeastAsync$0 (1 samples, 0.02%)</title><rect x="934.3" y="579.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="937.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.02%)</title><rect x="934.3" y="563.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="937.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.02%)</title><rect x="934.3" y="547.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="937.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (1 samples, 0.02%)</title><rect x="934.3" y="531.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="937.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.02%)</title><rect x="934.3" y="515.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="937.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.02%)</title><rect x="934.3" y="499.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="937.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.02%)</title><rect x="934.3" y="483.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="937.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title><rect x="934.3" y="467.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="937.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="934.3" y="451.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="937.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="934.3" y="435.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="937.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="934.3" y="419.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="937.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="934.3" y="403.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="937.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="934.3" y="387.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="937.3" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.02%)</title><rect x="934.3" y="371.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="937.3" y="382.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.02%)</title><rect x="934.3" y="355.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="937.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (141 samples, 3.41%)</title><rect x="934.6" y="643.0" width="40.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="937.6" y="654.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (132 samples, 3.19%)</title><rect x="937.2" y="627.0" width="37.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="940.2" y="638.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (86 samples, 2.08%)</title><rect x="940.0" y="611.0" width="24.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="943.0" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (13 samples, 0.31%)</title><rect x="940.0" y="595.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="943.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 0.31%)</title><rect x="940.0" y="579.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="943.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 0.31%)</title><rect x="940.0" y="563.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="943.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 0.31%)</title><rect x="940.0" y="547.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="943.0" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (13 samples, 0.31%)</title><rect x="940.0" y="531.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="943.0" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.07%)</title><rect x="940.0" y="515.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="943.0" y="526.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="940.0" y="499.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="943.0" y="510.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="940.3" y="499.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="943.3" y="510.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="940.6" y="499.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="943.6" y="510.0"></text>
</g>
<g>
<title>__pthread_cond_signal (10 samples, 0.24%)</title><rect x="940.9" y="515.0" width="2.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="943.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.02%)</title><rect x="943.7" y="595.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="946.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.02%)</title><rect x="943.7" y="579.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="946.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.02%)</title><rect x="943.7" y="563.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="946.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (70 samples, 1.69%)</title><rect x="944.0" y="595.0" width="20.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="947.0" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (69 samples, 1.67%)</title><rect x="944.3" y="579.0" width="19.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="947.3" y="590.0"></text>
</g>
<g>
<title>Unsafe_Park (41 samples, 0.99%)</title><rect x="944.6" y="563.0" width="11.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="947.6" y="574.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.07%)</title><rect x="945.2" y="547.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="948.2" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (11 samples, 0.27%)</title><rect x="946.0" y="547.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="949.0" y="558.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.10%)</title><rect x="947.4" y="531.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="950.4" y="542.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="948.3" y="515.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="951.3" y="526.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.05%)</title><rect x="948.6" y="531.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="951.6" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.05%)</title><rect x="949.1" y="547.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="952.1" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.07%)</title><rect x="949.7" y="547.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="952.7" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="950.6" y="547.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="953.6" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (16 samples, 0.39%)</title><rect x="950.9" y="547.0" width="4.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="953.9" y="558.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.07%)</title><rect x="955.4" y="547.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="958.4" y="558.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.58%)</title><rect x="956.3" y="563.0" width="6.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="959.3" y="574.0"></text>
</g>
<g>
<title>__condvar_dec_grefs (4 samples, 0.10%)</title><rect x="956.3" y="547.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="959.3" y="558.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.07%)</title><rect x="957.4" y="547.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="960.4" y="558.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (17 samples, 0.41%)</title><rect x="958.3" y="547.0" width="4.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="961.3" y="558.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.07%)</title><rect x="963.1" y="563.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="966.1" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="964.0" y="595.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="967.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.02%)</title><rect x="964.6" y="611.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="967.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.02%)</title><rect x="964.6" y="595.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="967.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.02%)</title><rect x="964.6" y="579.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="967.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="964.6" y="563.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="967.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="964.6" y="547.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="967.6" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="964.6" y="531.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="967.6" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="964.6" y="515.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="967.6" y="526.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.02%)</title><rect x="964.6" y="499.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="967.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (35 samples, 0.85%)</title><rect x="964.8" y="611.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="967.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (35 samples, 0.85%)</title><rect x="964.8" y="595.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="967.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (35 samples, 0.85%)</title><rect x="964.8" y="579.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="967.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (32 samples, 0.77%)</title><rect x="965.7" y="563.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="968.7" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (32 samples, 0.77%)</title><rect x="965.7" y="547.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="968.7" y="558.0"></text>
</g>
<g>
<title>Unsafe_Unpark (15 samples, 0.36%)</title><rect x="966.0" y="531.0" width="4.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="969.0" y="542.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="966.3" y="515.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="969.3" y="526.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.07%)</title><rect x="966.6" y="515.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="969.6" y="526.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="967.4" y="515.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="970.4" y="526.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.02%)</title><rect x="967.7" y="515.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="970.7" y="526.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.05%)</title><rect x="968.0" y="515.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="971.0" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_lock (6 samples, 0.15%)</title><rect x="968.6" y="515.0" width="1.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="971.6" y="526.0"></text>
</g>
<g>
<title>__pthread_cond_signal (16 samples, 0.39%)</title><rect x="970.3" y="531.0" width="4.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="973.3" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$344/2115454959.run (49 samples, 1.19%)</title><rect x="974.8" y="643.0" width="14.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="977.8" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.requestMore (49 samples, 1.19%)</title><rect x="974.8" y="627.0" width="14.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="977.8" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.requestMore (49 samples, 1.19%)</title><rect x="974.8" y="611.0" width="14.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="977.8" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$Http1WriteSubscription.request (46 samples, 1.11%)</title><rect x="975.7" y="595.0" width="13.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="978.7" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (46 samples, 1.11%)</title><rect x="975.7" y="579.0" width="13.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="978.7" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (43 samples, 1.04%)</title><rect x="976.5" y="563.0" width="12.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="979.5" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (43 samples, 1.04%)</title><rect x="976.5" y="547.0" width="12.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="979.5" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (43 samples, 1.04%)</title><rect x="976.5" y="531.0" width="12.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="979.5" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (43 samples, 1.04%)</title><rect x="976.5" y="515.0" width="12.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="979.5" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (42 samples, 1.02%)</title><rect x="976.5" y="499.0" width="12.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="979.5" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$WriteTask.run (42 samples, 1.02%)</title><rect x="976.5" y="483.0" width="12.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="979.5" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.getOutgoing (20 samples, 0.48%)</title><rect x="977.4" y="467.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="980.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeAsync (18 samples, 0.44%)</title><rect x="977.4" y="451.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="980.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.unlink (1 samples, 0.02%)</title><rect x="978.0" y="435.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="981.0" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (15 samples, 0.36%)</title><rect x="978.3" y="435.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="981.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (13 samples, 0.31%)</title><rect x="978.3" y="419.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="981.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (12 samples, 0.29%)</title><rect x="978.5" y="403.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="981.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (5 samples, 0.12%)</title><rect x="978.5" y="387.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="981.5" y="398.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="978.5" y="371.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="981.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.05%)</title><rect x="979.1" y="371.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="982.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (2 samples, 0.05%)</title><rect x="979.1" y="355.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="982.1" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$372/98170111.apply (1 samples, 0.02%)</title><rect x="979.7" y="371.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="982.7" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$sendRequestBody$6 (1 samples, 0.02%)</title><rect x="979.7" y="355.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="982.7" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.getResponseAsync (1 samples, 0.02%)</title><rect x="979.7" y="339.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="982.7" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readHeadersAsync (1 samples, 0.02%)</title><rect x="979.7" y="323.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="982.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApplyAsync (1 samples, 0.02%)</title><rect x="979.7" y="307.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="982.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyStage (1 samples, 0.02%)</title><rect x="979.7" y="291.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="982.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.02%)</title><rect x="979.7" y="275.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="982.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (5 samples, 0.12%)</title><rect x="980.0" y="387.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="983.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (5 samples, 0.12%)</title><rect x="980.0" y="371.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="983.0" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$312/838027427.apply (5 samples, 0.12%)</title><rect x="980.0" y="355.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="983.0" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$7 (5 samples, 0.12%)</title><rect x="980.0" y="339.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="983.0" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (5 samples, 0.12%)</title><rect x="980.0" y="323.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="983.0" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$204/1335605778.apply (5 samples, 0.12%)</title><rect x="980.0" y="307.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="983.0" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$8 (5 samples, 0.12%)</title><rect x="980.0" y="291.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="983.0" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendHeadersAsync (5 samples, 0.12%)</title><rect x="980.0" y="275.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="983.0" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.&lt;init&gt; (5 samples, 0.12%)</title><rect x="980.0" y="259.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="983.0" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.&lt;init&gt; (3 samples, 0.07%)</title><rect x="980.3" y="243.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="983.3" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.&lt;init&gt; (1 samples, 0.02%)</title><rect x="981.1" y="243.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="984.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniRelay.tryFire (1 samples, 0.02%)</title><rect x="981.4" y="387.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="984.4" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$356/1019675645.get (1 samples, 0.02%)</title><rect x="981.7" y="387.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="984.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniRelay.tryFire (1 samples, 0.02%)</title><rect x="982.0" y="419.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="985.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.02%)</title><rect x="982.0" y="403.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="985.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.02%)</title><rect x="982.0" y="387.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="985.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.02%)</title><rect x="982.3" y="419.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="985.3" y="430.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="982.3" y="403.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="985.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.pollFirst (2 samples, 0.05%)</title><rect x="982.5" y="451.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="985.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.unlink (1 samples, 0.02%)</title><rect x="982.8" y="435.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="985.8" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (18 samples, 0.44%)</title><rect x="983.1" y="467.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="986.1" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (18 samples, 0.44%)</title><rect x="983.1" y="451.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="986.1" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onNext (18 samples, 0.44%)</title><rect x="983.1" y="435.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="986.1" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.tryFlushCurrent (18 samples, 0.44%)</title><rect x="983.1" y="419.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="986.1" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$375/1468071988.run (2 samples, 0.05%)</title><rect x="983.1" y="403.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="986.1" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.requestMore (2 samples, 0.05%)</title><rect x="983.1" y="387.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="986.1" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.requestMore (1 samples, 0.02%)</title><rect x="983.4" y="371.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="986.4" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.writeAvailable (16 samples, 0.39%)</title><rect x="983.7" y="403.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="986.7" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (14 samples, 0.34%)</title><rect x="984.0" y="387.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="987.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (14 samples, 0.34%)</title><rect x="984.0" y="371.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="987.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (14 samples, 0.34%)</title><rect x="984.0" y="355.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="987.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (14 samples, 0.34%)</title><rect x="984.0" y="339.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="987.0" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.05%)</title><rect x="984.0" y="323.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="987.0" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.05%)</title><rect x="984.0" y="307.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="987.0" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (2 samples, 0.05%)</title><rect x="984.0" y="291.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="987.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (12 samples, 0.29%)</title><rect x="984.5" y="323.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="987.5" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="985.4" y="307.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="988.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (8 samples, 0.19%)</title><rect x="985.7" y="307.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="988.7" y="318.0"></text>
</g>
<g>
<title>__GI___writev (7 samples, 0.17%)</title><rect x="986.0" y="291.0" width="2.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="989.0" y="302.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.02%)</title><rect x="988.0" y="387.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="991.0" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.tryDecrement (1 samples, 0.02%)</title><rect x="988.2" y="467.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="991.2" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.decreaseAndGet (1 samples, 0.02%)</title><rect x="988.2" y="451.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="991.2" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (1 samples, 0.02%)</title><rect x="988.5" y="499.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="991.5" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (237 samples, 5.73%)</title><rect x="988.8" y="643.0" width="67.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="991.8" y="654.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (237 samples, 5.73%)</title><rect x="988.8" y="627.0" width="67.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="991.8" y="638.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (97 samples, 2.35%)</title><rect x="988.8" y="611.0" width="27.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="991.8" y="622.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$270/1387273586.run (97 samples, 2.35%)</title><rect x="988.8" y="595.0" width="27.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="991.8" y="606.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (97 samples, 2.35%)</title><rect x="988.8" y="579.0" width="27.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="991.8" y="590.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.checkRequestMore (9 samples, 0.22%)</title><rect x="989.7" y="563.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="992.7" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.requestMore (9 samples, 0.22%)</title><rect x="989.7" y="547.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="992.7" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.request (1 samples, 0.02%)</title><rect x="989.7" y="531.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="992.7" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.request (8 samples, 0.19%)</title><rect x="990.0" y="531.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="993.0" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.request (8 samples, 0.19%)</title><rect x="990.0" y="515.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="993.0" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/116669570.linkToTargetMethod (1 samples, 0.02%)</title><rect x="990.0" y="499.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="993.0" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/454884231.invoke (1 samples, 0.02%)</title><rect x="990.0" y="483.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="993.0" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="990.0" y="467.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="993.0" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.02%)</title><rect x="990.0" y="451.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="993.0" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (1 samples, 0.02%)</title><rect x="990.0" y="435.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="993.0" y="446.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="990.0" y="419.0" width="0.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="993.0" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.resumeReadEvent (7 samples, 0.17%)</title><rect x="990.2" y="499.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="993.2" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.resumeEvent (7 samples, 0.17%)</title><rect x="990.2" y="483.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="993.2" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (7 samples, 0.17%)</title><rect x="990.2" y="467.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="993.2" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (7 samples, 0.17%)</title><rect x="990.2" y="451.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="993.2" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="990.5" y="435.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="993.5" y="446.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.02%)</title><rect x="990.5" y="419.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="993.5" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (5 samples, 0.12%)</title><rect x="990.8" y="435.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="993.8" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.07%)</title><rect x="991.4" y="419.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="994.4" y="430.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.02%)</title><rect x="991.4" y="403.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="994.4" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.05%)</title><rect x="991.7" y="403.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="994.7" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.05%)</title><rect x="991.7" y="387.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="994.7" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.tryAsyncReceive (85 samples, 2.06%)</title><rect x="992.2" y="563.0" width="24.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="995.2" y="574.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1AsyncDelegateSubscription.request (1 samples, 0.02%)</title><rect x="992.2" y="547.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="995.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="992.2" y="531.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="995.2" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (84 samples, 2.03%)</title><rect x="992.5" y="547.0" width="24.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="995.5" y="558.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (84 samples, 2.03%)</title><rect x="992.5" y="531.0" width="24.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="995.5" y="542.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (84 samples, 2.03%)</title><rect x="992.5" y="515.0" width="24.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="995.5" y="526.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (44 samples, 1.06%)</title><rect x="992.5" y="499.0" width="12.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="995.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (44 samples, 1.06%)</title><rect x="992.5" y="483.0" width="12.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="995.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (43 samples, 1.04%)</title><rect x="992.5" y="467.0" width="12.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="995.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (41 samples, 0.99%)</title><rect x="992.5" y="451.0" width="11.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="995.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (41 samples, 0.99%)</title><rect x="992.5" y="435.0" width="11.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="995.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (40 samples, 0.97%)</title><rect x="992.5" y="419.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="995.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (39 samples, 0.94%)</title><rect x="992.5" y="403.0" width="11.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="995.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (35 samples, 0.85%)</title><rect x="992.5" y="387.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="995.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (35 samples, 0.85%)</title><rect x="992.5" y="371.0" width="10.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="995.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (24 samples, 0.58%)</title><rect x="992.5" y="355.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="995.5" y="366.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="992.5" y="339.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="995.5" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$167/1947942813.apply (17 samples, 0.41%)</title><rect x="992.8" y="339.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="995.8" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$4 (16 samples, 0.39%)</title><rect x="993.1" y="323.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="996.1" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.readBodyAsync (16 samples, 0.39%)</title><rect x="993.1" y="307.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="996.1" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.readBodyAsync (16 samples, 0.39%)</title><rect x="993.1" y="291.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="996.1" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readBody (10 samples, 0.24%)</title><rect x="993.1" y="275.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="996.1" y="286.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValueAsLong (3 samples, 0.07%)</title><rect x="993.1" y="259.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="996.1" y="270.0"></text>
</g>
<g>
<title>java/util/stream/LongPipeline.findFirst (3 samples, 0.07%)</title><rect x="993.1" y="243.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="996.1" y="254.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.07%)</title><rect x="993.1" y="227.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="996.1" y="238.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (3 samples, 0.07%)</title><rect x="993.1" y="211.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="996.1" y="222.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.07%)</title><rect x="993.1" y="195.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="996.1" y="206.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.07%)</title><rect x="993.1" y="179.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="996.1" y="190.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.05%)</title><rect x="993.4" y="163.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="996.4" y="174.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.02%)</title><rect x="993.4" y="147.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="996.4" y="158.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.tryAdvance (1 samples, 0.02%)</title><rect x="993.4" y="131.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="996.4" y="142.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$5$1.accept (1 samples, 0.02%)</title><rect x="993.4" y="115.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="996.4" y="126.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$389/1012968040.applyAsLong (1 samples, 0.02%)</title><rect x="993.4" y="99.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="996.4" y="110.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.02%)</title><rect x="993.4" y="83.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="996.4" y="94.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (1 samples, 0.02%)</title><rect x="993.4" y="67.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="996.4" y="78.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="993.4" y="51.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="996.4" y="62.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.02%)</title><rect x="993.7" y="147.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="996.7" y="158.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (7 samples, 0.17%)</title><rect x="994.0" y="259.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="997.0" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$397/1581807967.run (7 samples, 0.17%)</title><rect x="994.0" y="243.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="997.0" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$3 (7 samples, 0.17%)</title><rect x="994.0" y="227.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="997.0" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.subscribe (1 samples, 0.02%)</title><rect x="994.0" y="211.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="997.0" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="994.0" y="195.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="997.0" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="994.0" y="179.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="997.0" y="190.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.addTrailingOperation (6 samples, 0.15%)</title><rect x="994.2" y="211.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="997.2" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations.add (6 samples, 0.15%)</title><rect x="994.2" y="195.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="997.2" y="206.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.put (6 samples, 0.15%)</title><rect x="994.2" y="179.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="997.2" y="190.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.hash (6 samples, 0.15%)</title><rect x="994.2" y="163.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="997.2" y="174.0"></text>
</g>
<g>
<title>java/lang/System.identityHashCode (6 samples, 0.15%)</title><rect x="994.2" y="147.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="997.2" y="158.0"></text>
</g>
<g>
<title>JVM_IHashCode (4 samples, 0.10%)</title><rect x="994.5" y="131.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="997.5" y="142.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (2 samples, 0.05%)</title><rect x="994.8" y="115.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="997.8" y="126.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.02%)</title><rect x="994.8" y="99.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="997.8" y="110.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.02%)</title><rect x="995.1" y="99.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="998.1" y="110.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="995.4" y="115.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="998.4" y="126.0"></text>
</g>
<g>
<title>Java_java_lang_System_identityHashCode (1 samples, 0.02%)</title><rect x="995.7" y="131.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="998.7" y="142.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseInfoImpl.&lt;init&gt; (1 samples, 0.02%)</title><rect x="995.9" y="275.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="998.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/handlers/GetBodyHandler.apply (5 samples, 0.12%)</title><rect x="996.2" y="275.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="999.2" y="286.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (5 samples, 0.12%)</title><rect x="996.2" y="259.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="999.2" y="270.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (1 samples, 0.02%)</title><rect x="996.2" y="243.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="999.2" y="254.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.02%)</title><rect x="996.2" y="227.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="999.2" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (1 samples, 0.02%)</title><rect x="996.2" y="211.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="999.2" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.02%)</title><rect x="996.2" y="195.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="999.2" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.02%)</title><rect x="996.2" y="179.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="999.2" y="190.0"></text>
</g>
<g>
<title>java/util/Collection.stream (3 samples, 0.07%)</title><rect x="996.5" y="243.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="999.5" y="254.0"></text>
</g>
<g>
<title>java/util/List.spliterator (3 samples, 0.07%)</title><rect x="996.5" y="227.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="999.5" y="238.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.&lt;init&gt; (3 samples, 0.07%)</title><rect x="996.5" y="211.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="999.5" y="222.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="997.1" y="195.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1000.1" y="206.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (1 samples, 0.02%)</title><rect x="997.4" y="243.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1000.4" y="254.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.02%)</title><rect x="997.4" y="227.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1000.4" y="238.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (1 samples, 0.02%)</title><rect x="997.4" y="211.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1000.4" y="222.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.02%)</title><rect x="997.4" y="195.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1000.4" y="206.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$315/703902426.apply (6 samples, 0.15%)</title><rect x="997.7" y="339.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1000.7" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsyncImpl$6 (4 samples, 0.10%)</title><rect x="998.2" y="323.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1001.2" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseFilters (4 samples, 0.10%)</title><rect x="998.2" y="307.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1001.2" y="318.0"></text>
</g>
<g>
<title>java/util/LinkedList$DescendingIterator.next (1 samples, 0.02%)</title><rect x="998.2" y="291.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1001.2" y="302.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.previous (1 samples, 0.02%)</title><rect x="998.2" y="275.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1001.2" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.response (3 samples, 0.07%)</title><rect x="998.5" y="291.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1001.5" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.getCache (3 samples, 0.07%)</title><rect x="998.5" y="275.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1001.5" y="286.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (1 samples, 0.02%)</title><rect x="998.5" y="259.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1001.5" y="270.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.get (2 samples, 0.05%)</title><rect x="998.8" y="259.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1001.8" y="270.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.hash (2 samples, 0.05%)</title><rect x="998.8" y="243.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1001.8" y="254.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (2 samples, 0.05%)</title><rect x="998.8" y="227.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1001.8" y="238.0"></text>
</g>
<g>
<title>JVM_IHashCode (1 samples, 0.02%)</title><rect x="998.8" y="211.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1001.8" y="222.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.02%)</title><rect x="999.1" y="211.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1002.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (8 samples, 0.19%)</title><rect x="999.4" y="355.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1002.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (8 samples, 0.19%)</title><rect x="999.4" y="339.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1002.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.05%)</title><rect x="999.4" y="323.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1002.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (2 samples, 0.05%)</title><rect x="999.4" y="307.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1002.4" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$319/1455266356.apply (6 samples, 0.15%)</title><rect x="999.9" y="323.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1002.9" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsyncImpl$7 (6 samples, 0.15%)</title><rect x="999.9" y="307.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1002.9" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.cancelTimer (5 samples, 0.12%)</title><rect x="999.9" y="291.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1002.9" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.cancelTimer (5 samples, 0.12%)</title><rect x="999.9" y="275.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1002.9" y="286.0"></text>
</g>
<g>
<title>java/util/TreeSet.remove (3 samples, 0.07%)</title><rect x="1000.5" y="259.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1003.5" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.remove (3 samples, 0.07%)</title><rect x="1000.5" y="243.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1003.5" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.deleteEntry (2 samples, 0.05%)</title><rect x="1000.5" y="227.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1003.5" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterDeletion (1 samples, 0.02%)</title><rect x="1000.8" y="211.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1003.8" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.leftOf (1 samples, 0.02%)</title><rect x="1000.8" y="195.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1003.8" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.02%)</title><rect x="1001.1" y="227.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1004.1" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.02%)</title><rect x="1001.1" y="211.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1004.1" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.completedFuture (1 samples, 0.02%)</title><rect x="1001.4" y="291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1004.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.02%)</title><rect x="1001.4" y="275.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1004.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.02%)</title><rect x="1001.4" y="259.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1004.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniRelay.tryFire (3 samples, 0.07%)</title><rect x="1001.7" y="355.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1004.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.05%)</title><rect x="1001.9" y="339.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1004.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 0.05%)</title><rect x="1001.9" y="323.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1004.9" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$382/489610158.apply (4 samples, 0.10%)</title><rect x="1002.5" y="387.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1005.5" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readHeadersAsync$0 (4 samples, 0.10%)</title><rect x="1002.5" y="371.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1005.5" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.unsubscribe (1 samples, 0.02%)</title><rect x="1002.5" y="355.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1005.5" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Response.&lt;init&gt; (3 samples, 0.07%)</title><rect x="1002.8" y="355.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1005.8" y="366.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.07%)</title><rect x="1002.8" y="339.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1005.8" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.07%)</title><rect x="1002.8" y="323.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1005.8" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.07%)</title><rect x="1002.8" y="307.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1005.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.02%)</title><rect x="1003.7" y="403.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1006.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.02%)</title><rect x="1003.7" y="387.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1006.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.02%)</title><rect x="1003.7" y="371.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1006.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.02%)</title><rect x="1003.9" y="419.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1006.9" y="430.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="1003.9" y="403.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1006.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.05%)</title><rect x="1004.2" y="451.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1007.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 0.05%)</title><rect x="1004.2" y="435.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1007.2" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (2 samples, 0.05%)</title><rect x="1004.2" y="419.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1007.2" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.parse (1 samples, 0.02%)</title><rect x="1004.8" y="467.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1007.8" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.parse (40 samples, 0.97%)</title><rect x="1005.1" y="499.0" width="11.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1008.1" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.canContinueParsing (3 samples, 0.07%)</title><rect x="1006.2" y="483.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1009.2" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readResumeHeader (6 samples, 0.15%)</title><rect x="1007.1" y="483.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1010.1" y="494.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 0.15%)</title><rect x="1007.1" y="467.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1010.1" y="478.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.15%)</title><rect x="1007.1" y="451.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1010.1" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readResumeStatusLine (2 samples, 0.05%)</title><rect x="1008.8" y="483.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1011.8" y="494.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.05%)</title><rect x="1008.8" y="467.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1011.8" y="478.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.05%)</title><rect x="1008.8" y="451.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1011.8" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.resumeOrEndHeaders (9 samples, 0.22%)</title><rect x="1009.4" y="483.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1012.4" y="494.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (9 samples, 0.22%)</title><rect x="1009.4" y="467.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1012.4" y="478.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (9 samples, 0.22%)</title><rect x="1009.4" y="451.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1012.4" y="462.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="1009.6" y="435.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1012.6" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.forEach (7 samples, 0.17%)</title><rect x="1009.9" y="435.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1012.9" y="446.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$131/176766706.accept (7 samples, 0.17%)</title><rect x="1009.9" y="419.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1012.9" y="430.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (7 samples, 0.17%)</title><rect x="1009.9" y="403.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1012.9" y="414.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (4 samples, 0.10%)</title><rect x="1010.2" y="387.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1013.2" y="398.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$141/1026326437.accept (4 samples, 0.10%)</title><rect x="1010.2" y="371.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1013.2" y="382.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (3 samples, 0.07%)</title><rect x="1010.5" y="355.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1013.5" y="366.0"></text>
</g>
<g>
<title>java/lang/String.trim (3 samples, 0.07%)</title><rect x="1010.5" y="339.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1013.5" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (3 samples, 0.07%)</title><rect x="1010.5" y="323.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1013.5" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$71/865059288.test (2 samples, 0.05%)</title><rect x="1010.8" y="307.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1013.8" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (2 samples, 0.05%)</title><rect x="1011.4" y="387.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1014.4" y="398.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.02%)</title><rect x="1011.4" y="371.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1014.4" y="382.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.02%)</title><rect x="1011.4" y="355.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1014.4" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.02%)</title><rect x="1011.4" y="339.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1014.4" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.02%)</title><rect x="1011.6" y="371.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1014.6" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.resumeOrSecondCR (15 samples, 0.36%)</title><rect x="1011.9" y="483.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1014.9" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.addHeaderFromString (15 samples, 0.36%)</title><rect x="1011.9" y="467.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1014.9" y="478.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.10%)</title><rect x="1011.9" y="451.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1014.9" y="462.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.10%)</title><rect x="1011.9" y="435.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1014.9" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.10%)</title><rect x="1011.9" y="419.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1014.9" y="430.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="1012.8" y="403.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1015.8" y="414.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (8 samples, 0.19%)</title><rect x="1013.1" y="451.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1016.1" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.toLowerCase (6 samples, 0.15%)</title><rect x="1013.4" y="435.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1016.4" y="446.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1015.1" y="435.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1018.1" y="446.0"></text>
</g>
<g>
<title>java/lang/String.trim (1 samples, 0.02%)</title><rect x="1015.4" y="451.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1018.4" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (1 samples, 0.02%)</title><rect x="1015.4" y="435.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1018.4" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.computeIfAbsent (1 samples, 0.02%)</title><rect x="1015.4" y="419.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1018.4" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.computeIfAbsent (2 samples, 0.05%)</title><rect x="1015.6" y="451.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1018.6" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.02%)</title><rect x="1015.9" y="435.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1018.9" y="446.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1016.2" y="483.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1019.2" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (140 samples, 3.39%)</title><rect x="1016.5" y="611.0" width="39.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1019.5" y="622.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (138 samples, 3.34%)</title><rect x="1017.1" y="595.0" width="39.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1020.1" y="606.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (138 samples, 3.34%)</title><rect x="1017.1" y="579.0" width="39.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1020.1" y="590.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$270/1387273586.run (138 samples, 3.34%)</title><rect x="1017.1" y="563.0" width="39.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1020.1" y="574.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (138 samples, 3.34%)</title><rect x="1017.1" y="547.0" width="39.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1020.1" y="558.0">jdk..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.peek (1 samples, 0.02%)</title><rect x="1017.4" y="531.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1020.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.peekFirst (1 samples, 0.02%)</title><rect x="1017.4" y="515.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1020.4" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (2 samples, 0.05%)</title><rect x="1017.6" y="531.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1020.6" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onSubscribe (2 samples, 0.05%)</title><rect x="1017.6" y="515.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1020.6" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.onSubscribe (2 samples, 0.05%)</title><rect x="1017.6" y="499.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1020.6" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$402/1777809380.run (1 samples, 0.02%)</title><rect x="1017.6" y="483.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1020.6" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.onFinished (1 samples, 0.02%)</title><rect x="1017.6" y="467.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1020.6" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.closeOrReturnToCache (1 samples, 0.02%)</title><rect x="1017.6" y="451.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1020.6" y="462.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (1 samples, 0.02%)</title><rect x="1017.6" y="435.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1020.6" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (1 samples, 0.02%)</title><rect x="1017.6" y="419.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1020.6" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.02%)</title><rect x="1017.6" y="403.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1020.6" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onSubscribe (1 samples, 0.02%)</title><rect x="1017.9" y="483.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1020.9" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onSubscribe (1 samples, 0.02%)</title><rect x="1017.9" y="467.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1020.9" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.onSubscribe (1 samples, 0.02%)</title><rect x="1017.9" y="451.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1020.9" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1AsyncDelegateSubscription.request (1 samples, 0.02%)</title><rect x="1017.9" y="435.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1020.9" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="1017.9" y="419.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1020.9" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="1017.9" y="403.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1020.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.compareAndSet (1 samples, 0.02%)</title><rect x="1017.9" y="387.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1020.9" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.tryAsyncReceive (134 samples, 3.24%)</title><rect x="1018.2" y="531.0" width="38.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1021.2" y="542.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (134 samples, 3.24%)</title><rect x="1018.2" y="515.0" width="38.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1021.2" y="526.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.handle (134 samples, 3.24%)</title><rect x="1018.2" y="499.0" width="38.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1021.2" y="510.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.handle (134 samples, 3.24%)</title><rect x="1018.2" y="483.0" width="38.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1021.2" y="494.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.accept (134 samples, 3.24%)</title><rect x="1018.2" y="467.0" width="38.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1021.2" y="478.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.accept (133 samples, 3.22%)</title><rect x="1018.5" y="451.0" width="37.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1021.5" y="462.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$402/1777809380.run (88 samples, 2.13%)</title><rect x="1018.5" y="435.0" width="25.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1021.5" y="446.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.onFinished (88 samples, 2.13%)</title><rect x="1018.5" y="419.0" width="25.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1021.5" y="430.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.closeOrReturnToCache (88 samples, 2.13%)</title><rect x="1018.5" y="403.0" width="25.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1021.5" y="414.0">j..</text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (3 samples, 0.07%)</title><rect x="1018.5" y="387.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1021.5" y="398.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (1 samples, 0.02%)</title><rect x="1018.5" y="371.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1021.5" y="382.0"></text>
</g>
<g>
<title>java/util/List.of (1 samples, 0.02%)</title><rect x="1018.5" y="355.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1021.5" y="366.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.characteristics (1 samples, 0.02%)</title><rect x="1018.5" y="339.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1021.5" y="350.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.02%)</title><rect x="1018.8" y="371.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1021.8" y="382.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.02%)</title><rect x="1018.8" y="355.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1021.8" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (1 samples, 0.02%)</title><rect x="1019.1" y="371.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1022.1" y="382.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.02%)</title><rect x="1019.1" y="355.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1022.1" y="366.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (1 samples, 0.02%)</title><rect x="1019.1" y="339.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1022.1" y="350.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.02%)</title><rect x="1019.1" y="323.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1022.1" y="334.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.02%)</title><rect x="1019.1" y="307.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1022.1" y="318.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.02%)</title><rect x="1019.3" y="387.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1022.3" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$$Lambda$431/1557111109.apply (1 samples, 0.02%)</title><rect x="1019.3" y="371.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1022.3" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.lambda$closeOrReturnToCache$2 (1 samples, 0.02%)</title><rect x="1019.3" y="355.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1022.3" y="366.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.02%)</title><rect x="1019.3" y="339.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1022.3" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.02%)</title><rect x="1019.3" y="323.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1022.3" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.returnToPool (84 samples, 2.03%)</title><rect x="1019.6" y="387.0" width="24.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1022.6" y="398.0">j..</text>
</g>
<g>
<title>java/time/Instant.now (1 samples, 0.02%)</title><rect x="1019.6" y="371.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1022.6" y="382.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (1 samples, 0.02%)</title><rect x="1019.6" y="355.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1022.6" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.getNanoTimeAdjustment (1 samples, 0.02%)</title><rect x="1019.6" y="339.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1022.6" y="350.0"></text>
</g>
<g>
<title>JVM_GetNanoTimeAdjustment (1 samples, 0.02%)</title><rect x="1019.6" y="323.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1022.6" y="334.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="1019.6" y="307.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1022.6" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.returnToPool (83 samples, 2.01%)</title><rect x="1019.9" y="371.0" width="23.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1022.9" y="382.0">j..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.10%)</title><rect x="1020.8" y="355.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1023.8" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.10%)</title><rect x="1020.8" y="339.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1023.8" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.02%)</title><rect x="1020.8" y="323.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1023.8" y="334.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (3 samples, 0.07%)</title><rect x="1021.1" y="323.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1024.1" y="334.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.02%)</title><rect x="1021.6" y="307.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1024.6" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.add (65 samples, 1.57%)</title><rect x="1021.9" y="355.0" width="18.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1024.9" y="366.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (1 samples, 0.02%)</title><rect x="1040.2" y="339.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1043.2" y="350.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (1 samples, 0.02%)</title><rect x="1040.2" y="323.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1043.2" y="334.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1040.2" y="307.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1043.2" y="318.0"></text>
</g>
<g>
<title>java/util/LinkedList.node (1 samples, 0.02%)</title><rect x="1040.2" y="291.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1043.2" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.putConnection (1 samples, 0.02%)</title><rect x="1040.5" y="355.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1043.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.02%)</title><rect x="1040.5" y="339.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1043.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="1040.5" y="323.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1043.5" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CacheKey.equals (1 samples, 0.02%)</title><rect x="1040.5" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1043.5" y="318.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.02%)</title><rect x="1040.5" y="291.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1043.5" y="302.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.equals (1 samples, 0.02%)</title><rect x="1040.5" y="275.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1043.5" y="286.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress$InetSocketAddressHolder.equals (1 samples, 0.02%)</title><rect x="1040.5" y="259.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1043.5" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.registerCleanupTrigger (10 samples, 0.24%)</title><rect x="1040.8" y="355.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1043.8" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.connectFlows (10 samples, 0.24%)</title><rect x="1040.8" y="339.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1043.8" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CleanupTrigger.subscribe (4 samples, 0.10%)</title><rect x="1040.8" y="323.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1043.8" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onSubscribe (4 samples, 0.10%)</title><rect x="1040.8" y="307.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1043.8" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onSubscribe (4 samples, 0.10%)</title><rect x="1040.8" y="291.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1043.8" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (3 samples, 0.07%)</title><rect x="1040.8" y="275.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1043.8" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (3 samples, 0.07%)</title><rect x="1040.8" y="259.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1043.8" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (3 samples, 0.07%)</title><rect x="1040.8" y="243.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1043.8" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.dropSubscription (1 samples, 0.02%)</title><rect x="1041.6" y="275.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1044.6" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.subscribe (6 samples, 0.15%)</title><rect x="1041.9" y="323.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1044.9" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher.subscribe (6 samples, 0.15%)</title><rect x="1041.9" y="307.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1044.9" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalSubscribe (6 samples, 0.15%)</title><rect x="1041.9" y="291.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1044.9" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (6 samples, 0.15%)</title><rect x="1041.9" y="275.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1044.9" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (6 samples, 0.15%)</title><rect x="1041.9" y="259.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1044.9" y="270.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="1042.2" y="243.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1045.2" y="254.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.05%)</title><rect x="1042.2" y="227.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1045.2" y="238.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.05%)</title><rect x="1042.2" y="211.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1045.2" y="222.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.02%)</title><rect x="1042.5" y="195.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1045.5" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (3 samples, 0.07%)</title><rect x="1042.7" y="243.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1045.7" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (1 samples, 0.02%)</title><rect x="1043.3" y="227.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1046.3" y="238.0"></text>
</g>
<g>
<title>__libc_write (1 samples, 0.02%)</title><rect x="1043.3" y="211.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1046.3" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$407/1655919259.accept (2 samples, 0.05%)</title><rect x="1043.6" y="435.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1046.6" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$1 (2 samples, 0.05%)</title><rect x="1043.6" y="419.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1046.6" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onComplete (2 samples, 0.05%)</title><rect x="1043.6" y="403.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1046.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.05%)</title><rect x="1043.6" y="387.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1046.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 0.05%)</title><rect x="1043.6" y="371.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1046.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.05%)</title><rect x="1043.6" y="355.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1046.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.05%)</title><rect x="1043.6" y="339.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1046.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.02%)</title><rect x="1043.6" y="323.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1046.6" y="334.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="1043.6" y="307.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1046.6" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$415/1645310768.accept (1 samples, 0.02%)</title><rect x="1043.9" y="323.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1046.9" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$2 (1 samples, 0.02%)</title><rect x="1043.9" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1046.9" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$ClientRefCountTracker.tryRelease (1 samples, 0.02%)</title><rect x="1043.9" y="291.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1046.9" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.unreference (1 samples, 0.02%)</title><rect x="1043.9" y="275.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1046.9" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.facade (1 samples, 0.02%)</title><rect x="1043.9" y="259.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1046.9" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onComplete (36 samples, 0.87%)</title><rect x="1044.2" y="435.0" width="10.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1047.2" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.complete (36 samples, 0.87%)</title><rect x="1044.2" y="419.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1047.2" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onComplete (36 samples, 0.87%)</title><rect x="1044.2" y="403.0" width="10.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1047.2" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.onComplete (36 samples, 0.87%)</title><rect x="1044.2" y="387.0" width="10.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1047.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (33 samples, 0.80%)</title><rect x="1044.2" y="371.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1047.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (33 samples, 0.80%)</title><rect x="1044.2" y="355.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1047.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (32 samples, 0.77%)</title><rect x="1044.2" y="339.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1047.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (31 samples, 0.75%)</title><rect x="1044.5" y="323.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1047.5" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$420/1846817389.accept (31 samples, 0.75%)</title><rect x="1044.5" y="307.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1047.5" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$4 (30 samples, 0.73%)</title><rect x="1044.7" y="291.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1047.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (30 samples, 0.73%)</title><rect x="1044.7" y="275.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1047.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (30 samples, 0.73%)</title><rect x="1044.7" y="259.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1047.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (3 samples, 0.07%)</title><rect x="1044.7" y="243.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1047.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (3 samples, 0.07%)</title><rect x="1044.7" y="227.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1047.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.02%)</title><rect x="1045.0" y="211.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1048.0" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$428/1182523009.apply (1 samples, 0.02%)</title><rect x="1045.3" y="211.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1048.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniRelay.tryFire (1 samples, 0.02%)</title><rect x="1045.6" y="243.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1048.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (25 samples, 0.60%)</title><rect x="1045.9" y="243.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1048.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.10%)</title><rect x="1045.9" y="227.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1048.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (4 samples, 0.10%)</title><rect x="1045.9" y="211.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1048.9" y="222.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.07%)</title><rect x="1045.9" y="195.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1048.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.execute (1 samples, 0.02%)</title><rect x="1046.7" y="195.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1049.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (21 samples, 0.51%)</title><rect x="1047.0" y="227.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1050.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (18 samples, 0.44%)</title><rect x="1047.0" y="211.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1050.0" y="222.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="1047.3" y="195.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1050.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.execute (14 samples, 0.34%)</title><rect x="1047.6" y="195.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1050.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalSubmit (14 samples, 0.34%)</title><rect x="1047.6" y="179.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1050.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalPush (14 samples, 0.34%)</title><rect x="1047.6" y="163.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1050.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.signalWork (13 samples, 0.31%)</title><rect x="1047.6" y="147.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1050.6" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LJJ_Z (1 samples, 0.02%)</title><rect x="1047.6" y="131.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1050.6" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleLongs$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="1047.6" y="115.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1050.6" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 0.29%)</title><rect x="1047.9" y="131.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1050.9" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (12 samples, 0.29%)</title><rect x="1047.9" y="115.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1050.9" y="126.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.02%)</title><rect x="1048.5" y="99.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1051.5" y="110.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title><rect x="1048.7" y="99.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1051.7" y="110.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.07%)</title><rect x="1049.0" y="99.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1052.0" y="110.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="1049.0" y="83.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1052.0" y="94.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="1049.3" y="83.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1052.3" y="94.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.02%)</title><rect x="1049.6" y="83.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1052.6" y="94.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 0.12%)</title><rect x="1049.9" y="99.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1052.9" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.getProbe (1 samples, 0.02%)</title><rect x="1051.3" y="147.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1054.3" y="158.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$$Lambda$177/1623483085.accept (2 samples, 0.05%)</title><rect x="1051.6" y="195.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1054.6" y="206.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$426/1467042078.accept (2 samples, 0.05%)</title><rect x="1052.2" y="211.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1055.2" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$readBodyAsync$0 (2 samples, 0.05%)</title><rect x="1052.2" y="195.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1055.2" y="206.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$$Lambda$177/1623483085.accept (1 samples, 0.02%)</title><rect x="1052.7" y="211.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1055.7" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.lambda$sendAsync$0 (1 samples, 0.02%)</title><rect x="1052.7" y="195.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1055.7" y="206.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.unreference (1 samples, 0.02%)</title><rect x="1052.7" y="179.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1055.7" y="190.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.facade (1 samples, 0.02%)</title><rect x="1052.7" y="163.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1055.7" y="174.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.02%)</title><rect x="1053.0" y="243.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1056.0" y="254.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.02%)</title><rect x="1053.3" y="339.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1056.3" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.join (3 samples, 0.07%)</title><rect x="1053.6" y="371.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1056.6" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="1053.6" y="355.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1056.6" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1053.6" y="339.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1056.6" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.remaining (2 samples, 0.05%)</title><rect x="1053.9" y="355.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1056.9" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onNext (3 samples, 0.07%)</title><rect x="1054.4" y="435.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1057.4" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onNext (3 samples, 0.07%)</title><rect x="1054.4" y="419.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1057.4" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onNext (3 samples, 0.07%)</title><rect x="1054.4" y="403.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1057.4" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onNext (3 samples, 0.07%)</title><rect x="1054.4" y="387.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1057.4" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.onNext (3 samples, 0.07%)</title><rect x="1054.4" y="371.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1057.4" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.onNext (3 samples, 0.07%)</title><rect x="1054.4" y="355.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1057.4" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayList.addAll (3 samples, 0.07%)</title><rect x="1054.4" y="339.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1057.4" y="350.0"></text>
</g>
<g>
<title>oop_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="1054.7" y="323.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1057.7" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.tryDecrement (2 samples, 0.05%)</title><rect x="1055.3" y="435.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1058.3" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.decreaseAndGet (2 samples, 0.05%)</title><rect x="1055.3" y="419.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1058.3" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.onComplete (1 samples, 0.02%)</title><rect x="1055.6" y="403.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1058.6" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.sliceWithLimitedCapacity (2 samples, 0.05%)</title><rect x="1055.9" y="435.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1058.9" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.slice (1 samples, 0.02%)</title><rect x="1056.2" y="419.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1059.2" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1056.2" y="403.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1059.2" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1056.2" y="387.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1059.2" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1056.2" y="371.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1059.2" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1056.2" y="355.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1059.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="1056.2" y="339.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1059.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinWorkerThread.run (36 samples, 0.87%)</title><rect x="1056.4" y="691.0" width="10.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1059.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.runWorker (36 samples, 0.87%)</title><rect x="1056.4" y="675.0" width="10.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1059.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.scan (12 samples, 0.29%)</title><rect x="1056.7" y="659.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1059.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool$WorkQueue.topLevelExec (7 samples, 0.17%)</title><rect x="1057.9" y="643.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1060.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool$WorkQueue.nextLocalTask (1 samples, 0.02%)</title><rect x="1057.9" y="627.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1060.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.doExec (6 samples, 0.15%)</title><rect x="1058.2" y="627.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1061.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.exec (6 samples, 0.15%)</title><rect x="1058.2" y="611.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1061.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.15%)</title><rect x="1058.2" y="595.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1061.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.12%)</title><rect x="1058.4" y="579.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1061.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (5 samples, 0.12%)</title><rect x="1058.4" y="563.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1061.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (5 samples, 0.12%)</title><rect x="1058.4" y="547.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1061.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (4 samples, 0.10%)</title><rect x="1058.4" y="531.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1061.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.10%)</title><rect x="1058.4" y="515.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1061.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (4 samples, 0.10%)</title><rect x="1058.4" y="499.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1061.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.02%)</title><rect x="1058.7" y="483.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1061.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.02%)</title><rect x="1058.7" y="467.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1061.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.02%)</title><rect x="1058.7" y="451.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1061.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.02%)</title><rect x="1058.7" y="435.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1061.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.02%)</title><rect x="1058.7" y="419.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1061.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.05%)</title><rect x="1059.0" y="483.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1062.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title><rect x="1059.0" y="467.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1062.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.05%)</title><rect x="1059.0" y="451.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1062.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.02%)</title><rect x="1059.3" y="435.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1062.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.02%)</title><rect x="1059.6" y="531.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1062.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.02%)</title><rect x="1059.6" y="515.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1062.6" y="526.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="1059.6" y="499.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1062.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.signalWork (1 samples, 0.02%)</title><rect x="1059.9" y="643.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1062.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.02%)</title><rect x="1059.9" y="627.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1062.9" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.02%)</title><rect x="1059.9" y="611.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1062.9" y="622.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.02%)</title><rect x="1059.9" y="595.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1062.9" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="1059.9" y="579.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1062.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title><rect x="1060.2" y="659.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1063.2" y="670.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="1060.2" y="643.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1063.2" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="1060.4" y="643.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1063.4" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1060.4" y="627.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1063.4" y="638.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.02%)</title><rect x="1060.4" y="611.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1063.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.parkUntil (21 samples, 0.51%)</title><rect x="1060.7" y="659.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1063.7" y="670.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="1060.7" y="643.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1063.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.scan (1 samples, 0.02%)</title><rect x="1061.0" y="643.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1064.0" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (19 samples, 0.46%)</title><rect x="1061.3" y="643.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1064.3" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.02%)</title><rect x="1061.3" y="627.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1064.3" y="638.0"></text>
</g>
<g>
<title>Unsafe_Park (7 samples, 0.17%)</title><rect x="1061.6" y="627.0" width="2.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1064.6" y="638.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.10%)</title><rect x="1061.9" y="611.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1064.9" y="622.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="1062.2" y="595.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1065.2" y="606.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="1062.2" y="579.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1065.2" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.05%)</title><rect x="1062.4" y="595.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1065.4" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.02%)</title><rect x="1063.0" y="611.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1066.0" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.02%)</title><rect x="1063.3" y="611.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1066.3" y="622.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.27%)</title><rect x="1063.6" y="627.0" width="3.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1066.6" y="638.0"></text>
</g>
<g>
<title>__condvar_dec_grefs (1 samples, 0.02%)</title><rect x="1063.6" y="611.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1066.6" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.05%)</title><rect x="1063.9" y="611.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1066.9" y="622.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (8 samples, 0.19%)</title><rect x="1064.4" y="611.0" width="2.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1067.4" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.run (202 samples, 4.89%)</title><rect x="1066.7" y="691.0" width="57.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1069.7" y="702.0">jdk/in..</text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.02%)</title><rect x="1068.7" y="675.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.7" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (14 samples, 0.34%)</title><rect x="1069.0" y="675.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1072.0" y="686.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (14 samples, 0.34%)</title><rect x="1069.0" y="659.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1072.0" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.05%)</title><rect x="1069.3" y="643.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1072.3" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (10 samples, 0.24%)</title><rect x="1069.9" y="643.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1072.9" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.05%)</title><rect x="1072.1" y="627.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1075.1" y="638.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.02%)</title><rect x="1072.7" y="643.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1075.7" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.02%)</title><rect x="1073.0" y="675.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1076.0" y="686.0"></text>
</g>
<g>
<title>java/nio/channels/SelectionKey.attachment (1 samples, 0.02%)</title><rect x="1073.3" y="675.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1076.3" y="686.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (1 samples, 0.02%)</title><rect x="1073.6" y="675.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1076.6" y="686.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.keyFor (2 samples, 0.05%)</title><rect x="1073.9" y="675.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1076.9" y="686.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.findKey (2 samples, 0.05%)</title><rect x="1073.9" y="659.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1076.9" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (1 samples, 0.02%)</title><rect x="1074.4" y="675.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1077.4" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="1074.7" y="675.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1077.7" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="1074.7" y="659.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1077.7" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="1074.7" y="643.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1077.7" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="1074.7" y="627.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1077.7" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.02%)</title><rect x="1074.7" y="611.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1077.7" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (19 samples, 0.46%)</title><rect x="1075.0" y="675.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1078.0" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$329/591297947.accept (19 samples, 0.46%)</title><rect x="1075.0" y="659.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1078.0" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.lambda$run$3 (19 samples, 0.46%)</title><rect x="1075.0" y="643.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1078.0" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.handleEvent (19 samples, 0.46%)</title><rect x="1075.0" y="627.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1078.0" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowEvent.handle (19 samples, 0.46%)</title><rect x="1075.0" y="611.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1078.0" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadEvent.signalEvent (19 samples, 0.46%)</title><rect x="1075.0" y="595.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1078.0" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (1 samples, 0.02%)</title><rect x="1075.0" y="579.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1078.0" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (1 samples, 0.02%)</title><rect x="1075.0" y="563.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1078.0" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.register (1 samples, 0.02%)</title><rect x="1075.0" y="547.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1078.0" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.02%)</title><rect x="1075.0" y="531.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1078.0" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.02%)</title><rect x="1075.0" y="515.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1078.0" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.02%)</title><rect x="1075.0" y="499.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1078.0" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalReadable (18 samples, 0.44%)</title><rect x="1075.3" y="579.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1078.3" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (18 samples, 0.44%)</title><rect x="1075.3" y="563.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1078.3" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (18 samples, 0.44%)</title><rect x="1075.3" y="547.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1078.3" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (18 samples, 0.44%)</title><rect x="1075.3" y="531.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1078.3" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowTask.run (18 samples, 0.44%)</title><rect x="1075.3" y="515.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1078.3" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$242/950557252.run (17 samples, 0.41%)</title><rect x="1075.3" y="499.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1078.3" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.read (17 samples, 0.41%)</title><rect x="1075.3" y="483.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1078.3" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onNext (4 samples, 0.10%)</title><rect x="1075.6" y="467.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1078.6" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onNext (4 samples, 0.10%)</title><rect x="1075.6" y="451.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1078.6" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.asyncReceive (3 samples, 0.07%)</title><rect x="1075.9" y="435.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1078.9" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (3 samples, 0.07%)</title><rect x="1075.9" y="419.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1078.9" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (3 samples, 0.07%)</title><rect x="1075.9" y="403.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1078.9" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (3 samples, 0.07%)</title><rect x="1075.9" y="387.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1078.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.07%)</title><rect x="1075.9" y="371.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1078.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (3 samples, 0.07%)</title><rect x="1075.9" y="355.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1078.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title><rect x="1075.9" y="339.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1078.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="1075.9" y="323.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1078.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="1075.9" y="307.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1078.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="1075.9" y="291.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1078.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="1075.9" y="275.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1078.9" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="1075.9" y="259.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1078.9" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.02%)</title><rect x="1075.9" y="243.0" width="0.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1078.9" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.02%)</title><rect x="1075.9" y="227.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1078.9" y="238.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1075.9" y="211.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1078.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.05%)</title><rect x="1076.1" y="339.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1079.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title><rect x="1076.1" y="323.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1079.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.05%)</title><rect x="1076.1" y="307.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1079.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.05%)</title><rect x="1076.1" y="291.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1079.1" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.05%)</title><rect x="1076.1" y="275.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1079.1" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.02%)</title><rect x="1076.1" y="259.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1079.1" y="270.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="1076.1" y="243.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1079.1" y="254.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.02%)</title><rect x="1076.4" y="259.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1079.4" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handlePending (1 samples, 0.02%)</title><rect x="1076.7" y="467.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1079.7" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.readAvailable (11 samples, 0.27%)</title><rect x="1077.0" y="467.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1080.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (11 samples, 0.27%)</title><rect x="1077.0" y="451.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1080.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 0.27%)</title><rect x="1077.0" y="435.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1080.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (10 samples, 0.24%)</title><rect x="1077.3" y="419.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1080.3" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.02%)</title><rect x="1077.3" y="403.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1080.3" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="1077.3" y="387.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1080.3" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="1077.3" y="371.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1080.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (9 samples, 0.22%)</title><rect x="1077.6" y="403.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1080.6" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="1077.6" y="387.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1080.6" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="1077.6" y="371.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1080.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="1077.6" y="355.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1080.6" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="1077.6" y="339.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1080.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.02%)</title><rect x="1077.6" y="323.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1080.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (8 samples, 0.19%)</title><rect x="1077.9" y="387.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1080.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (5 samples, 0.12%)</title><rect x="1078.7" y="371.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1081.7" y="382.0"></text>
</g>
<g>
<title>__libc_read (4 samples, 0.10%)</title><rect x="1078.7" y="355.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1081.7" y="366.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.02%)</title><rect x="1079.8" y="355.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1082.8" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.read (1 samples, 0.02%)</title><rect x="1080.1" y="499.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1083.1" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.10%)</title><rect x="1080.4" y="675.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1083.4" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.05%)</title><rect x="1081.0" y="659.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1084.0" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.05%)</title><rect x="1081.0" y="643.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.0" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.05%)</title><rect x="1081.0" y="627.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1084.0" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="1081.0" y="611.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1084.0" y="622.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title><rect x="1081.0" y="595.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1084.0" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title><rect x="1081.0" y="579.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1084.0" y="590.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.05%)</title><rect x="1081.0" y="563.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1084.0" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.02%)</title><rect x="1081.0" y="547.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1084.0" y="558.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="1081.0" y="531.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.0" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1081.3" y="547.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1084.3" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEach (16 samples, 0.39%)</title><rect x="1081.6" y="675.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1084.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (16 samples, 0.39%)</title><rect x="1081.6" y="659.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1084.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.evaluateSequential (16 samples, 0.39%)</title><rect x="1081.6" y="643.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1084.6" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp.evaluateSequential (16 samples, 0.39%)</title><rect x="1081.6" y="627.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1084.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (16 samples, 0.39%)</title><rect x="1081.6" y="611.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1084.6" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (12 samples, 0.29%)</title><rect x="1081.6" y="595.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1084.6" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (3 samples, 0.07%)</title><rect x="1081.6" y="579.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1084.6" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (3 samples, 0.07%)</title><rect x="1081.6" y="563.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1084.6" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.accept (3 samples, 0.07%)</title><rect x="1081.6" y="547.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1084.6" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$325/336932547.accept (3 samples, 0.07%)</title><rect x="1081.6" y="531.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1084.6" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.05%)</title><rect x="1081.8" y="515.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1084.8" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.05%)</title><rect x="1081.8" y="499.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1084.8" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.05%)</title><rect x="1081.8" y="483.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1084.8" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.05%)</title><rect x="1081.8" y="467.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1084.8" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (2 samples, 0.05%)</title><rect x="1081.8" y="451.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1084.8" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (3 samples, 0.07%)</title><rect x="1082.4" y="579.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1085.4" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.02%)</title><rect x="1082.4" y="563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1085.4" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.accept (1 samples, 0.02%)</title><rect x="1082.4" y="547.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1085.4" y="558.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.02%)</title><rect x="1082.7" y="563.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1085.7" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment$$Lambda$324/1343189537.test (1 samples, 0.02%)</title><rect x="1083.0" y="563.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1086.0" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.02%)</title><rect x="1083.3" y="579.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1086.3" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2ReducingSink.begin (1 samples, 0.02%)</title><rect x="1083.3" y="563.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1086.3" y="574.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.02%)</title><rect x="1083.6" y="579.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1086.6" y="590.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.02%)</title><rect x="1083.6" y="563.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1086.6" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.isKnown (4 samples, 0.10%)</title><rect x="1083.8" y="579.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1086.8" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="1083.8" y="563.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1086.8" y="574.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (3 samples, 0.07%)</title><rect x="1084.1" y="563.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1087.1" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (4 samples, 0.10%)</title><rect x="1085.0" y="595.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1088.0" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AsyncTriggerEvent.handle (22 samples, 0.53%)</title><rect x="1086.1" y="675.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1089.1" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$250/1665419686.run (17 samples, 0.41%)</title><rect x="1086.1" y="659.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1089.1" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handleSubscribeEvent (17 samples, 0.41%)</title><rect x="1086.1" y="643.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1089.1" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (17 samples, 0.41%)</title><rect x="1086.1" y="627.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1089.1" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (17 samples, 0.41%)</title><rect x="1086.1" y="611.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1089.1" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (5 samples, 0.12%)</title><rect x="1086.1" y="595.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1089.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 0.12%)</title><rect x="1086.1" y="579.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1089.1" y="590.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.10%)</title><rect x="1086.1" y="563.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1089.1" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowTask.run (1 samples, 0.02%)</title><rect x="1087.3" y="563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1090.3" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (12 samples, 0.29%)</title><rect x="1087.6" y="595.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1090.6" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowTask.run (12 samples, 0.29%)</title><rect x="1087.6" y="579.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1090.6" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$242/950557252.run (10 samples, 0.24%)</title><rect x="1087.8" y="563.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1090.8" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.read (10 samples, 0.24%)</title><rect x="1087.8" y="547.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1090.8" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handlePending (10 samples, 0.24%)</title><rect x="1087.8" y="531.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1090.8" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.signalOnSubscribe (10 samples, 0.24%)</title><rect x="1087.8" y="515.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1090.8" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CleanupTrigger.onSubscribe (4 samples, 0.10%)</title><rect x="1088.1" y="499.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1091.1" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.request (4 samples, 0.10%)</title><rect x="1088.1" y="483.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1091.1" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.request (4 samples, 0.10%)</title><rect x="1088.1" y="467.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1091.1" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.resumeReadEvent (4 samples, 0.10%)</title><rect x="1088.1" y="451.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1091.1" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.resumeEvent (4 samples, 0.10%)</title><rect x="1088.1" y="435.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1091.1" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (4 samples, 0.10%)</title><rect x="1088.1" y="419.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1091.1" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (4 samples, 0.10%)</title><rect x="1088.1" y="403.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1091.1" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.keyFor (2 samples, 0.05%)</title><rect x="1088.1" y="387.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1091.1" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.findKey (2 samples, 0.05%)</title><rect x="1088.1" y="371.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1091.1" y="382.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1088.4" y="355.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1091.4" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.register (2 samples, 0.05%)</title><rect x="1088.7" y="387.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1091.7" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.05%)</title><rect x="1088.7" y="371.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1091.7" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onSubscribe (5 samples, 0.12%)</title><rect x="1089.3" y="499.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1092.3" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (5 samples, 0.12%)</title><rect x="1089.3" y="483.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1092.3" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.05%)</title><rect x="1090.1" y="467.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1093.1" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (2 samples, 0.05%)</title><rect x="1090.1" y="451.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1093.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.05%)</title><rect x="1090.1" y="435.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1093.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.02%)</title><rect x="1090.4" y="419.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1093.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title><rect x="1090.4" y="403.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1093.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="1090.4" y="387.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1093.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="1090.4" y="371.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1093.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="1090.4" y="355.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1093.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="1090.4" y="339.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1093.4" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="1090.4" y="323.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1093.4" y="334.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1090.4" y="307.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1093.4" y="318.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="1090.4" y="291.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1093.4" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (1 samples, 0.02%)</title><rect x="1090.7" y="563.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1093.7" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$260/374484389.run (5 samples, 0.12%)</title><rect x="1091.0" y="659.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1094.0" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.startSubscription (5 samples, 0.12%)</title><rect x="1091.0" y="643.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1094.0" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (4 samples, 0.10%)</title><rect x="1091.3" y="627.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1094.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.10%)</title><rect x="1091.3" y="611.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1094.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (4 samples, 0.10%)</title><rect x="1091.3" y="595.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1094.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title><rect x="1091.5" y="579.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1094.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="1091.5" y="563.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1094.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="1091.5" y="547.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1094.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="1091.5" y="531.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1094.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="1091.5" y="515.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1094.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.05%)</title><rect x="1091.8" y="579.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1094.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title><rect x="1091.8" y="563.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1094.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.05%)</title><rect x="1091.8" y="547.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1094.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.05%)</title><rect x="1091.8" y="531.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1094.8" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.05%)</title><rect x="1091.8" y="515.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1094.8" y="526.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.05%)</title><rect x="1091.8" y="499.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1094.8" y="510.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="1091.8" y="483.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.8" y="494.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="1092.1" y="483.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1095.1" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.purgeExpiredConnectionsAndReturnNextDeadline (34 samples, 0.82%)</title><rect x="1092.4" y="675.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1095.4" y="686.0"></text>
</g>
<g>
<title>java/time/Instant.now (4 samples, 0.10%)</title><rect x="1092.4" y="659.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1095.4" y="670.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (4 samples, 0.10%)</title><rect x="1092.4" y="643.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1095.4" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.purgeTimeoutsAndReturnNextDeadline (1 samples, 0.02%)</title><rect x="1093.3" y="627.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1096.3" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.purgeExpiredConnectionsAndReturnNextDeadline (30 samples, 0.73%)</title><rect x="1093.5" y="659.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1096.5" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (22 samples, 0.53%)</title><rect x="1094.7" y="643.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.7" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (21 samples, 0.51%)</title><rect x="1095.0" y="627.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1098.0" y="638.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.05%)</title><rect x="1095.0" y="611.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.0" y="622.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (17 samples, 0.41%)</title><rect x="1095.5" y="611.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.5" y="622.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (5 samples, 0.12%)</title><rect x="1099.0" y="595.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.0" y="606.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.05%)</title><rect x="1100.4" y="611.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1103.4" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.02%)</title><rect x="1101.0" y="643.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1104.0" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.02%)</title><rect x="1101.3" y="643.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1104.3" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.purgeUntil (2 samples, 0.05%)</title><rect x="1101.5" y="643.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1104.5" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.register (1 samples, 0.02%)</title><rect x="1102.1" y="675.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1105.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.02%)</title><rect x="1102.1" y="659.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1105.1" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.02%)</title><rect x="1102.1" y="643.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1105.1" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.02%)</title><rect x="1102.1" y="627.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1105.1" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.purgeTimeoutsAndReturnNextDeadline (15 samples, 0.36%)</title><rect x="1102.4" y="675.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1105.4" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="1103.0" y="659.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1106.0" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.05%)</title><rect x="1103.0" y="643.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.0" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.02%)</title><rect x="1103.0" y="627.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.0" y="638.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.02%)</title><rect x="1103.2" y="627.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1106.2" y="638.0"></text>
</g>
<g>
<title>java/time/Instant.now (6 samples, 0.15%)</title><rect x="1103.5" y="659.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1106.5" y="670.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (6 samples, 0.15%)</title><rect x="1103.5" y="643.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1106.5" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.getNanoTimeAdjustment (6 samples, 0.15%)</title><rect x="1103.5" y="627.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1106.5" y="638.0"></text>
</g>
<g>
<title>JVM_GetNanoTimeAdjustment (4 samples, 0.10%)</title><rect x="1104.1" y="611.0" width="1.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1107.1" y="622.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="1104.7" y="595.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1107.7" y="606.0"></text>
</g>
<g>
<title>os::javaTimeSystemUTC(long&amp;, long&amp;) (1 samples, 0.02%)</title><rect x="1105.0" y="595.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.0" y="606.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="1105.0" y="579.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1108.0" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeyIterator.next (2 samples, 0.05%)</title><rect x="1105.2" y="659.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1108.2" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (2 samples, 0.05%)</title><rect x="1105.2" y="643.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1108.2" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (2 samples, 0.05%)</title><rect x="1105.2" y="627.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1108.2" y="638.0"></text>
</g>
<g>
<title>java/util/TreeSet.iterator (3 samples, 0.07%)</title><rect x="1105.8" y="659.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1108.8" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (3 samples, 0.07%)</title><rect x="1105.8" y="643.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1108.8" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (3 samples, 0.07%)</title><rect x="1105.8" y="627.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1108.8" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (3 samples, 0.07%)</title><rect x="1105.8" y="611.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1108.8" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowEvent.channel (1 samples, 0.02%)</title><rect x="1106.7" y="675.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1109.7" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (45 samples, 1.09%)</title><rect x="1107.0" y="675.0" width="12.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1110.0" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (45 samples, 1.09%)</title><rect x="1107.0" y="659.0" width="12.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1110.0" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (45 samples, 1.09%)</title><rect x="1107.0" y="643.0" width="12.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1110.0" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (17 samples, 0.41%)</title><rect x="1107.8" y="627.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1110.8" y="638.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.02%)</title><rect x="1107.8" y="611.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1110.8" y="622.0"></text>
</g>
<g>
<title>epoll_wait (16 samples, 0.39%)</title><rect x="1108.1" y="611.0" width="4.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1111.1" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (17 samples, 0.41%)</title><rect x="1112.7" y="627.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1115.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.02%)</title><rect x="1112.7" y="611.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1115.7" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="1112.7" y="595.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1115.7" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.clearInterrupt (15 samples, 0.36%)</title><rect x="1113.0" y="611.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1116.0" y="622.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="1113.5" y="595.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.5" y="606.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.02%)</title><rect x="1113.5" y="579.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.5" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (12 samples, 0.29%)</title><rect x="1113.8" y="595.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1116.8" y="606.0"></text>
</g>
<g>
<title>__libc_read (11 samples, 0.27%)</title><rect x="1113.8" y="579.0" width="3.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1116.8" y="590.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="1116.9" y="579.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1119.9" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.02%)</title><rect x="1117.2" y="611.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1120.2" y="622.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.02%)</title><rect x="1117.2" y="595.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1120.2" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.02%)</title><rect x="1117.2" y="579.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1120.2" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.02%)</title><rect x="1117.2" y="563.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1120.2" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processUpdateQueue (7 samples, 0.17%)</title><rect x="1117.5" y="627.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1120.5" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.getFDVal (6 samples, 0.15%)</title><rect x="1117.8" y="611.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1120.8" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.02%)</title><rect x="1119.5" y="627.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1122.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.02%)</title><rect x="1119.5" y="611.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1122.5" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.02%)</title><rect x="1119.5" y="595.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1122.5" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1119.5" y="579.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1122.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1119.5" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1122.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (5 samples, 0.12%)</title><rect x="1119.8" y="675.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1122.8" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (4 samples, 0.10%)</title><rect x="1120.1" y="659.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1123.1" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (4 samples, 0.10%)</title><rect x="1120.1" y="643.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1123.1" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (2 samples, 0.05%)</title><rect x="1120.1" y="627.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1123.1" y="638.0"></text>
</g>
<g>
<title>epoll_wait (1 samples, 0.02%)</title><rect x="1120.1" y="611.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1123.1" y="622.0"></text>
</g>
<g>
<title>epoll_wait@plt (1 samples, 0.02%)</title><rect x="1120.4" y="611.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1123.4" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (1 samples, 0.02%)</title><rect x="1120.7" y="627.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1123.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.02%)</title><rect x="1120.7" y="611.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1123.7" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="1120.7" y="595.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1123.7" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.02%)</title><rect x="1120.9" y="627.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1123.9" y="638.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.02%)</title><rect x="1120.9" y="611.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1123.9" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.02%)</title><rect x="1120.9" y="595.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1123.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1120.9" y="579.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1123.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1120.9" y="563.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1123.9" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectedKeys (1 samples, 0.02%)</title><rect x="1121.2" y="675.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1124.2" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (4 samples, 0.10%)</title><rect x="1121.5" y="675.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1124.5" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (3 samples, 0.07%)</title><rect x="1121.8" y="659.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1124.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (3 samples, 0.07%)</title><rect x="1121.8" y="643.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1124.8" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (6 samples, 0.15%)</title><rect x="1122.7" y="675.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1125.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (5 samples, 0.12%)</title><rect x="1122.7" y="659.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1125.7" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (4 samples, 0.10%)</title><rect x="1122.7" y="643.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1125.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (4 samples, 0.10%)</title><rect x="1122.7" y="627.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1125.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (4 samples, 0.10%)</title><rect x="1122.7" y="611.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1125.7" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.02%)</title><rect x="1123.8" y="643.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1126.8" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (1 samples, 0.02%)</title><rect x="1124.1" y="659.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1127.1" y="670.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (190 samples, 4.59%)</title><rect x="1124.4" y="691.0" width="54.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1127.4" y="702.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (3 samples, 0.07%)</title><rect x="1124.7" y="675.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1127.7" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (3 samples, 0.07%)</title><rect x="1124.7" y="659.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1127.7" y="670.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (3 samples, 0.07%)</title><rect x="1124.7" y="643.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1127.7" y="654.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (18 samples, 0.44%)</title><rect x="1125.5" y="675.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1128.5" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (17 samples, 0.41%)</title><rect x="1125.8" y="659.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1128.8" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.05%)</title><rect x="1126.6" y="643.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1129.6" y="654.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.05%)</title><rect x="1127.2" y="643.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1130.2" y="654.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.05%)</title><rect x="1127.8" y="643.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1130.8" y="654.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="1128.4" y="643.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1131.4" y="654.0"></text>
</g>
<g>
<title>epoll_wait (7 samples, 0.17%)</title><rect x="1128.6" y="643.0" width="2.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1131.6" y="654.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (168 samples, 4.06%)</title><rect x="1130.6" y="675.0" width="48.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1133.6" y="686.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (168 samples, 4.06%)</title><rect x="1130.6" y="659.0" width="48.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1133.6" y="670.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (143 samples, 3.46%)</title><rect x="1130.9" y="643.0" width="40.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1133.9" y="654.0">one..</text>
</g>
<g>
<title>RequestHandler1_response.handleRequest (1 samples, 0.02%)</title><rect x="1132.1" y="627.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1135.1" y="638.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="1132.4" y="627.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1135.4" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (125 samples, 3.02%)</title><rect x="1132.6" y="627.0" width="35.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1135.6" y="638.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (125 samples, 3.02%)</title><rect x="1132.6" y="611.0" width="35.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1135.6" y="622.0">one..</text>
</g>
<g>
<title>RequestHandler1_response.handleRequest (115 samples, 2.78%)</title><rect x="1132.6" y="595.0" width="32.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1135.6" y="606.0">Re..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (7 samples, 0.17%)</title><rect x="1132.6" y="579.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1135.6" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7 samples, 0.17%)</title><rect x="1132.6" y="563.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1135.6" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.05%)</title><rect x="1132.9" y="547.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1135.9" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.05%)</title><rect x="1132.9" y="531.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1135.9" y="542.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="1133.5" y="547.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1136.5" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="1133.5" y="531.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1136.5" y="542.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.02%)</title><rect x="1133.5" y="515.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1136.5" y="526.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.07%)</title><rect x="1133.8" y="547.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1136.8" y="558.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="1134.4" y="531.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1137.4" y="542.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="1134.4" y="515.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1137.4" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.02%)</title><rect x="1134.4" y="499.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1137.4" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (108 samples, 2.61%)</title><rect x="1134.6" y="579.0" width="30.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1137.6" y="590.0">ru..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApplyAsync (1 samples, 0.02%)</title><rect x="1135.2" y="563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1138.2" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.07%)</title><rect x="1135.5" y="563.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1138.5" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="1136.1" y="547.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1139.1" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="1136.1" y="531.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1139.1" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="1136.1" y="515.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.1" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="1136.1" y="499.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.1" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="1136.1" y="483.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.1" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="1136.1" y="467.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.1" y="478.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="1136.1" y="451.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.1" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.02%)</title><rect x="1136.1" y="435.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.1" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.replicasGet (87 samples, 2.10%)</title><rect x="1136.4" y="563.0" width="24.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1139.4" y="574.0">r..</text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.02%)</title><rect x="1138.3" y="547.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1141.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.02%)</title><rect x="1138.3" y="531.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1141.3" y="542.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1138.3" y="515.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1141.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.supplyAsync (2 samples, 0.05%)</title><rect x="1138.6" y="547.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1141.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.asyncSupplyStage (2 samples, 0.05%)</title><rect x="1138.6" y="531.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1141.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.05%)</title><rect x="1138.6" y="515.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1141.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.05%)</title><rect x="1138.6" y="499.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1141.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title><rect x="1138.6" y="483.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1141.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="1138.6" y="467.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1141.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="1138.6" y="451.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1141.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="1138.6" y="435.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1141.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="1138.6" y="419.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1141.6" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="1138.6" y="403.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1141.6" y="414.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.02%)</title><rect x="1138.6" y="387.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1141.6" y="398.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.02%)</title><rect x="1138.6" y="371.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.02%)</title><rect x="1138.9" y="483.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1141.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.02%)</title><rect x="1138.9" y="467.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1141.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.02%)</title><rect x="1138.9" y="451.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1141.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.02%)</title><rect x="1138.9" y="435.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1141.9" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.02%)</title><rect x="1138.9" y="419.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1141.9" y="430.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.02%)</title><rect x="1138.9" y="403.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.9" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientFacade.sendAsync (41 samples, 0.99%)</title><rect x="1139.2" y="547.0" width="11.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1142.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (41 samples, 0.99%)</title><rect x="1139.2" y="531.0" width="11.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1142.2" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (41 samples, 0.99%)</title><rect x="1139.2" y="515.0" width="11.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1142.2" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (41 samples, 0.99%)</title><rect x="1139.2" y="499.0" width="11.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1142.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenCompleteAsync (2 samples, 0.05%)</title><rect x="1139.5" y="483.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1142.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.05%)</title><rect x="1139.5" y="467.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1142.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1139.5" y="451.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1142.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1139.5" y="435.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1142.5" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.&lt;init&gt; (26 samples, 0.63%)</title><rect x="1140.1" y="483.0" width="7.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1143.1" y="494.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (2 samples, 0.05%)</title><rect x="1140.3" y="467.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1143.3" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (2 samples, 0.05%)</title><rect x="1140.3" y="451.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1143.3" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.02%)</title><rect x="1140.6" y="435.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1143.6" y="446.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (1 samples, 0.02%)</title><rect x="1140.6" y="419.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1143.6" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.02%)</title><rect x="1140.6" y="403.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1143.6" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.02%)</title><rect x="1140.6" y="387.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1143.6" y="398.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.02%)</title><rect x="1140.6" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1143.6" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.02%)</title><rect x="1140.6" y="355.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1143.6" y="366.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.tryAdvance (1 samples, 0.02%)</title><rect x="1140.6" y="339.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1143.6" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$5$1.accept (1 samples, 0.02%)</title><rect x="1140.6" y="323.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1143.6" y="334.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (4 samples, 0.10%)</title><rect x="1140.9" y="467.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1143.9" y="478.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (4 samples, 0.10%)</title><rect x="1140.9" y="451.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1143.9" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.forEach (2 samples, 0.05%)</title><rect x="1140.9" y="435.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1143.9" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (1 samples, 0.02%)</title><rect x="1141.2" y="419.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1144.2" y="430.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$131/176766706.accept (1 samples, 0.02%)</title><rect x="1141.2" y="403.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1144.2" y="414.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (1 samples, 0.02%)</title><rect x="1141.2" y="387.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1144.2" y="398.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.02%)</title><rect x="1141.2" y="371.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1144.2" y="382.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$141/1026326437.accept (1 samples, 0.02%)</title><rect x="1141.2" y="355.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1144.2" y="366.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (1 samples, 0.02%)</title><rect x="1141.2" y="339.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1144.2" y="350.0"></text>
</g>
<g>
<title>java/lang/String.trim (1 samples, 0.02%)</title><rect x="1141.2" y="323.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1144.2" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (1 samples, 0.02%)</title><rect x="1141.2" y="307.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1144.2" y="318.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableMap (2 samples, 0.05%)</title><rect x="1141.5" y="435.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1144.5" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.05%)</title><rect x="1141.5" y="419.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.5" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.05%)</title><rect x="1141.5" y="403.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.5" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.05%)</title><rect x="1141.5" y="387.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.5" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="1141.5" y="371.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.5" y="382.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.02%)</title><rect x="1141.5" y="355.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.5" y="366.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="1141.5" y="339.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.5" y="350.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="1141.8" y="355.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.8" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="1141.8" y="339.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.8" y="350.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.02%)</title><rect x="1141.8" y="323.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.8" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.checkURI (1 samples, 0.02%)</title><rect x="1142.1" y="467.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1145.1" y="478.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.02%)</title><rect x="1142.1" y="451.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1145.1" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.02%)</title><rect x="1142.1" y="435.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1145.1" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.retrieveProxy (17 samples, 0.41%)</title><rect x="1142.3" y="467.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1145.3" y="478.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector.select (17 samples, 0.41%)</title><rect x="1142.3" y="451.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1145.3" y="462.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (17 samples, 0.41%)</title><rect x="1142.3" y="435.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1145.3" y="446.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.02%)</title><rect x="1142.3" y="419.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.3" y="430.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (12 samples, 0.29%)</title><rect x="1142.6" y="419.0" width="3.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1145.6" y="430.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::push(Metadata* const&amp;) (1 samples, 0.02%)</title><rect x="1142.9" y="403.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.9" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.02%)</title><rect x="1143.2" y="403.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.2" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.02%)</title><rect x="1143.2" y="387.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.2" y="398.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (5 samples, 0.12%)</title><rect x="1143.5" y="403.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.5" y="414.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.05%)</title><rect x="1143.8" y="387.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.8" y="398.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.05%)</title><rect x="1144.3" y="387.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.3" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.02%)</title><rect x="1144.9" y="403.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.9" y="414.0"></text>
</g>
<g>
<title>nmethod::scopes_pcs_begin() const (1 samples, 0.02%)</title><rect x="1145.2" y="403.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.2" y="414.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (2 samples, 0.05%)</title><rect x="1145.5" y="403.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.5" y="414.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (1 samples, 0.02%)</title><rect x="1145.8" y="387.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.8" y="398.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.02%)</title><rect x="1146.1" y="419.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.1" y="430.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector$4.run (3 samples, 0.07%)</title><rect x="1146.3" y="419.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1149.3" y="430.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector$4.run (3 samples, 0.07%)</title><rect x="1146.3" y="403.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1149.3" y="414.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.07%)</title><rect x="1146.3" y="387.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1149.3" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.07%)</title><rect x="1146.3" y="371.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1149.3" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.07%)</title><rect x="1146.3" y="355.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1149.3" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1146.9" y="339.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1149.9" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.setHeader (1 samples, 0.02%)</title><rect x="1147.2" y="467.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1150.2" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.02%)</title><rect x="1147.2" y="451.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1150.2" y="462.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.02%)</title><rect x="1147.2" y="435.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1150.2" y="446.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.02%)</title><rect x="1147.2" y="419.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1150.2" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.02%)</title><rect x="1147.2" y="403.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1150.2" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.&lt;init&gt; (6 samples, 0.15%)</title><rect x="1147.5" y="483.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1150.5" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1147.5" y="467.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1150.5" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.getDebugLogger (1 samples, 0.02%)</title><rect x="1147.5" y="451.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1150.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.getDebugLogger (1 samples, 0.02%)</title><rect x="1147.5" y="435.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1150.5" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/DebugLogger.createHttpLogger (1 samples, 0.02%)</title><rect x="1147.5" y="419.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1150.5" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/DebugLogger.levelEnabledFor (1 samples, 0.02%)</title><rect x="1147.5" y="403.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1150.5" y="414.0"></text>
</g>
<g>
<title>sun/util/logging/internal/LoggingProviderImpl$JULWrapper.isLoggable (1 samples, 0.02%)</title><rect x="1147.5" y="387.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1150.5" y="398.0"></text>
</g>
<g>
<title>sun/util/logging/internal/LoggingProviderImpl$JULWrapper.toJUL (1 samples, 0.02%)</title><rect x="1147.5" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1150.5" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.filterChain (5 samples, 0.12%)</title><rect x="1147.8" y="467.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1150.8" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/FilterFactory.getFilterChain (4 samples, 0.10%)</title><rect x="1148.1" y="451.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1151.1" y="462.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (1 samples, 0.02%)</title><rect x="1148.6" y="435.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1151.6" y="446.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (1 samples, 0.02%)</title><rect x="1148.6" y="419.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1151.6" y="430.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (1 samples, 0.02%)</title><rect x="1148.6" y="403.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1151.6" y="414.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (1 samples, 0.02%)</title><rect x="1148.6" y="387.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1151.6" y="398.0"></text>
</g>
<g>
<title>java/lang/Class.newReflectionData (1 samples, 0.02%)</title><rect x="1148.6" y="371.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1151.6" y="382.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.02%)</title><rect x="1148.9" y="435.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1151.9" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsync (6 samples, 0.15%)</title><rect x="1149.2" y="483.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1152.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeAsync (2 samples, 0.05%)</title><rect x="1149.2" y="467.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1152.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.05%)</title><rect x="1149.2" y="451.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1152.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.05%)</title><rect x="1149.2" y="435.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1152.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.05%)</title><rect x="1149.2" y="419.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1152.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title><rect x="1149.2" y="403.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1152.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.05%)</title><rect x="1149.2" y="387.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1152.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.05%)</title><rect x="1149.2" y="371.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1152.2" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.05%)</title><rect x="1149.2" y="355.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1152.2" y="366.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.05%)</title><rect x="1149.2" y="339.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1152.2" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsync0 (4 samples, 0.10%)</title><rect x="1149.8" y="467.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1152.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (4 samples, 0.10%)</title><rect x="1149.8" y="451.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1152.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (4 samples, 0.10%)</title><rect x="1149.8" y="435.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1152.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1149.8" y="419.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1152.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1149.8" y="403.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1152.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1149.8" y="387.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1152.8" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (3 samples, 0.07%)</title><rect x="1150.0" y="419.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1153.0" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (3 samples, 0.07%)</title><rect x="1150.0" y="403.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1153.0" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.&lt;init&gt; (3 samples, 0.07%)</title><rect x="1150.0" y="387.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1153.0" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.build (7 samples, 0.17%)</title><rect x="1150.9" y="547.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1153.9" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ImmutableHttpRequest.&lt;init&gt; (7 samples, 0.17%)</title><rect x="1150.9" y="531.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1153.9" y="542.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (7 samples, 0.17%)</title><rect x="1150.9" y="515.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1153.9" y="526.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (7 samples, 0.17%)</title><rect x="1150.9" y="499.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1153.9" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (5 samples, 0.12%)</title><rect x="1151.5" y="483.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1154.5" y="494.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$131/176766706.accept (4 samples, 0.10%)</title><rect x="1151.8" y="467.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1154.8" y="478.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (4 samples, 0.10%)</title><rect x="1151.8" y="451.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1154.8" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (3 samples, 0.07%)</title><rect x="1152.0" y="435.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1155.0" y="446.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$141/1026326437.accept (3 samples, 0.07%)</title><rect x="1152.0" y="419.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1155.0" y="430.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (3 samples, 0.07%)</title><rect x="1152.0" y="403.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1155.0" y="414.0"></text>
</g>
<g>
<title>java/lang/String.trim (3 samples, 0.07%)</title><rect x="1152.0" y="387.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1155.0" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (3 samples, 0.07%)</title><rect x="1152.0" y="371.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1155.0" y="382.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="1152.6" y="355.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1155.6" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.checkNameAndValue (1 samples, 0.02%)</title><rect x="1152.9" y="547.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1155.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/clustering/ConsistentHashingTopology.replicasFor (9 samples, 0.22%)</title><rect x="1153.2" y="547.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1156.2" y="558.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.hashBytes (5 samples, 0.12%)</title><rect x="1153.5" y="531.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1156.5" y="542.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.hash (2 samples, 0.05%)</title><rect x="1153.8" y="515.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1156.8" y="526.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.processRemaining (1 samples, 0.02%)</title><rect x="1153.8" y="499.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1156.8" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="1153.8" y="483.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1156.8" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="1154.0" y="499.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1157.0" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="1154.0" y="483.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1157.0" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="1154.0" y="467.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1157.0" y="478.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.putBytes (2 samples, 0.05%)</title><rect x="1154.3" y="515.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1157.3" y="526.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.putBytesInternal (2 samples, 0.05%)</title><rect x="1154.3" y="499.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1157.3" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.02%)</title><rect x="1154.6" y="483.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1157.6" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="1154.6" y="467.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1157.6" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="1154.6" y="451.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1157.6" y="462.0"></text>
</g>
<g>
<title>com/google/common/hash/HashCode$BytesHashCode.asLong (1 samples, 0.02%)</title><rect x="1154.9" y="531.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1157.9" y="542.0"></text>
</g>
<g>
<title>com/google/common/hash/HashCode$BytesHashCode.padToLong (1 samples, 0.02%)</title><rect x="1154.9" y="515.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1157.9" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (2 samples, 0.05%)</title><rect x="1155.2" y="531.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1158.2" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1155.2" y="515.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1158.2" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (1 samples, 0.02%)</title><rect x="1155.2" y="499.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1158.2" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (1 samples, 0.02%)</title><rect x="1155.5" y="499.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1158.5" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="1155.5" y="483.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.5" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/FuturesUtils.atLeastAsync (4 samples, 0.10%)</title><rect x="1155.8" y="547.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1158.8" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (2 samples, 0.05%)</title><rect x="1156.3" y="531.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1159.3" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/FuturesUtils$$Lambda$187/449291540.accept (2 samples, 0.05%)</title><rect x="1156.3" y="515.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1159.3" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/FuturesUtils.lambda$atLeastAsync$1 (2 samples, 0.05%)</title><rect x="1156.3" y="499.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1159.3" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/380931844.linkToTargetMethod (1 samples, 0.02%)</title><rect x="1156.3" y="483.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1159.3" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/2114684409.invokeStatic (1 samples, 0.02%)</title><rect x="1156.3" y="467.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1159.3" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/FuturesUtils$$Lambda$192/574997146.get$Lambda (1 samples, 0.02%)</title><rect x="1156.3" y="451.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1159.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenCompleteAsync (1 samples, 0.02%)</title><rect x="1156.6" y="483.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1159.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.02%)</title><rect x="1156.6" y="467.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1159.6" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.02%)</title><rect x="1156.6" y="451.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1159.6" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.02%)</title><rect x="1156.6" y="435.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1159.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.requestForReplica (15 samples, 0.36%)</title><rect x="1156.9" y="547.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1159.9" y="558.0"></text>
</g>
<g>
<title>java/net/URI.create (12 samples, 0.29%)</title><rect x="1156.9" y="531.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1159.9" y="542.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (12 samples, 0.29%)</title><rect x="1156.9" y="515.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1159.9" y="526.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (12 samples, 0.29%)</title><rect x="1156.9" y="499.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1159.9" y="510.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="1156.9" y="483.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1159.9" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="1156.9" y="467.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1159.9" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="1156.9" y="451.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1159.9" y="462.0"></text>
</g>
<g>
<title>java/net/URI$Parser.at (2 samples, 0.05%)</title><rect x="1157.2" y="483.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1160.2" y="494.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.05%)</title><rect x="1157.2" y="467.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1160.2" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.02%)</title><rect x="1157.5" y="451.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1160.5" y="462.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHierarchical (9 samples, 0.22%)</title><rect x="1157.8" y="483.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1160.8" y="494.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.05%)</title><rect x="1157.8" y="467.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1160.8" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.05%)</title><rect x="1157.8" y="451.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1160.8" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="1157.8" y="435.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.8" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="1157.8" y="419.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.8" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="1157.8" y="403.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.8" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="1157.8" y="387.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.8" y="398.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="1157.8" y="371.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.8" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="1157.8" y="355.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.8" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.02%)</title><rect x="1157.8" y="339.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.8" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="1158.0" y="435.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1161.0" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="1158.0" y="419.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.0" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="1158.0" y="403.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.0" y="414.0"></text>
</g>
<g>
<title>java/net/URI$Parser.at (1 samples, 0.02%)</title><rect x="1158.3" y="467.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1161.3" y="478.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.02%)</title><rect x="1158.3" y="451.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1161.3" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.02%)</title><rect x="1158.3" y="435.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1161.3" y="446.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseAuthority (6 samples, 0.15%)</title><rect x="1158.6" y="467.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1161.6" y="478.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (1 samples, 0.02%)</title><rect x="1159.2" y="451.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1162.2" y="462.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseIPv4Address (1 samples, 0.02%)</title><rect x="1159.2" y="435.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1162.2" y="446.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scanIPv4Address (1 samples, 0.02%)</title><rect x="1159.2" y="419.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1162.2" y="430.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (1 samples, 0.02%)</title><rect x="1159.2" y="403.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1162.2" y="414.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (3 samples, 0.07%)</title><rect x="1159.5" y="451.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1162.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.header (2 samples, 0.05%)</title><rect x="1160.3" y="531.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1163.3" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.header (2 samples, 0.05%)</title><rect x="1160.3" y="515.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1163.3" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.checkNameAndValue (1 samples, 0.02%)</title><rect x="1160.3" y="499.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1163.3" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.isValidValue (1 samples, 0.02%)</title><rect x="1160.3" y="483.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1163.3" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.addHeader (1 samples, 0.02%)</title><rect x="1160.6" y="499.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1163.6" y="510.0"></text>
</g>
<g>
<title>java/util/Map.computeIfAbsent (1 samples, 0.02%)</title><rect x="1160.6" y="483.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1163.6" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.02%)</title><rect x="1160.6" y="467.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1163.6" y="478.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.02%)</title><rect x="1160.6" y="451.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1163.6" y="462.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.02%)</title><rect x="1160.6" y="435.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1163.6" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.02%)</title><rect x="1160.6" y="419.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1163.6" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.uri (1 samples, 0.02%)</title><rect x="1160.9" y="531.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1163.9" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.uri (1 samples, 0.02%)</title><rect x="1160.9" y="515.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1163.9" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.checkURI (1 samples, 0.02%)</title><rect x="1160.9" y="499.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1163.9" y="510.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (1 samples, 0.02%)</title><rect x="1160.9" y="483.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1163.9" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.toLowerCase (1 samples, 0.02%)</title><rect x="1160.9" y="467.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1163.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.respond (4 samples, 0.10%)</title><rect x="1161.2" y="563.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1164.2" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.05%)</title><rect x="1161.2" y="547.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1164.2" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.05%)</title><rect x="1161.2" y="531.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1164.2" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$206/2123650476.get$Lambda (2 samples, 0.05%)</title><rect x="1161.2" y="515.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1164.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.05%)</title><rect x="1161.7" y="547.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1164.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.05%)</title><rect x="1161.7" y="531.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1164.7" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.05%)</title><rect x="1161.7" y="515.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.7" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.05%)</title><rect x="1161.7" y="499.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.7" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.05%)</title><rect x="1161.7" y="483.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.7" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="1161.7" y="467.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.7" y="478.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title><rect x="1161.7" y="451.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.7" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title><rect x="1161.7" y="435.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.7" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)</title><rect x="1161.7" y="419.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.7" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.02%)</title><rect x="1161.7" y="403.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.7" y="414.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.02%)</title><rect x="1161.7" y="387.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.7" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.02%)</title><rect x="1161.7" y="371.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.7" y="382.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.02%)</title><rect x="1161.7" y="355.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.7" y="366.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.02%)</title><rect x="1161.7" y="339.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.7" y="350.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.02%)</title><rect x="1162.0" y="419.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.0" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.02%)</title><rect x="1162.0" y="403.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.0" y="414.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="1162.0" y="387.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/SimpleRequests.get (10 samples, 0.24%)</title><rect x="1162.3" y="563.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1165.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.supplyAsync (10 samples, 0.24%)</title><rect x="1162.3" y="547.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1165.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.asyncSupplyStage (10 samples, 0.24%)</title><rect x="1162.3" y="531.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1165.3" y="542.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.02%)</title><rect x="1162.3" y="515.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (9 samples, 0.22%)</title><rect x="1162.6" y="515.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1165.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (9 samples, 0.22%)</title><rect x="1162.6" y="499.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1165.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.02%)</title><rect x="1162.6" y="483.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1165.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.02%)</title><rect x="1162.6" y="467.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1165.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.02%)</title><rect x="1162.6" y="451.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1165.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.02%)</title><rect x="1162.6" y="435.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1165.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.02%)</title><rect x="1162.6" y="419.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1165.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 0.19%)</title><rect x="1162.9" y="483.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1165.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.19%)</title><rect x="1162.9" y="467.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1165.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.19%)</title><rect x="1162.9" y="451.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1165.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.19%)</title><rect x="1162.9" y="435.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1165.9" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (8 samples, 0.19%)</title><rect x="1162.9" y="419.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1165.9" y="430.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.07%)</title><rect x="1162.9" y="403.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1165.9" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.02%)</title><rect x="1162.9" y="387.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.9" y="398.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.02%)</title><rect x="1163.2" y="387.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.2" y="398.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="1163.5" y="387.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1166.5" y="398.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 0.10%)</title><rect x="1163.7" y="403.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1166.7" y="414.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1164.9" y="403.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1167.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/SimpleRequests.put (1 samples, 0.02%)</title><rect x="1165.2" y="563.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1168.2" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="1165.2" y="547.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1168.2" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="1165.2" y="531.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1168.2" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/SimpleRequests$$Lambda$383/1483224964.get$Lambda (1 samples, 0.02%)</title><rect x="1165.2" y="515.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1168.2" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/SimpleRequests$$Lambda$383/1483224964.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1165.2" y="499.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1168.2" y="510.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (6 samples, 0.15%)</title><rect x="1165.5" y="595.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1168.5" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.15%)</title><rect x="1165.5" y="579.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1168.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.15%)</title><rect x="1165.5" y="563.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1168.5" y="574.0"></text>
</g>
<g>
<title>java/lang/String.equals (5 samples, 0.12%)</title><rect x="1165.7" y="547.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1168.7" y="558.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="1166.9" y="531.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1169.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.10%)</title><rect x="1167.2" y="595.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1170.2" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.07%)</title><rect x="1167.5" y="579.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1170.5" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.07%)</title><rect x="1167.5" y="563.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1170.5" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1167.5" y="547.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1170.5" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.05%)</title><rect x="1167.7" y="547.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1170.7" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.17%)</title><rect x="1168.3" y="627.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1171.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1168.3" y="611.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1171.3" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="1168.3" y="595.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1171.3" y="606.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="1168.3" y="579.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1171.3" y="590.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.02%)</title><rect x="1168.3" y="563.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1171.3" y="574.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1168.6" y="595.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1171.6" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.12%)</title><rect x="1168.9" y="611.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1171.9" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.12%)</title><rect x="1168.9" y="595.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1171.9" y="606.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1169.7" y="579.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1172.7" y="590.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1169.7" y="563.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1172.7" y="574.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.02%)</title><rect x="1170.0" y="547.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1173.0" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="1170.0" y="531.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.0" y="542.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="1170.0" y="515.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.0" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.02%)</title><rect x="1170.3" y="627.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1173.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.02%)</title><rect x="1170.6" y="627.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1173.6" y="638.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="1170.6" y="611.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1173.6" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="1170.6" y="595.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1173.6" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="1170.6" y="579.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.6" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="1170.6" y="563.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.6" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="1170.6" y="547.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.6" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="1170.6" y="531.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.6" y="542.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.02%)</title><rect x="1170.6" y="515.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.6" y="526.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="1170.6" y="499.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.6" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.07%)</title><rect x="1170.9" y="627.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1173.9" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.07%)</title><rect x="1170.9" y="611.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1173.9" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.07%)</title><rect x="1170.9" y="595.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.9" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.07%)</title><rect x="1170.9" y="579.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.9" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.07%)</title><rect x="1170.9" y="563.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.9" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.07%)</title><rect x="1170.9" y="547.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.9" y="558.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.02%)</title><rect x="1170.9" y="531.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.9" y="542.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab(Klass*, HeapWord*, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="1170.9" y="515.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.9" y="526.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.02%)</title><rect x="1170.9" y="499.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.9" y="510.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title><rect x="1171.2" y="531.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.2" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title><rect x="1171.2" y="515.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.2" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.02%)</title><rect x="1171.2" y="499.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.2" y="510.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.02%)</title><rect x="1171.5" y="499.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.5" y="510.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.02%)</title><rect x="1171.7" y="643.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1174.7" y="654.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (23 samples, 0.56%)</title><rect x="1172.0" y="643.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1175.0" y="654.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (23 samples, 0.56%)</title><rect x="1172.0" y="627.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1175.0" y="638.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (12 samples, 0.29%)</title><rect x="1172.3" y="611.0" width="3.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1175.3" y="622.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1172.6" y="595.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1175.6" y="606.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (1 samples, 0.02%)</title><rect x="1172.9" y="595.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.9" y="606.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.02%)</title><rect x="1173.2" y="595.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1176.2" y="606.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (7 samples, 0.17%)</title><rect x="1173.4" y="595.0" width="2.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1176.4" y="606.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.12%)</title><rect x="1173.7" y="579.0" width="1.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1176.7" y="590.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.02%)</title><rect x="1174.9" y="563.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.9" y="574.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.02%)</title><rect x="1175.2" y="579.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="590.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.02%)</title><rect x="1175.4" y="595.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.4" y="606.0"></text>
</g>
<g>
<title>__recv (9 samples, 0.22%)</title><rect x="1175.7" y="611.0" width="2.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1178.7" y="622.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.02%)</title><rect x="1178.3" y="611.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1181.3" y="622.0"></text>
</g>
<g>
<title>start_thread (40 samples, 0.97%)</title><rect x="1178.6" y="691.0" width="11.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1181.6" y="702.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (40 samples, 0.97%)</title><rect x="1178.6" y="675.0" width="11.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1181.6" y="686.0"></text>
</g>
<g>
<title>Thread::call_run() (40 samples, 0.97%)</title><rect x="1178.6" y="659.0" width="11.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.6" y="670.0"></text>
</g>
<g>
<title>GangWorker::loop() (39 samples, 0.94%)</title><rect x="1178.6" y="643.0" width="11.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.6" y="654.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (39 samples, 0.94%)</title><rect x="1178.6" y="627.0" width="11.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="638.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (19 samples, 0.46%)</title><rect x="1178.6" y="611.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="622.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.05%)</title><rect x="1178.6" y="595.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.6" y="606.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.02%)</title><rect x="1178.9" y="579.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1181.9" y="590.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.02%)</title><rect x="1179.2" y="595.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.2" y="606.0"></text>
</g>
<g>
<title>SpinPause (16 samples, 0.39%)</title><rect x="1179.4" y="595.0" width="4.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1182.4" y="606.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (17 samples, 0.41%)</title><rect x="1184.0" y="611.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="622.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (17 samples, 0.41%)</title><rect x="1184.0" y="595.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (17 samples, 0.41%)</title><rect x="1184.0" y="579.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.0" y="590.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (17 samples, 0.41%)</title><rect x="1184.0" y="563.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.0" y="574.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (17 samples, 0.41%)</title><rect x="1184.0" y="547.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.0" y="558.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (14 samples, 0.34%)</title><rect x="1184.0" y="531.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.0" y="542.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (3 samples, 0.07%)</title><rect x="1185.1" y="515.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.1" y="526.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (3 samples, 0.07%)</title><rect x="1185.1" y="499.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.1" y="510.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.02%)</title><rect x="1185.7" y="483.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.7" y="494.0"></text>
</g>
<g>
<title>G1ContiguousSpace::block_start(void const*) (1 samples, 0.02%)</title><rect x="1186.0" y="515.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.0" y="526.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (2 samples, 0.05%)</title><rect x="1186.3" y="515.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.3" y="526.0"></text>
</g>
<g>
<title>EnableIf&lt;!IsSame&lt;G1ScanObjsDuringUpdateRSClosure, OopClosure&gt;::value, void&gt;::type call_do_oop&lt;unsigned int, G1ScanObjsDuringUpdateRSClosure, OopClosure, G1ScanObjsDuringUpdateRSClosure&gt;(void (G1ScanObjsDuringUpdateRSClosure::*)(unsigned int*), void (OopClosure::*)(unsigned int*), G1ScanObjsDuringUpdateRSClosure*, unsigned int*) (2 samples, 0.05%)</title><rect x="1186.3" y="499.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.3" y="510.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.02%)</title><rect x="1186.6" y="483.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.6" y="494.0"></text>
</g>
<g>
<title>SparsePRT::add_card(int, int) (1 samples, 0.02%)</title><rect x="1186.6" y="467.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.6" y="478.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (4 samples, 0.10%)</title><rect x="1186.9" y="515.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.9" y="526.0"></text>
</g>
<g>
<title>EnableIf&lt;!IsSame&lt;G1ScanObjsDuringUpdateRSClosure, OopClosure&gt;::value, void&gt;::type call_do_oop&lt;unsigned int, G1ScanObjsDuringUpdateRSClosure, OopClosure, G1ScanObjsDuringUpdateRSClosure&gt;(void (G1ScanObjsDuringUpdateRSClosure::*)(unsigned int*), void (OopClosure::*)(unsigned int*), G1ScanObjsDuringUpdateRSClosure*, unsigned int*) (3 samples, 0.07%)</title><rect x="1187.1" y="499.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.1" y="510.0"></text>
</g>
<g>
<title>G1ScanClosureBase::trim_queue_partially() (3 samples, 0.07%)</title><rect x="1188.0" y="531.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.0" y="542.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.07%)</title><rect x="1188.0" y="515.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.0" y="526.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.07%)</title><rect x="1188.9" y="611.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.9" y="622.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.05%)</title><rect x="1188.9" y="595.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="606.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.05%)</title><rect x="1188.9" y="579.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="590.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.05%)</title><rect x="1188.9" y="563.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="574.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.02%)</title><rect x="1189.1" y="547.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.1" y="558.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="1189.1" y="531.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.1" y="542.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (1 samples, 0.02%)</title><rect x="1189.4" y="595.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.4" y="606.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.02%)</title><rect x="1189.4" y="579.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.4" y="590.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.02%)</title><rect x="1189.7" y="643.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.7" y="654.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.02%)</title><rect x="1189.7" y="627.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.7" y="638.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.02%)</title><rect x="1189.7" y="611.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.7" y="622.0"></text>
</g>
</g>
</svg>
