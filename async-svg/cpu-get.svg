<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="997"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="997"> </text>
<g id="frames">
<g>
<title>all (139 samples, 100.00%)</title><rect x="10.0" y="963.0" width="1180.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="974.0">all</text>
</g>
<g>
<title>_int_malloc (1 samples, 0.72%)</title><rect x="10.0" y="947.0" width="8.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (83 samples, 59.71%)</title><rect x="18.5" y="947.0" width="704.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="21.5" y="958.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 1.44%)</title><rect x="18.5" y="931.0" width="17.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.5" y="942.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 1.44%)</title><rect x="18.5" y="915.0" width="17.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.5" y="926.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (16 samples, 11.51%)</title><rect x="35.5" y="931.0" width="135.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="38.5" y="942.0">one/nio/net/Nativ..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (15 samples, 10.79%)</title><rect x="44.0" y="915.0" width="127.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="47.0" y="926.0">one/nio/net/Nati..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.72%)</title><rect x="52.4" y="899.0" width="8.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="55.4" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 2.16%)</title><rect x="60.9" y="899.0" width="25.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="63.9" y="910.0">_..</text>
</g>
<g>
<title>clock_gettime (1 samples, 0.72%)</title><rect x="77.9" y="883.0" width="8.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="80.9" y="894.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 1.44%)</title><rect x="86.4" y="899.0" width="17.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="89.4" y="910.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 1.44%)</title><rect x="103.4" y="899.0" width="17.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="106.4" y="910.0"></text>
</g>
<g>
<title>epoll_wait (6 samples, 4.32%)</title><rect x="120.4" y="899.0" width="50.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="123.4" y="910.0">epoll..</text>
</g>
<g>
<title>one/nio/net/Session.process (65 samples, 46.76%)</title><rect x="171.3" y="931.0" width="551.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="174.3" y="942.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (65 samples, 46.76%)</title><rect x="171.3" y="915.0" width="551.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="174.3" y="926.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (53 samples, 38.13%)</title><rect x="179.8" y="899.0" width="449.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="182.8" y="910.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (48 samples, 34.53%)</title><rect x="179.8" y="883.0" width="407.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="182.8" y="894.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (48 samples, 34.53%)</title><rect x="179.8" y="867.0" width="407.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="182.8" y="878.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_response.handleRequest (48 samples, 34.53%)</title><rect x="179.8" y="851.0" width="407.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="182.8" y="862.0">RequestHandler0_response.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (4 samples, 2.88%)</title><rect x="179.8" y="835.0" width="33.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="182.8" y="846.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (2 samples, 1.44%)</title><rect x="179.8" y="819.0" width="17.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.8" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (2 samples, 1.44%)</title><rect x="179.8" y="803.0" width="17.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="182.8" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (2 samples, 1.44%)</title><rect x="179.8" y="787.0" width="17.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="182.8" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (2 samples, 1.44%)</title><rect x="179.8" y="771.0" width="17.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="182.8" y="782.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (2 samples, 1.44%)</title><rect x="179.8" y="755.0" width="17.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.8" y="766.0"></text>
</g>
<g>
<title>__libc_send (1 samples, 0.72%)</title><rect x="188.3" y="739.0" width="8.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="191.3" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 1.44%)</title><rect x="196.8" y="819.0" width="16.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="199.8" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 1.44%)</title><rect x="196.8" y="803.0" width="16.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="199.8" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 1.44%)</title><rect x="196.8" y="787.0" width="16.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 1.44%)</title><rect x="196.8" y="771.0" width="16.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="199.8" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 1.44%)</title><rect x="196.8" y="755.0" width="16.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="199.8" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.72%)</title><rect x="196.8" y="739.0" width="8.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="199.8" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.72%)</title><rect x="196.8" y="723.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="199.8" y="734.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.72%)</title><rect x="205.3" y="739.0" width="8.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="208.3" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (44 samples, 31.65%)</title><rect x="213.7" y="835.0" width="373.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="216.7" y="846.0">ru/mail/polis/service/mrsandman5/ServiceImpl.response</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (22 samples, 15.83%)</title><rect x="213.7" y="819.0" width="186.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.7" y="830.0">ch/qos/logback/classic/L..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (22 samples, 15.83%)</title><rect x="213.7" y="803.0" width="186.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="216.7" y="814.0">ch/qos/logback/classic/L..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (22 samples, 15.83%)</title><rect x="213.7" y="787.0" width="186.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.7" y="798.0">ch/qos/logback/classic/L..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (21 samples, 15.11%)</title><rect x="213.7" y="771.0" width="178.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.7" y="782.0">ch/qos/logback/classic/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (21 samples, 15.11%)</title><rect x="213.7" y="755.0" width="178.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.7" y="766.0">ch/qos/logback/classic/..</text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (21 samples, 15.11%)</title><rect x="213.7" y="739.0" width="178.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.7" y="750.0">ch/qos/logback/core/spi..</text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (21 samples, 15.11%)</title><rect x="213.7" y="723.0" width="178.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.7" y="734.0">ch/qos/logback/core/Uns..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (21 samples, 15.11%)</title><rect x="213.7" y="707.0" width="178.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="216.7" y="718.0">ch/qos/logback/core/Out..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (21 samples, 15.11%)</title><rect x="213.7" y="691.0" width="178.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="216.7" y="702.0">ch/qos/logback/core/Out..</text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.prepareForDeferredProcessing (3 samples, 2.16%)</title><rect x="222.2" y="675.0" width="25.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="225.2" y="686.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.getFormattedMessage (2 samples, 1.44%)</title><rect x="222.2" y="659.0" width="17.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="225.2" y="670.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (2 samples, 1.44%)</title><rect x="222.2" y="643.0" width="17.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="225.2" y="654.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (2 samples, 1.44%)</title><rect x="222.2" y="627.0" width="17.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.2" y="638.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.72%)</title><rect x="222.2" y="611.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.2" y="622.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.72%)</title><rect x="222.2" y="595.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.2" y="606.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.appendChars (1 samples, 0.72%)</title><rect x="222.2" y="579.0" width="8.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="225.2" y="590.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.72%)</title><rect x="222.2" y="563.0" width="8.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="225.2" y="574.0"></text>
</g>
<g>
<title>org/slf4j/helpers/FormattingTuple.&lt;init&gt; (1 samples, 0.72%)</title><rect x="230.7" y="611.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.7" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.getMDCPropertyMap (1 samples, 0.72%)</title><rect x="239.2" y="659.0" width="8.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.2" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.writeBytes (13 samples, 9.35%)</title><rect x="247.7" y="675.0" width="110.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="250.7" y="686.0">ch/qos/logbac..</text>
</g>
<g>
<title>ch/qos/logback/core/joran/spi/ConsoleTarget$1.write (11 samples, 7.91%)</title><rect x="247.7" y="659.0" width="93.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.7" y="670.0">ch/qos/logb..</text>
</g>
<g>
<title>java/io/FilterOutputStream.write (11 samples, 7.91%)</title><rect x="247.7" y="643.0" width="93.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.7" y="654.0">java/io/Fil..</text>
</g>
<g>
<title>java/io/PrintStream.write (11 samples, 7.91%)</title><rect x="247.7" y="627.0" width="93.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.7" y="638.0">java/io/Pri..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (8 samples, 5.76%)</title><rect x="256.2" y="611.0" width="67.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.2" y="622.0">java/io..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (8 samples, 5.76%)</title><rect x="256.2" y="595.0" width="67.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="259.2" y="606.0">java/io..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (8 samples, 5.76%)</title><rect x="256.2" y="579.0" width="67.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.2" y="590.0">java/io..</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (8 samples, 5.76%)</title><rect x="256.2" y="563.0" width="67.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.2" y="574.0">java/io..</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (8 samples, 5.76%)</title><rect x="256.2" y="547.0" width="67.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="259.2" y="558.0">Java_ja..</text>
</g>
<g>
<title>jni_GetArrayLength (1 samples, 0.72%)</title><rect x="256.2" y="531.0" width="8.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="259.2" y="542.0"></text>
</g>
<g>
<title>jni_GetObjectField (1 samples, 0.72%)</title><rect x="264.7" y="531.0" width="8.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="267.7" y="542.0"></text>
</g>
<g>
<title>writeBytes (6 samples, 4.32%)</title><rect x="273.2" y="531.0" width="50.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="276.2" y="542.0">write..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.72%)</title><rect x="281.7" y="515.0" width="8.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="284.7" y="526.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.72%)</title><rect x="290.1" y="515.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="293.1" y="526.0"></text>
</g>
<g>
<title>__libc_write (1 samples, 0.72%)</title><rect x="298.6" y="515.0" width="8.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="301.6" y="526.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.72%)</title><rect x="307.1" y="515.0" width="8.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="310.1" y="526.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.72%)</title><rect x="307.1" y="499.0" width="8.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="310.1" y="510.0"></text>
</g>
<g>
<title>jni_GetObjectField (1 samples, 0.72%)</title><rect x="315.6" y="515.0" width="8.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="318.6" y="526.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.72%)</title><rect x="315.6" y="499.0" width="8.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="318.6" y="510.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (2 samples, 1.44%)</title><rect x="324.1" y="611.0" width="17.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="327.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 1.44%)</title><rect x="341.1" y="659.0" width="17.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="344.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.44%)</title><rect x="341.1" y="643.0" width="17.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="344.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 1.44%)</title><rect x="341.1" y="627.0" width="17.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="344.1" y="638.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.72%)</title><rect x="341.1" y="611.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="344.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.72%)</title><rect x="349.6" y="611.0" width="8.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="352.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.72%)</title><rect x="349.6" y="595.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="352.6" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (4 samples, 2.88%)</title><rect x="358.1" y="675.0" width="33.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="361.1" y="686.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (4 samples, 2.88%)</title><rect x="358.1" y="659.0" width="33.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="361.1" y="670.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (4 samples, 2.88%)</title><rect x="358.1" y="643.0" width="33.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="361.1" y="654.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/core/util/CachingDateFormatter.format (1 samples, 0.72%)</title><rect x="358.1" y="627.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="361.1" y="638.0"></text>
</g>
<g>
<title>java/text/DateFormat.format (1 samples, 0.72%)</title><rect x="358.1" y="611.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="361.1" y="622.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (1 samples, 0.72%)</title><rect x="358.1" y="595.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="361.1" y="606.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (1 samples, 0.72%)</title><rect x="358.1" y="579.0" width="8.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="361.1" y="590.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.subFormat (1 samples, 0.72%)</title><rect x="358.1" y="563.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="361.1" y="574.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.zeroPaddingNumber (1 samples, 0.72%)</title><rect x="358.1" y="547.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="361.1" y="558.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (1 samples, 0.72%)</title><rect x="358.1" y="531.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="361.1" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 2.16%)</title><rect x="366.5" y="627.0" width="25.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="369.5" y="638.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 2.16%)</title><rect x="366.5" y="611.0" width="25.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="369.5" y="622.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.72%)</title><rect x="366.5" y="595.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="369.5" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.72%)</title><rect x="366.5" y="579.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="369.5" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (1 samples, 0.72%)</title><rect x="375.0" y="595.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.0" y="606.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.72%)</title><rect x="375.0" y="579.0" width="8.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="378.0" y="590.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.72%)</title><rect x="383.5" y="595.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="386.5" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.&lt;init&gt; (1 samples, 0.72%)</title><rect x="392.0" y="771.0" width="8.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="395.0" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.72%)</title><rect x="392.0" y="755.0" width="8.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="395.0" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.72%)</title><rect x="392.0" y="739.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="395.0" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.get (16 samples, 11.51%)</title><rect x="400.5" y="819.0" width="135.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.5" y="830.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (16 samples, 11.51%)</title><rect x="400.5" y="803.0" width="135.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.5" y="814.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (1 samples, 0.72%)</title><rect x="409.0" y="787.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="412.0" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.72%)</title><rect x="409.0" y="771.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="412.0" y="782.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1 samples, 0.72%)</title><rect x="409.0" y="755.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="412.0" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (1 samples, 0.72%)</title><rect x="409.0" y="739.0" width="8.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="412.0" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1 samples, 0.72%)</title><rect x="409.0" y="723.0" width="8.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="412.0" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.72%)</title><rect x="409.0" y="707.0" width="8.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="412.0" y="718.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.72%)</title><rect x="409.0" y="691.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="412.0" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.72%)</title><rect x="409.0" y="675.0" width="8.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="412.0" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.iterator (14 samples, 10.07%)</title><rect x="417.5" y="787.0" width="118.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="420.5" y="798.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.cellIterator (14 samples, 10.07%)</title><rect x="417.5" y="771.0" width="118.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="420.5" y="782.0">ru/mail/polis/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (2 samples, 1.44%)</title><rect x="417.5" y="755.0" width="17.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="420.5" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (2 samples, 1.44%)</title><rect x="417.5" y="739.0" width="17.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="420.5" y="750.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1 samples, 0.72%)</title><rect x="417.5" y="723.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="420.5" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1 samples, 0.72%)</title><rect x="417.5" y="707.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="420.5" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.72%)</title><rect x="426.0" y="723.0" width="8.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="429.0" y="734.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.72%)</title><rect x="434.5" y="755.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="437.5" y="766.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (1 samples, 0.72%)</title><rect x="434.5" y="739.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="437.5" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (1 samples, 0.72%)</title><rect x="434.5" y="723.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="437.5" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (1 samples, 0.72%)</title><rect x="434.5" y="707.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="437.5" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.&lt;init&gt; (1 samples, 0.72%)</title><rect x="434.5" y="691.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="437.5" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.72%)</title><rect x="442.9" y="755.0" width="8.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="445.9" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.72%)</title><rect x="442.9" y="739.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="445.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (3 samples, 2.16%)</title><rect x="451.4" y="755.0" width="25.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="454.4" y="766.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (3 samples, 2.16%)</title><rect x="451.4" y="739.0" width="25.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="454.4" y="750.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3 samples, 2.16%)</title><rect x="451.4" y="723.0" width="25.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="454.4" y="734.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (3 samples, 2.16%)</title><rect x="451.4" y="707.0" width="25.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="454.4" y="718.0">c..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (3 samples, 2.16%)</title><rect x="451.4" y="691.0" width="25.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="454.4" y="702.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (2 samples, 1.44%)</title><rect x="451.4" y="675.0" width="17.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="454.4" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (2 samples, 1.44%)</title><rect x="451.4" y="659.0" width="17.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="454.4" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (2 samples, 1.44%)</title><rect x="451.4" y="643.0" width="17.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="454.4" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (1 samples, 0.72%)</title><rect x="468.4" y="675.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="471.4" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable$$Lambda$58/742670766.apply (1 samples, 0.72%)</title><rect x="468.4" y="659.0" width="8.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="471.4" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.lambda$iterator$0 (1 samples, 0.72%)</title><rect x="468.4" y="643.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="471.4" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.iterator (7 samples, 5.04%)</title><rect x="476.9" y="755.0" width="59.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="479.9" y="766.0">ru/mai..</text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (5 samples, 3.60%)</title><rect x="476.9" y="739.0" width="42.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="479.9" y="750.0">java..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (5 samples, 3.60%)</title><rect x="476.9" y="723.0" width="42.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="479.9" y="734.0">java..</text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (5 samples, 3.60%)</title><rect x="476.9" y="707.0" width="42.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="479.9" y="718.0">java..</text>
</g>
<g>
<title>java/util/TreeMap.compare (5 samples, 3.60%)</title><rect x="476.9" y="691.0" width="42.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="479.9" y="702.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 3.60%)</title><rect x="476.9" y="675.0" width="42.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="479.9" y="686.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 3.60%)</title><rect x="476.9" y="659.0" width="42.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="479.9" y="670.0">java..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 3.60%)</title><rect x="476.9" y="643.0" width="42.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="479.9" y="654.0">java..</text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (1 samples, 0.72%)</title><rect x="519.4" y="739.0" width="8.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="522.4" y="750.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.&lt;init&gt; (1 samples, 0.72%)</title><rect x="519.4" y="723.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="522.4" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.72%)</title><rect x="527.8" y="739.0" width="8.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="530.8" y="750.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.72%)</title><rect x="527.8" y="723.0" width="8.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="530.8" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (1 samples, 0.72%)</title><rect x="527.8" y="707.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="530.8" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (1 samples, 0.72%)</title><rect x="527.8" y="691.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="530.8" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.72%)</title><rect x="527.8" y="675.0" width="8.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="530.8" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.72%)</title><rect x="527.8" y="659.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="530.8" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.72%)</title><rect x="527.8" y="643.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="530.8" y="654.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.72%)</title><rect x="527.8" y="627.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="530.8" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.put (6 samples, 4.32%)</title><rect x="536.3" y="819.0" width="51.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="539.3" y="830.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.72%)</title><rect x="536.3" y="803.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="539.3" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.72%)</title><rect x="536.3" y="787.0" width="8.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="539.3" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.72%)</title><rect x="536.3" y="771.0" width="8.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="539.3" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.72%)</title><rect x="536.3" y="755.0" width="8.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="539.3" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.72%)</title><rect x="544.8" y="803.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="547.8" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.upsert (4 samples, 2.88%)</title><rect x="553.3" y="803.0" width="34.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="556.3" y="814.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1 samples, 0.72%)</title><rect x="553.3" y="787.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="556.3" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.upsert (3 samples, 2.16%)</title><rect x="561.8" y="787.0" width="25.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="564.8" y="798.0">r..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 2.16%)</title><rect x="561.8" y="771.0" width="25.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="564.8" y="782.0">j..</text>
</g>
<g>
<title>SharedRuntime::resolve_static_call_C(JavaThread*) (1 samples, 0.72%)</title><rect x="578.8" y="755.0" width="8.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="581.8" y="766.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.72%)</title><rect x="578.8" y="739.0" width="8.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="581.8" y="750.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.72%)</title><rect x="578.8" y="723.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="581.8" y="734.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.72%)</title><rect x="578.8" y="707.0" width="8.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="581.8" y="718.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.72%)</title><rect x="578.8" y="691.0" width="8.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="581.8" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 1.44%)</title><rect x="587.3" y="883.0" width="16.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="590.3" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.72%)</title><rect x="587.3" y="867.0" width="8.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="590.3" y="878.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.72%)</title><rect x="587.3" y="851.0" width="8.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="590.3" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.72%)</title><rect x="587.3" y="835.0" width="8.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="590.3" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.72%)</title><rect x="595.8" y="867.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="598.8" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.72%)</title><rect x="595.8" y="851.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="598.8" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.72%)</title><rect x="604.2" y="883.0" width="8.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="607.2" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 1.44%)</title><rect x="612.7" y="883.0" width="17.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="615.7" y="894.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 1.44%)</title><rect x="612.7" y="867.0" width="17.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="615.7" y="878.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.72%)</title><rect x="621.2" y="851.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="624.2" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (11 samples, 7.91%)</title><rect x="629.7" y="899.0" width="93.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="632.7" y="910.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (11 samples, 7.91%)</title><rect x="629.7" y="883.0" width="93.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="632.7" y="894.0">one/nio/net..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (5 samples, 3.60%)</title><rect x="646.7" y="867.0" width="42.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="649.7" y="878.0">Java..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 1.44%)</title><rect x="646.7" y="851.0" width="17.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="649.7" y="862.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 1.44%)</title><rect x="663.7" y="851.0" width="16.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="666.7" y="862.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.72%)</title><rect x="680.6" y="851.0" width="8.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="683.6" y="862.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.72%)</title><rect x="680.6" y="835.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="683.6" y="846.0"></text>
</g>
<g>
<title>__recv (3 samples, 2.16%)</title><rect x="689.1" y="867.0" width="25.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="692.1" y="878.0">_..</text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.72%)</title><rect x="714.6" y="867.0" width="8.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="717.6" y="878.0"></text>
</g>
<g>
<title>start_thread (55 samples, 39.57%)</title><rect x="723.1" y="947.0" width="466.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="726.1" y="958.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (55 samples, 39.57%)</title><rect x="723.1" y="931.0" width="466.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="726.1" y="942.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (55 samples, 39.57%)</title><rect x="723.1" y="915.0" width="466.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="726.1" y="926.0">Thread::call_run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (55 samples, 39.57%)</title><rect x="723.1" y="899.0" width="466.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="726.1" y="910.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (55 samples, 39.57%)</title><rect x="723.1" y="883.0" width="466.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="726.1" y="894.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (55 samples, 39.57%)</title><rect x="723.1" y="867.0" width="466.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="726.1" y="878.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (54 samples, 38.85%)</title><rect x="723.1" y="851.0" width="458.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="726.1" y="862.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (54 samples, 38.85%)</title><rect x="723.1" y="835.0" width="458.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="726.1" y="846.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, boo..</text>
</g>
<g>
<title>Compile::Code_Gen() (35 samples, 25.18%)</title><rect x="723.1" y="819.0" width="297.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="726.1" y="830.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.72%)</title><rect x="723.1" y="803.0" width="8.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="726.1" y="814.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.72%)</title><rect x="723.1" y="787.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="726.1" y="798.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.72%)</title><rect x="723.1" y="771.0" width="8.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="726.1" y="782.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.72%)</title><rect x="723.1" y="755.0" width="8.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="726.1" y="766.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 2.88%)</title><rect x="731.6" y="803.0" width="33.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="734.6" y="814.0">Ma..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 2.88%)</title><rect x="731.6" y="787.0" width="33.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="734.6" y="798.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.72%)</title><rect x="731.6" y="771.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="734.6" y="782.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 2.16%)</title><rect x="740.1" y="771.0" width="25.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="743.1" y="782.0">M..</text>
</g>
<g>
<title>LoadLNode::Opcode() const (1 samples, 0.72%)</title><rect x="740.1" y="755.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="743.1" y="766.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 1.44%)</title><rect x="748.6" y="755.0" width="16.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="751.6" y="766.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 1.44%)</title><rect x="748.6" y="739.0" width="16.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="751.6" y="750.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.72%)</title><rect x="748.6" y="723.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="751.6" y="734.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.72%)</title><rect x="748.6" y="707.0" width="8.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="751.6" y="718.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.72%)</title><rect x="748.6" y="691.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="751.6" y="702.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.72%)</title><rect x="748.6" y="675.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="751.6" y="686.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.72%)</title><rect x="757.1" y="723.0" width="8.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="760.1" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 2.16%)</title><rect x="765.5" y="803.0" width="25.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="768.5" y="814.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 2.16%)</title><rect x="765.5" y="787.0" width="25.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="768.5" y="798.0">P..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.72%)</title><rect x="765.5" y="771.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="768.5" y="782.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.72%)</title><rect x="765.5" y="755.0" width="8.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="768.5" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.72%)</title><rect x="774.0" y="771.0" width="8.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="777.0" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.72%)</title><rect x="782.5" y="771.0" width="8.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="785.5" y="782.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.72%)</title><rect x="782.5" y="755.0" width="8.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="785.5" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (27 samples, 19.42%)</title><rect x="791.0" y="803.0" width="229.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="794.0" y="814.0">PhaseChaitin::Register_Allocat..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.72%)</title><rect x="791.0" y="787.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="794.0" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.72%)</title><rect x="799.5" y="787.0" width="8.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="802.5" y="798.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.72%)</title><rect x="808.0" y="787.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="811.0" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 3.60%)</title><rect x="816.5" y="787.0" width="42.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="819.5" y="798.0">Phas..</text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.72%)</title><rect x="850.4" y="771.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="853.4" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 4.32%)</title><rect x="858.9" y="787.0" width="51.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="861.9" y="798.0">Phase..</text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 1.44%)</title><rect x="867.4" y="771.0" width="17.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="870.4" y="782.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.72%)</title><rect x="875.9" y="755.0" width="8.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="878.9" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 2.16%)</title><rect x="884.4" y="771.0" width="25.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="887.4" y="782.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.72%)</title><rect x="901.4" y="755.0" width="8.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="904.4" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.72%)</title><rect x="909.9" y="787.0" width="8.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="912.9" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.72%)</title><rect x="909.9" y="771.0" width="8.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="912.9" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.72%)</title><rect x="909.9" y="755.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="912.9" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 2.16%)</title><rect x="918.3" y="787.0" width="25.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="921.3" y="798.0">P..</text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.72%)</title><rect x="935.3" y="771.0" width="8.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="938.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.72%)</title><rect x="943.8" y="787.0" width="8.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="946.8" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 2.88%)</title><rect x="952.3" y="787.0" width="34.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="955.3" y="798.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 1.44%)</title><rect x="969.3" y="771.0" width="17.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="972.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.72%)</title><rect x="986.3" y="787.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="989.3" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 1.44%)</title><rect x="994.7" y="787.0" width="17.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="997.7" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.72%)</title><rect x="1003.2" y="771.0" width="8.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1006.2" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.72%)</title><rect x="1011.7" y="787.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1014.7" y="798.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.72%)</title><rect x="1011.7" y="771.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1014.7" y="782.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.72%)</title><rect x="1011.7" y="755.0" width="8.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1014.7" y="766.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.72%)</title><rect x="1011.7" y="739.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1014.7" y="750.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) [clone .clone.1] (1 samples, 0.72%)</title><rect x="1011.7" y="723.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1014.7" y="734.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.72%)</title><rect x="1011.7" y="707.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1014.7" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (16 samples, 11.51%)</title><rect x="1020.2" y="819.0" width="135.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1023.2" y="830.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (4 samples, 2.88%)</title><rect x="1020.2" y="803.0" width="34.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1023.2" y="814.0">Co..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (4 samples, 2.88%)</title><rect x="1020.2" y="787.0" width="34.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1023.2" y="798.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.44%)</title><rect x="1020.2" y="771.0" width="17.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1023.2" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.44%)</title><rect x="1020.2" y="755.0" width="17.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1023.2" y="766.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.72%)</title><rect x="1028.7" y="739.0" width="8.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1031.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.72%)</title><rect x="1037.2" y="771.0" width="8.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1040.2" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.72%)</title><rect x="1037.2" y="755.0" width="8.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1040.2" y="766.0"></text>
</g>
<g>
<title>ConstraintCastNode::dominating_cast(PhaseGVN*, PhaseTransform*) const (1 samples, 0.72%)</title><rect x="1037.2" y="739.0" width="8.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1040.2" y="750.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.72%)</title><rect x="1037.2" y="723.0" width="8.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1040.2" y="734.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.72%)</title><rect x="1037.2" y="707.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1040.2" y="718.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_interface() (1 samples, 0.72%)</title><rect x="1037.2" y="691.0" width="8.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1040.2" y="702.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.72%)</title><rect x="1045.7" y="771.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1048.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.72%)</title><rect x="1054.2" y="803.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.72%)</title><rect x="1054.2" y="787.0" width="8.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.72%)</title><rect x="1054.2" y="771.0" width="8.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1057.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.72%)</title><rect x="1054.2" y="755.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1057.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.72%)</title><rect x="1054.2" y="739.0" width="8.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.72%)</title><rect x="1054.2" y="723.0" width="8.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1057.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.72%)</title><rect x="1054.2" y="707.0" width="8.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1057.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.72%)</title><rect x="1054.2" y="691.0" width="8.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1057.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.72%)</title><rect x="1054.2" y="675.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1057.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.72%)</title><rect x="1054.2" y="659.0" width="8.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1057.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.72%)</title><rect x="1054.2" y="643.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1057.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.72%)</title><rect x="1054.2" y="627.0" width="8.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1057.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.72%)</title><rect x="1054.2" y="611.0" width="8.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1057.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.72%)</title><rect x="1054.2" y="595.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1057.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.72%)</title><rect x="1054.2" y="579.0" width="8.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1057.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.72%)</title><rect x="1054.2" y="563.0" width="8.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.2" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.72%)</title><rect x="1054.2" y="547.0" width="8.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1057.2" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.72%)</title><rect x="1054.2" y="531.0" width="8.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1057.2" y="542.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.72%)</title><rect x="1054.2" y="515.0" width="8.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1057.2" y="526.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.72%)</title><rect x="1062.7" y="803.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1065.7" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (4 samples, 2.88%)</title><rect x="1071.2" y="803.0" width="33.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1074.2" y="814.0">Ph..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.72%)</title><rect x="1071.2" y="787.0" width="8.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1074.2" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.72%)</title><rect x="1071.2" y="771.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1074.2" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.72%)</title><rect x="1071.2" y="755.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1074.2" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.72%)</title><rect x="1071.2" y="739.0" width="8.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1074.2" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.72%)</title><rect x="1071.2" y="723.0" width="8.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1074.2" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.72%)</title><rect x="1071.2" y="707.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1074.2" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.72%)</title><rect x="1079.6" y="787.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1082.6" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.72%)</title><rect x="1088.1" y="787.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.1" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.72%)</title><rect x="1088.1" y="771.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1091.1" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.72%)</title><rect x="1088.1" y="755.0" width="8.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1091.1" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.72%)</title><rect x="1096.6" y="787.0" width="8.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.6" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.72%)</title><rect x="1096.6" y="771.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.6" y="782.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.72%)</title><rect x="1096.6" y="755.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1099.6" y="766.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.72%)</title><rect x="1096.6" y="739.0" width="8.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1099.6" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.72%)</title><rect x="1096.6" y="723.0" width="8.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.6" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.72%)</title><rect x="1096.6" y="707.0" width="8.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.6" y="718.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.72%)</title><rect x="1096.6" y="691.0" width="8.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1099.6" y="702.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.72%)</title><rect x="1096.6" y="675.0" width="8.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.6" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 3.60%)</title><rect x="1105.1" y="803.0" width="42.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.1" y="814.0">Phas..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 3.60%)</title><rect x="1105.1" y="787.0" width="42.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.1" y="798.0">Phas..</text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.72%)</title><rect x="1113.6" y="771.0" width="8.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.6" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.72%)</title><rect x="1113.6" y="755.0" width="8.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.6" y="766.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseGVN*) const (1 samples, 0.72%)</title><rect x="1113.6" y="739.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.6" y="750.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_interface() (1 samples, 0.72%)</title><rect x="1113.6" y="723.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.6" y="734.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 2.16%)</title><rect x="1122.1" y="771.0" width="25.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.1" y="782.0">S..</text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 2.16%)</title><rect x="1122.1" y="755.0" width="25.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.1" y="766.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 2.16%)</title><rect x="1122.1" y="739.0" width="25.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.1" y="750.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 2.16%)</title><rect x="1122.1" y="723.0" width="25.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.1" y="734.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 2.16%)</title><rect x="1122.1" y="707.0" width="25.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.1" y="718.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 2.16%)</title><rect x="1122.1" y="691.0" width="25.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.1" y="702.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 2.16%)</title><rect x="1122.1" y="675.0" width="25.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.1" y="686.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 2.16%)</title><rect x="1122.1" y="659.0" width="25.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.1" y="670.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 2.16%)</title><rect x="1122.1" y="643.0" width="25.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.1" y="654.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 2.16%)</title><rect x="1122.1" y="627.0" width="25.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.1" y="638.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 2.16%)</title><rect x="1122.1" y="611.0" width="25.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.1" y="622.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 1.44%)</title><rect x="1122.1" y="595.0" width="17.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.1" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.72%)</title><rect x="1122.1" y="579.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.1" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.72%)</title><rect x="1122.1" y="563.0" width="8.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.1" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.72%)</title><rect x="1122.1" y="547.0" width="8.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.1" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.72%)</title><rect x="1122.1" y="531.0" width="8.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.1" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.72%)</title><rect x="1122.1" y="515.0" width="8.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.1" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.72%)</title><rect x="1122.1" y="499.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.1" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.72%)</title><rect x="1122.1" y="483.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.1" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.72%)</title><rect x="1122.1" y="467.0" width="8.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.1" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.72%)</title><rect x="1122.1" y="451.0" width="8.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.1" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.72%)</title><rect x="1122.1" y="435.0" width="8.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.1" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.72%)</title><rect x="1122.1" y="419.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.1" y="430.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.72%)</title><rect x="1122.1" y="403.0" width="8.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.1" y="414.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.72%)</title><rect x="1122.1" y="387.0" width="8.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.1" y="398.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.72%)</title><rect x="1130.6" y="579.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.6" y="590.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.72%)</title><rect x="1130.6" y="563.0" width="8.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1133.6" y="574.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.72%)</title><rect x="1139.1" y="595.0" width="8.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.1" y="606.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.72%)</title><rect x="1139.1" y="579.0" width="8.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1142.1" y="590.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.72%)</title><rect x="1147.6" y="803.0" width="8.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.6" y="814.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.72%)</title><rect x="1147.6" y="787.0" width="8.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.6" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.16%)</title><rect x="1156.0" y="819.0" width="25.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.0" y="830.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.16%)</title><rect x="1156.0" y="803.0" width="25.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.0" y="814.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.16%)</title><rect x="1156.0" y="787.0" width="25.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.0" y="798.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.16%)</title><rect x="1156.0" y="771.0" width="25.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.0" y="782.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.16%)</title><rect x="1156.0" y="755.0" width="25.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.0" y="766.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.16%)</title><rect x="1156.0" y="739.0" width="25.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.0" y="750.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1156.0" y="723.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.72%)</title><rect x="1156.0" y="707.0" width="8.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.72%)</title><rect x="1156.0" y="691.0" width="8.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.72%)</title><rect x="1156.0" y="675.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.72%)</title><rect x="1156.0" y="659.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.72%)</title><rect x="1156.0" y="643.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1156.0" y="627.0" width="8.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.0" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1156.0" y="611.0" width="8.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.0" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.72%)</title><rect x="1156.0" y="595.0" width="8.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.72%)</title><rect x="1156.0" y="579.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.72%)</title><rect x="1156.0" y="563.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.72%)</title><rect x="1156.0" y="547.0" width="8.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.72%)</title><rect x="1156.0" y="531.0" width="8.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.0" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1156.0" y="515.0" width="8.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.0" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1156.0" y="499.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.0" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1156.0" y="483.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.0" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.72%)</title><rect x="1156.0" y="467.0" width="8.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.72%)</title><rect x="1156.0" y="451.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.72%)</title><rect x="1156.0" y="435.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.72%)</title><rect x="1156.0" y="419.0" width="8.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.72%)</title><rect x="1156.0" y="403.0" width="8.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.0" y="414.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.72%)</title><rect x="1156.0" y="387.0" width="8.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="398.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.72%)</title><rect x="1156.0" y="371.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.0" y="382.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.72%)</title><rect x="1156.0" y="355.0" width="8.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.0" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.72%)</title><rect x="1156.0" y="339.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.72%)</title><rect x="1156.0" y="323.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.0" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.72%)</title><rect x="1156.0" y="307.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.0" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.72%)</title><rect x="1156.0" y="291.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.0" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.72%)</title><rect x="1156.0" y="275.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.0" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.72%)</title><rect x="1156.0" y="259.0" width="8.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.0" y="270.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.72%)</title><rect x="1156.0" y="243.0" width="8.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.0" y="254.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.72%)</title><rect x="1156.0" y="227.0" width="8.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.0" y="238.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.72%)</title><rect x="1156.0" y="211.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.0" y="222.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.72%)</title><rect x="1156.0" y="195.0" width="8.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.0" y="206.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.72%)</title><rect x="1156.0" y="179.0" width="8.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.0" y="190.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.72%)</title><rect x="1156.0" y="163.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.0" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.72%)</title><rect x="1156.0" y="147.0" width="8.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.0" y="158.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.72%)</title><rect x="1156.0" y="131.0" width="8.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="142.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.72%)</title><rect x="1156.0" y="115.0" width="8.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.0" y="126.0"></text>
</g>
<g>
<title>java_lang_ClassLoader::non_reflection_class_loader(oopDesc*) (1 samples, 0.72%)</title><rect x="1156.0" y="99.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.0" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.44%)</title><rect x="1164.5" y="723.0" width="17.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.5" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.44%)</title><rect x="1164.5" y="707.0" width="17.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.5" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.44%)</title><rect x="1164.5" y="691.0" width="17.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.44%)</title><rect x="1164.5" y="675.0" width="17.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.44%)</title><rect x="1164.5" y="659.0" width="17.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.44%)</title><rect x="1164.5" y="643.0" width="17.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.44%)</title><rect x="1164.5" y="627.0" width="17.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1164.5" y="611.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.5" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.72%)</title><rect x="1164.5" y="595.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.72%)</title><rect x="1164.5" y="579.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.72%)</title><rect x="1164.5" y="563.0" width="8.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.72%)</title><rect x="1164.5" y="547.0" width="8.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.72%)</title><rect x="1164.5" y="531.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.5" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1164.5" y="515.0" width="8.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.5" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1164.5" y="499.0" width="8.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.5" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.72%)</title><rect x="1164.5" y="483.0" width="8.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.72%)</title><rect x="1164.5" y="467.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.72%)</title><rect x="1164.5" y="451.0" width="8.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.72%)</title><rect x="1164.5" y="435.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.72%)</title><rect x="1164.5" y="419.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.5" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1164.5" y="403.0" width="8.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.5" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.72%)</title><rect x="1164.5" y="387.0" width="8.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.72%)</title><rect x="1164.5" y="371.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.72%)</title><rect x="1164.5" y="355.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.72%)</title><rect x="1164.5" y="339.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.72%)</title><rect x="1164.5" y="323.0" width="8.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.5" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1164.5" y="307.0" width="8.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.5" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.72%)</title><rect x="1164.5" y="291.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.72%)</title><rect x="1164.5" y="275.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.72%)</title><rect x="1164.5" y="259.0" width="8.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.72%)</title><rect x="1164.5" y="243.0" width="8.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.72%)</title><rect x="1164.5" y="227.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.5" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1164.5" y="211.0" width="8.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.5" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.72%)</title><rect x="1164.5" y="195.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.72%)</title><rect x="1164.5" y="179.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.72%)</title><rect x="1164.5" y="163.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.72%)</title><rect x="1164.5" y="147.0" width="8.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.72%)</title><rect x="1164.5" y="131.0" width="8.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.72%)</title><rect x="1164.5" y="115.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.5" y="126.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.72%)</title><rect x="1164.5" y="99.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.5" y="110.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.72%)</title><rect x="1164.5" y="83.0" width="8.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.5" y="94.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.72%)</title><rect x="1164.5" y="67.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.5" y="78.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.72%)</title><rect x="1164.5" y="51.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.5" y="62.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.72%)</title><rect x="1164.5" y="35.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.5" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1173.0" y="611.0" width="8.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.0" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1173.0" y="595.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.0" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.72%)</title><rect x="1173.0" y="579.0" width="8.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.72%)</title><rect x="1173.0" y="563.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.72%)</title><rect x="1173.0" y="547.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.72%)</title><rect x="1173.0" y="531.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.72%)</title><rect x="1173.0" y="515.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.0" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1173.0" y="499.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.0" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1173.0" y="483.0" width="8.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1173.0" y="467.0" width="8.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.72%)</title><rect x="1173.0" y="451.0" width="8.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.72%)</title><rect x="1173.0" y="435.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.72%)</title><rect x="1173.0" y="419.0" width="8.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.72%)</title><rect x="1173.0" y="403.0" width="8.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.72%)</title><rect x="1173.0" y="387.0" width="8.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.0" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1173.0" y="371.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.0" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.72%)</title><rect x="1173.0" y="355.0" width="8.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.72%)</title><rect x="1173.0" y="339.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.72%)</title><rect x="1173.0" y="323.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.72%)</title><rect x="1173.0" y="307.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.72%)</title><rect x="1173.0" y="291.0" width="8.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.0" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1173.0" y="275.0" width="8.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.0" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.72%)</title><rect x="1173.0" y="259.0" width="8.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.72%)</title><rect x="1173.0" y="243.0" width="8.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.72%)</title><rect x="1173.0" y="227.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.72%)</title><rect x="1173.0" y="211.0" width="8.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.72%)</title><rect x="1173.0" y="195.0" width="8.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.0" y="206.0"></text>
</g>
<g>
<title>VirtualCallGenerator::generate(JVMState*) (1 samples, 0.72%)</title><rect x="1173.0" y="179.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.0" y="190.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.72%)</title><rect x="1173.0" y="163.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.0" y="174.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.72%)</title><rect x="1173.0" y="147.0" width="8.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.0" y="158.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.72%)</title><rect x="1173.0" y="131.0" width="8.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.0" y="142.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.72%)</title><rect x="1173.0" y="115.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.0" y="126.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.72%)</title><rect x="1181.5" y="851.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.5" y="862.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.72%)</title><rect x="1181.5" y="835.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.5" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.72%)</title><rect x="1181.5" y="819.0" width="8.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.5" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.72%)</title><rect x="1181.5" y="803.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.5" y="814.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(Klass*) (1 samples, 0.72%)</title><rect x="1181.5" y="787.0" width="8.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.5" y="798.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(Klass*) (1 samples, 0.72%)</title><rect x="1181.5" y="771.0" width="8.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.5" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.72%)</title><rect x="1181.5" y="755.0" width="8.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.5" y="766.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.72%)</title><rect x="1181.5" y="739.0" width="8.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.5" y="750.0"></text>
</g>
</g>
</svg>
