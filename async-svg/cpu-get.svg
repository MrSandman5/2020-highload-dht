<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="757"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="757"> </text>
<g id="frames">
<g>
<title>all (2,037 samples, 100.00%)</title><rect x="10.0" y="723.0" width="1180.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="13.0" y="734.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.20%)</title><rect x="10.0" y="707.0" width="2.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="10.0" y="691.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.05%)</title><rect x="10.0" y="675.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.10%)</title><rect x="10.6" y="691.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.6" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.10%)</title><rect x="10.6" y="675.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.6" y="686.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.10%)</title><rect x="10.6" y="659.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.6" y="670.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.10%)</title><rect x="10.6" y="643.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.6" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="11.7" y="691.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.7" y="702.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (1 samples, 0.05%)</title><rect x="11.7" y="675.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.7" y="686.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.05%)</title><rect x="12.3" y="707.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="15.3" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.05%)</title><rect x="12.3" y="691.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.3" y="702.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.05%)</title><rect x="12.3" y="675.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.3" y="686.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,952 samples, 95.83%)</title><rect x="12.9" y="707.0" width="1130.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.9" y="718.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,952 samples, 95.83%)</title><rect x="12.9" y="691.0" width="1130.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.9" y="702.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,952 samples, 95.83%)</title><rect x="12.9" y="675.0" width="1130.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.9" y="686.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1 samples, 0.05%)</title><rect x="13.5" y="659.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.05%)</title><rect x="13.5" y="643.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.5" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (1 samples, 0.05%)</title><rect x="13.5" y="627.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.5" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (1 samples, 0.05%)</title><rect x="13.5" y="611.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.5" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.&lt;init&gt; (1 samples, 0.05%)</title><rect x="13.5" y="595.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.05%)</title><rect x="14.1" y="659.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.05%)</title><rect x="14.1" y="643.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.05%)</title><rect x="14.1" y="627.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.05%)</title><rect x="14.1" y="611.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (41 samples, 2.01%)</title><rect x="14.6" y="659.0" width="23.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.6" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (40 samples, 1.96%)</title><rect x="15.2" y="643.0" width="23.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.2" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (38 samples, 1.87%)</title><rect x="15.2" y="627.0" width="22.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.2" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.05%)</title><rect x="15.8" y="611.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.8" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.05%)</title><rect x="15.8" y="595.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.05%)</title><rect x="15.8" y="579.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.29%)</title><rect x="16.4" y="611.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="19.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (1 samples, 0.05%)</title><rect x="16.4" y="595.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (1 samples, 0.05%)</title><rect x="17.0" y="595.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.20%)</title><rect x="17.5" y="595.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.20%)</title><rect x="17.5" y="579.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.10%)</title><rect x="18.7" y="563.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.7" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.10%)</title><rect x="18.7" y="547.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.7" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.10%)</title><rect x="18.7" y="531.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (30 samples, 1.47%)</title><rect x="19.8" y="611.0" width="17.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.8" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (30 samples, 1.47%)</title><rect x="19.8" y="595.0" width="17.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.8" y="606.0"></text>
</g>
<g>
<title>Unsafe_Park (16 samples, 0.79%)</title><rect x="19.8" y="579.0" width="9.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="22.8" y="590.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.05%)</title><rect x="21.0" y="563.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="24.0" y="574.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (6 samples, 0.29%)</title><rect x="21.6" y="563.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="24.6" y="574.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="22.7" y="547.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="25.7" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="23.3" y="547.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="26.3" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.10%)</title><rect x="23.9" y="547.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="26.9" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.05%)</title><rect x="25.1" y="563.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="28.1" y="574.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (4 samples, 0.20%)</title><rect x="25.6" y="563.0" width="2.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="28.6" y="574.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.10%)</title><rect x="28.0" y="563.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="31.0" y="574.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.69%)</title><rect x="29.1" y="579.0" width="8.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="32.1" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.05%)</title><rect x="29.1" y="563.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="32.1" y="574.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.05%)</title><rect x="29.7" y="563.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="32.7" y="574.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (12 samples, 0.59%)</title><rect x="30.3" y="563.0" width="6.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="33.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.10%)</title><rect x="37.2" y="627.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="40.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.10%)</title><rect x="37.2" y="611.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.10%)</title><rect x="37.2" y="595.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.10%)</title><rect x="37.2" y="579.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="40.2" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.05%)</title><rect x="37.8" y="563.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.8" y="574.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.05%)</title><rect x="37.8" y="547.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="40.8" y="558.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.05%)</title><rect x="37.8" y="531.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="40.8" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$76/103907069.run (1,908 samples, 93.67%)</title><rect x="38.4" y="659.0" width="1105.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.4" y="670.0">ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$76/103907069.run</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$asyncExecute$12 (1,908 samples, 93.67%)</title><rect x="38.4" y="643.0" width="1105.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="41.4" y="654.0">ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$asyncExecute$12</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$107/1035757000.act (682 samples, 33.48%)</title><rect x="38.4" y="627.0" width="395.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="41.4" y="638.0">ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$1..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replicasGet$3 (682 samples, 33.48%)</title><rect x="38.4" y="611.0" width="395.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="41.4" y="622.0">ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$re..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.05%)</title><rect x="38.4" y="595.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="41.4" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.05%)</title><rect x="38.4" y="579.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="41.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$110/2033032660.get$Lambda (1 samples, 0.05%)</title><rect x="38.4" y="563.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.4" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$110/2033032660.&lt;init&gt; (1 samples, 0.05%)</title><rect x="38.4" y="547.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="41.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.replication (678 samples, 33.28%)</title><rect x="39.0" y="595.0" width="392.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="42.0" y="606.0">ru/mail/polis/service/mrsandman5/ServiceImpl.replication</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (671 samples, 32.94%)</title><rect x="39.0" y="579.0" width="388.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="42.0" y="590.0">java/util/stream/ReferencePipeline.collect</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (671 samples, 32.94%)</title><rect x="39.0" y="563.0" width="388.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.0" y="574.0">java/util/stream/AbstractPipeline.evaluate</text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (671 samples, 32.94%)</title><rect x="39.0" y="547.0" width="388.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="42.0" y="558.0">java/util/stream/ReduceOps$ReduceOp.evaluateSequential</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (671 samples, 32.94%)</title><rect x="39.0" y="531.0" width="388.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="42.0" y="542.0">java/util/stream/AbstractPipeline.wrapAndCopyInto</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (669 samples, 32.84%)</title><rect x="39.0" y="515.0" width="387.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="42.0" y="526.0">java/util/stream/AbstractPipeline.copyInto</text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (669 samples, 32.84%)</title><rect x="39.0" y="499.0" width="387.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="42.0" y="510.0">java/util/HashMap$KeySpliterator.forEachRemaining</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (669 samples, 32.84%)</title><rect x="39.0" y="483.0" width="387.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="42.0" y="494.0">java/util/stream/ReferencePipeline$3$1.accept</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$85/1771982368.apply (669 samples, 32.84%)</title><rect x="39.0" y="467.0" width="387.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.0" y="478.0">ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replication$0 (669 samples, 32.84%)</title><rect x="39.0" y="451.0" width="387.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="42.0" y="462.0">ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$r..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$110/2033032660.act (612 samples, 30.04%)</title><rect x="39.0" y="435.0" width="354.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="42.0" y="446.0">ru/mail/polis/service/mrsandman5/ServiceImpl$$La..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replicasGet$2 (612 samples, 30.04%)</title><rect x="39.0" y="419.0" width="354.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="42.0" y="430.0">ru/mail/polis/service/mrsandman5/ServiceImpl.lam..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/SimpleRequests.get (612 samples, 30.04%)</title><rect x="39.0" y="403.0" width="354.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="42.0" y="414.0">ru/mail/polis/service/mrsandman5/replication/Sim..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.entryFromBytes (612 samples, 30.04%)</title><rect x="39.0" y="387.0" width="354.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.0" y="398.0">ru/mail/polis/service/mrsandman5/replication/Ent..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (46 samples, 2.26%)</title><rect x="39.0" y="371.0" width="26.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.0" y="382.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (45 samples, 2.21%)</title><rect x="39.0" y="355.0" width="26.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.0" y="366.0">c..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (4 samples, 0.20%)</title><rect x="39.0" y="339.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="42.0" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (4 samples, 0.20%)</title><rect x="39.0" y="323.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.0" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (4 samples, 0.20%)</title><rect x="39.0" y="307.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.0" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4 samples, 0.20%)</title><rect x="39.0" y="291.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="42.0" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3 samples, 0.15%)</title><rect x="39.5" y="275.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.5" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1 samples, 0.05%)</title><rect x="39.5" y="259.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (1 samples, 0.05%)</title><rect x="39.5" y="243.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (1 samples, 0.05%)</title><rect x="39.5" y="227.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="42.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (1 samples, 0.05%)</title><rect x="39.5" y="211.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.5" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (1 samples, 0.05%)</title><rect x="39.5" y="195.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.5" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.05%)</title><rect x="39.5" y="179.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="42.5" y="190.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.10%)</title><rect x="40.1" y="259.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="43.1" y="270.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.10%)</title><rect x="40.1" y="243.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (2 samples, 0.10%)</title><rect x="40.1" y="227.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.1" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (2 samples, 0.10%)</title><rect x="40.1" y="211.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="43.1" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.10%)</title><rect x="40.1" y="195.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.1" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.05%)</title><rect x="40.1" y="179.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="43.1" y="190.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.05%)</title><rect x="40.7" y="179.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="43.7" y="190.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (41 samples, 2.01%)</title><rect x="41.3" y="339.0" width="23.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.3" y="350.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (41 samples, 2.01%)</title><rect x="41.3" y="323.0" width="23.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="44.3" y="334.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (41 samples, 2.01%)</title><rect x="41.3" y="307.0" width="23.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.3" y="318.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (41 samples, 2.01%)</title><rect x="41.3" y="291.0" width="23.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="44.3" y="302.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (40 samples, 1.96%)</title><rect x="41.9" y="275.0" width="23.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="44.9" y="286.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (40 samples, 1.96%)</title><rect x="41.9" y="259.0" width="23.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.9" y="270.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (35 samples, 1.72%)</title><rect x="41.9" y="243.0" width="20.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (35 samples, 1.72%)</title><rect x="41.9" y="227.0" width="20.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="44.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (35 samples, 1.72%)</title><rect x="41.9" y="211.0" width="20.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="44.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (35 samples, 1.72%)</title><rect x="41.9" y="195.0" width="20.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="44.9" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (13 samples, 0.64%)</title><rect x="41.9" y="179.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="44.9" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.10%)</title><rect x="41.9" y="163.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="44.9" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="41.9" y="147.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="44.9" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="41.9" y="131.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.9" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="41.9" y="115.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="44.9" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="41.9" y="99.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.9" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="41.9" y="83.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.9" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="41.9" y="67.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.9" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="42.4" y="99.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.4" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="42.4" y="83.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.4" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="42.4" y="67.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="45.4" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (11 samples, 0.54%)</title><rect x="43.0" y="163.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (11 samples, 0.54%)</title><rect x="43.0" y="147.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="46.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (9 samples, 0.44%)</title><rect x="43.0" y="131.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.0" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (9 samples, 0.44%)</title><rect x="43.0" y="115.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="46.0" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (9 samples, 0.44%)</title><rect x="43.0" y="99.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="46.0" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (9 samples, 0.44%)</title><rect x="43.0" y="83.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="46.0" y="94.0"></text>
</g>
<g>
<title>__pread (5 samples, 0.25%)</title><rect x="43.6" y="67.0" width="2.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="46.6" y="78.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.05%)</title><rect x="46.5" y="67.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="49.5" y="78.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.10%)</title><rect x="47.1" y="67.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="50.1" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.10%)</title><rect x="48.2" y="131.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="51.2" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.05%)</title><rect x="48.8" y="115.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.8" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (22 samples, 1.08%)</title><rect x="49.4" y="179.0" width="12.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="52.4" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (22 samples, 1.08%)</title><rect x="49.4" y="163.0" width="12.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="52.4" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.05%)</title><rect x="49.4" y="147.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.4" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.05%)</title><rect x="49.4" y="131.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="52.4" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.05%)</title><rect x="50.0" y="147.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="53.0" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.05%)</title><rect x="50.0" y="131.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="53.0" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (20 samples, 0.98%)</title><rect x="50.5" y="147.0" width="11.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.5" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.05%)</title><rect x="51.1" y="131.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="54.1" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="51.1" y="115.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.1" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="51.1" y="99.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="54.1" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (15 samples, 0.74%)</title><rect x="51.7" y="131.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.7" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (15 samples, 0.74%)</title><rect x="51.7" y="115.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="54.7" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (15 samples, 0.74%)</title><rect x="51.7" y="99.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="54.7" y="110.0"></text>
</g>
<g>
<title>__pread (15 samples, 0.74%)</title><rect x="51.7" y="83.0" width="8.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="54.7" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="60.4" y="131.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.4" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.05%)</title><rect x="60.4" y="115.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="63.4" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.10%)</title><rect x="61.0" y="131.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="64.0" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="61.0" y="115.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.0" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (1 samples, 0.05%)</title><rect x="61.6" y="115.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.6" y="126.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (5 samples, 0.25%)</title><rect x="62.1" y="243.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.1" y="254.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (5 samples, 0.25%)</title><rect x="62.1" y="227.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.1" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (5 samples, 0.25%)</title><rect x="62.1" y="211.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="65.1" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (5 samples, 0.25%)</title><rect x="62.1" y="195.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="65.1" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.15%)</title><rect x="62.1" y="179.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="65.1" y="190.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.15%)</title><rect x="62.1" y="163.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.1" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (2 samples, 0.10%)</title><rect x="63.9" y="179.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="66.9" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (2 samples, 0.10%)</title><rect x="63.9" y="163.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="66.9" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.05%)</title><rect x="65.0" y="355.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="68.0" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.05%)</title><rect x="65.0" y="339.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="68.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils.entryIterators (566 samples, 27.79%)</title><rect x="65.6" y="371.0" width="327.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="68.6" y="382.0">ru/mail/polis/utils/IteratorUtils.entryItera..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (50 samples, 2.45%)</title><rect x="65.6" y="355.0" width="29.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.6" y="366.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (50 samples, 2.45%)</title><rect x="65.6" y="339.0" width="29.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.6" y="350.0">co..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (50 samples, 2.45%)</title><rect x="65.6" y="323.0" width="29.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="68.6" y="334.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (50 samples, 2.45%)</title><rect x="65.6" y="307.0" width="29.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="68.6" y="318.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (50 samples, 2.45%)</title><rect x="65.6" y="291.0" width="29.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="68.6" y="302.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (50 samples, 2.45%)</title><rect x="65.6" y="275.0" width="29.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="68.6" y="286.0">ja..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (50 samples, 2.45%)</title><rect x="65.6" y="259.0" width="29.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="68.6" y="270.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (50 samples, 2.45%)</title><rect x="65.6" y="243.0" width="29.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="68.6" y="254.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (48 samples, 2.36%)</title><rect x="66.2" y="227.0" width="27.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="69.2" y="238.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (47 samples, 2.31%)</title><rect x="66.8" y="211.0" width="27.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="69.8" y="222.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (47 samples, 2.31%)</title><rect x="66.8" y="195.0" width="27.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="69.8" y="206.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (47 samples, 2.31%)</title><rect x="66.8" y="179.0" width="27.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="69.8" y="190.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.10%)</title><rect x="66.8" y="163.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="69.8" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="66.8" y="147.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.8" y="158.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="67.3" y="131.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="70.3" y="142.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="67.3" y="115.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="70.3" y="126.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="67.3" y="99.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="70.3" y="110.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="67.3" y="83.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="70.3" y="94.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.05%)</title><rect x="67.3" y="67.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="70.3" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (19 samples, 0.93%)</title><rect x="67.9" y="163.0" width="11.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.9" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.05%)</title><rect x="67.9" y="147.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="70.9" y="158.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="67.9" y="131.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="70.9" y="142.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="67.9" y="115.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="70.9" y="126.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="67.9" y="99.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="70.9" y="110.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.05%)</title><rect x="67.9" y="83.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="70.9" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (18 samples, 0.88%)</title><rect x="68.5" y="147.0" width="10.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.ensureOpen (1 samples, 0.05%)</title><rect x="68.5" y="131.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="71.5" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (1 samples, 0.05%)</title><rect x="68.5" y="115.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.5" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (17 samples, 0.83%)</title><rect x="69.1" y="131.0" width="9.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="72.1" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.05%)</title><rect x="69.1" y="115.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="72.1" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.05%)</title><rect x="69.1" y="99.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="72.1" y="110.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.05%)</title><rect x="69.1" y="83.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="72.1" y="94.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.05%)</title><rect x="69.1" y="67.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="72.1" y="78.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.05%)</title><rect x="69.1" y="51.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="72.1" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (15 samples, 0.74%)</title><rect x="69.7" y="115.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="72.7" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (12 samples, 0.59%)</title><rect x="70.2" y="99.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="73.2" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (12 samples, 0.59%)</title><rect x="70.2" y="83.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="73.2" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (12 samples, 0.59%)</title><rect x="70.2" y="67.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.2" y="78.0"></text>
</g>
<g>
<title>__pread (11 samples, 0.54%)</title><rect x="70.8" y="51.0" width="6.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="73.8" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="77.2" y="99.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="80.2" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.05%)</title><rect x="77.2" y="83.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="80.2" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="77.8" y="99.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="80.8" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="77.8" y="83.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="80.8" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.05%)</title><rect x="78.4" y="115.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="81.4" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (26 samples, 1.28%)</title><rect x="78.9" y="163.0" width="15.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (26 samples, 1.28%)</title><rect x="78.9" y="147.0" width="15.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="81.9" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.05%)</title><rect x="78.9" y="131.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.9" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.05%)</title><rect x="78.9" y="115.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="81.9" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.05%)</title><rect x="78.9" y="99.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="81.9" y="110.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.05%)</title><rect x="78.9" y="83.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.9" y="94.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.05%)</title><rect x="78.9" y="67.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.9" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.05%)</title><rect x="79.5" y="131.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="82.5" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.05%)</title><rect x="79.5" y="115.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="82.5" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (22 samples, 1.08%)</title><rect x="80.1" y="131.0" width="12.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="83.1" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.05%)</title><rect x="82.4" y="115.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="85.4" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.05%)</title><rect x="82.4" y="99.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="85.4" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.05%)</title><rect x="82.4" y="83.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="85.4" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (17 samples, 0.83%)</title><rect x="83.0" y="115.0" width="9.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.0" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (17 samples, 0.83%)</title><rect x="83.0" y="99.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="86.0" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (17 samples, 0.83%)</title><rect x="83.0" y="83.0" width="9.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="86.0" y="94.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.05%)</title><rect x="83.6" y="67.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="86.6" y="78.0"></text>
</g>
<g>
<title>__pread (12 samples, 0.59%)</title><rect x="84.1" y="67.0" width="7.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="87.1" y="78.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.05%)</title><rect x="91.1" y="67.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="94.1" y="78.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.05%)</title><rect x="91.7" y="67.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="94.7" y="78.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.05%)</title><rect x="92.3" y="67.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="95.3" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.10%)</title><rect x="92.8" y="131.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="95.8" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.05%)</title><rect x="93.4" y="115.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="96.4" y="126.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (1 samples, 0.05%)</title><rect x="93.4" y="99.0" width="0.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="96.4" y="110.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.05%)</title><rect x="94.0" y="227.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="97.0" y="238.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.05%)</title><rect x="94.0" y="211.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="97.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (1 samples, 0.05%)</title><rect x="94.0" y="195.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="97.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (1 samples, 0.05%)</title><rect x="94.0" y="179.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.0" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getValue (1 samples, 0.05%)</title><rect x="94.0" y="163.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="97.0" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.05%)</title><rect x="94.6" y="355.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="97.6" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.05%)</title><rect x="94.6" y="339.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="97.6" y="350.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (499 samples, 24.50%)</title><rect x="95.2" y="355.0" width="289.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="98.2" y="366.0">java/util/Collections$UnmodifiableColle..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (499 samples, 24.50%)</title><rect x="95.2" y="339.0" width="289.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.2" y="350.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (1 samples, 0.05%)</title><rect x="95.2" y="323.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.2" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (1 samples, 0.05%)</title><rect x="95.2" y="307.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="98.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils$$Lambda$115/1902819636.accept (498 samples, 24.45%)</title><rect x="95.7" y="323.0" width="288.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.7" y="334.0">ru/mail/polis/utils/IteratorUtils$$Lamb..</text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils.lambda$entryIterators$3 (498 samples, 24.45%)</title><rect x="95.7" y="307.0" width="288.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.7" y="318.0">ru/mail/polis/utils/IteratorUtils.lambd..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.iterator (498 samples, 24.45%)</title><rect x="95.7" y="291.0" width="288.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.7" y="302.0">ru/mail/polis/dao/impl/tables/SSTable.i..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt; (498 samples, 24.45%)</title><rect x="95.7" y="275.0" width="288.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.7" y="286.0">ru/mail/polis/dao/impl/tables/SSTable$1..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getPosition (498 samples, 24.45%)</title><rect x="95.7" y="259.0" width="288.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="98.7" y="270.0">ru/mail/polis/dao/impl/tables/SSTable.g..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 0.49%)</title><rect x="95.7" y="243.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="98.7" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (9 samples, 0.44%)</title><rect x="96.3" y="227.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="99.3" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.20%)</title><rect x="99.2" y="211.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.2" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.keyAt (488 samples, 23.96%)</title><rect x="101.5" y="243.0" width="282.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="104.5" y="254.0">ru/mail/polis/dao/impl/tables/SSTable...</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.15%)</title><rect x="101.5" y="227.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="104.5" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="101.5" y="211.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="104.5" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="101.5" y="195.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="104.5" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="101.5" y="179.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="104.5" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="102.1" y="211.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.1" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="102.1" y="195.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="105.1" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="102.1" y="179.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="105.1" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="102.7" y="163.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="105.7" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="102.7" y="147.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="105.7" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="102.7" y="131.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="105.7" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (1 samples, 0.05%)</title><rect x="103.3" y="227.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="106.3" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (23 samples, 1.13%)</title><rect x="103.8" y="227.0" width="13.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="106.8" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="108.5" y="211.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="111.5" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="108.5" y="195.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="111.5" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="108.5" y="179.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="111.5" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="108.5" y="163.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="111.5" y="174.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.05%)</title><rect x="108.5" y="147.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="111.5" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.69%)</title><rect x="109.1" y="211.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="112.1" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (13 samples, 0.64%)</title><rect x="109.6" y="195.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="112.6" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.25%)</title><rect x="114.3" y="179.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="117.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.10%)</title><rect x="116.0" y="163.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="119.0" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="116.6" y="147.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="119.6" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (185 samples, 9.08%)</title><rect x="117.2" y="227.0" width="107.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="120.2" y="238.0">ru/mail/polis..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.05%)</title><rect x="118.3" y="211.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="121.3" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="118.3" y="195.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="121.3" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="118.3" y="179.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="121.3" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="118.3" y="163.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="121.3" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (9 samples, 0.44%)</title><rect x="118.9" y="211.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="121.9" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.29%)</title><rect x="120.6" y="195.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="123.6" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.29%)</title><rect x="120.6" y="179.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="123.6" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.15%)</title><rect x="121.8" y="163.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="124.8" y="174.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.05%)</title><rect x="121.8" y="147.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="124.8" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="122.4" y="147.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="125.4" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="123.0" y="147.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="126.0" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="123.0" y="131.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="126.0" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.05%)</title><rect x="123.5" y="163.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="126.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (173 samples, 8.49%)</title><rect x="124.1" y="211.0" width="100.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="127.1" y="222.0">sun/nio/ch/F..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (172 samples, 8.44%)</title><rect x="124.7" y="195.0" width="99.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="127.7" y="206.0">sun/nio/ch/F..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (15 samples, 0.74%)</title><rect x="128.8" y="179.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="131.8" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (13 samples, 0.64%)</title><rect x="129.3" y="163.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="132.3" y="174.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (10 samples, 0.49%)</title><rect x="129.9" y="147.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="132.9" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.10%)</title><rect x="135.7" y="147.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="138.7" y="158.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.10%)</title><rect x="135.7" y="131.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="138.7" y="142.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.10%)</title><rect x="135.7" y="115.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="138.7" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.05%)</title><rect x="136.3" y="99.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="139.3" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.05%)</title><rect x="136.9" y="163.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="139.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (138 samples, 6.77%)</title><rect x="137.4" y="179.0" width="80.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="140.4" y="190.0">sun/nio/c..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.15%)</title><rect x="138.0" y="163.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="141.0" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.10%)</title><rect x="138.6" y="147.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="141.6" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (111 samples, 5.45%)</title><rect x="139.8" y="163.0" width="64.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="142.8" y="174.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (111 samples, 5.45%)</title><rect x="139.8" y="147.0" width="64.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="142.8" y="158.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (111 samples, 5.45%)</title><rect x="139.8" y="131.0" width="64.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="142.8" y="142.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.05%)</title><rect x="143.2" y="115.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="146.2" y="126.0"></text>
</g>
<g>
<title>__pread (96 samples, 4.71%)</title><rect x="143.8" y="115.0" width="55.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="146.8" y="126.0">__pread</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.15%)</title><rect x="199.4" y="115.0" width="1.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="202.4" y="126.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (4 samples, 0.20%)</title><rect x="201.2" y="115.0" width="2.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="204.2" y="126.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="203.5" y="115.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="206.5" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (19 samples, 0.93%)</title><rect x="204.1" y="163.0" width="11.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="207.1" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.10%)</title><rect x="207.5" y="147.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="210.5" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.05%)</title><rect x="208.1" y="131.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="211.1" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (11 samples, 0.54%)</title><rect x="208.7" y="147.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="211.7" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.05%)</title><rect x="214.5" y="131.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="217.5" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.05%)</title><rect x="214.5" y="115.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="217.5" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (4 samples, 0.20%)</title><rect x="215.1" y="163.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.1" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.20%)</title><rect x="215.1" y="147.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.1" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.05%)</title><rect x="216.8" y="131.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.8" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (12 samples, 0.59%)</title><rect x="217.4" y="179.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="220.4" y="190.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.05%)</title><rect x="221.4" y="163.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="224.4" y="174.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.05%)</title><rect x="221.4" y="147.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="224.4" y="158.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.05%)</title><rect x="221.4" y="131.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="224.4" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (4 samples, 0.20%)</title><rect x="222.0" y="163.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.0" y="174.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (1 samples, 0.05%)</title><rect x="223.8" y="147.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="226.8" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (276 samples, 13.55%)</title><rect x="224.3" y="227.0" width="159.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.3" y="238.0">sun/nio/ch/FileChann..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (273 samples, 13.40%)</title><rect x="226.1" y="211.0" width="158.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="229.1" y="222.0">sun/nio/ch/FileChann..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (6 samples, 0.29%)</title><rect x="226.7" y="195.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.7" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (6 samples, 0.29%)</title><rect x="226.7" y="179.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.7" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.05%)</title><rect x="229.5" y="163.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.5" y="174.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.05%)</title><rect x="229.5" y="147.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.5" y="158.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.05%)</title><rect x="229.5" y="131.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="232.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (3 samples, 0.15%)</title><rect x="230.1" y="195.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="233.1" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (3 samples, 0.15%)</title><rect x="230.1" y="179.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.1" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (245 samples, 12.03%)</title><rect x="231.9" y="195.0" width="141.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="234.9" y="206.0">sun/nio/ch/IOUtil...</text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.05%)</title><rect x="234.2" y="179.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="237.2" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (8 samples, 0.39%)</title><rect x="234.8" y="179.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.8" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (5 samples, 0.25%)</title><rect x="236.5" y="163.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.5" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.05%)</title><rect x="236.5" y="147.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.5" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.05%)</title><rect x="237.1" y="147.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.1" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="237.1" y="131.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="240.1" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="237.1" y="115.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="240.1" y="126.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="237.1" y="99.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="240.1" y="110.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.15%)</title><rect x="237.7" y="147.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.7" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.15%)</title><rect x="237.7" y="131.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="240.7" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.15%)</title><rect x="237.7" y="115.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.7" y="126.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.15%)</title><rect x="237.7" y="99.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.7" y="110.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.10%)</title><rect x="238.2" y="83.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="241.2" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (204 samples, 10.01%)</title><rect x="239.4" y="179.0" width="118.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.4" y="190.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="239.4" y="163.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.4" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (203 samples, 9.97%)</title><rect x="240.0" y="163.0" width="117.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="243.0" y="174.0">sun/nio/ch/Fil..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (202 samples, 9.92%)</title><rect x="240.6" y="147.0" width="117.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.6" y="158.0">sun/nio/ch/Fil..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.05%)</title><rect x="244.0" y="131.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="247.0" y="142.0"></text>
</g>
<g>
<title>__pread (187 samples, 9.18%)</title><rect x="244.6" y="131.0" width="108.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="247.6" y="142.0">__pread</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.34%)</title><rect x="352.9" y="131.0" width="4.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="355.9" y="142.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.05%)</title><rect x="357.0" y="131.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="360.0" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (11 samples, 0.54%)</title><rect x="357.6" y="179.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="360.6" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.39%)</title><rect x="357.6" y="163.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="360.6" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (3 samples, 0.15%)</title><rect x="360.5" y="147.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="363.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.15%)</title><rect x="362.2" y="163.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="365.2" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="362.8" y="147.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="365.8" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="362.8" y="131.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="365.8" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="362.8" y="115.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="365.8" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="362.8" y="99.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="365.8" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.05%)</title><rect x="363.4" y="147.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="366.4" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (17 samples, 0.83%)</title><rect x="363.9" y="179.0" width="9.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="366.9" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.49%)</title><rect x="363.9" y="163.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="366.9" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.25%)</title><rect x="365.7" y="147.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="368.7" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.05%)</title><rect x="368.6" y="147.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="371.6" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.05%)</title><rect x="369.2" y="147.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="372.2" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.05%)</title><rect x="369.7" y="163.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="372.7" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (5 samples, 0.25%)</title><rect x="370.3" y="163.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="373.3" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.isBufferTooLarge (1 samples, 0.05%)</title><rect x="373.2" y="163.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="376.2" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (12 samples, 0.59%)</title><rect x="373.8" y="195.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="376.8" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (12 samples, 0.59%)</title><rect x="373.8" y="179.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="376.8" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (6 samples, 0.29%)</title><rect x="380.7" y="195.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="383.7" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (11 samples, 0.54%)</title><rect x="384.2" y="355.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="387.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (11 samples, 0.54%)</title><rect x="384.2" y="339.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="387.2" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (11 samples, 0.54%)</title><rect x="384.2" y="323.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="387.2" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (2 samples, 0.10%)</title><rect x="384.2" y="307.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="387.2" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (2 samples, 0.10%)</title><rect x="384.2" y="291.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="387.2" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (2 samples, 0.10%)</title><rect x="384.2" y="275.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="387.2" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1 samples, 0.05%)</title><rect x="384.8" y="259.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="387.8" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1 samples, 0.05%)</title><rect x="384.8" y="243.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="387.8" y="254.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.05%)</title><rect x="384.8" y="227.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="387.8" y="238.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.05%)</title><rect x="384.8" y="211.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="387.8" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (1 samples, 0.05%)</title><rect x="384.8" y="195.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="387.8" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (1 samples, 0.05%)</title><rect x="384.8" y="179.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="387.8" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.05%)</title><rect x="384.8" y="163.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="387.8" y="174.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.05%)</title><rect x="384.8" y="147.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="387.8" y="158.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (9 samples, 0.44%)</title><rect x="385.4" y="307.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="388.4" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (9 samples, 0.44%)</title><rect x="385.4" y="291.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="388.4" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (9 samples, 0.44%)</title><rect x="385.4" y="275.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="388.4" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (9 samples, 0.44%)</title><rect x="385.4" y="259.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="388.4" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.44%)</title><rect x="385.4" y="243.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="388.4" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.44%)</title><rect x="385.4" y="227.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="388.4" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (9 samples, 0.44%)</title><rect x="385.4" y="211.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="388.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (9 samples, 0.44%)</title><rect x="385.4" y="195.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="388.4" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (9 samples, 0.44%)</title><rect x="385.4" y="179.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="388.4" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (9 samples, 0.44%)</title><rect x="385.4" y="163.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="388.4" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.05%)</title><rect x="385.4" y="147.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="388.4" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (3 samples, 0.15%)</title><rect x="386.0" y="147.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="389.0" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.05%)</title><rect x="386.0" y="131.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="389.0" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="386.0" y="115.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="389.0" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="386.0" y="99.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="389.0" y="110.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="386.0" y="83.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="389.0" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="386.0" y="67.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="389.0" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="386.0" y="51.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="389.0" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (2 samples, 0.10%)</title><rect x="386.5" y="131.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="389.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (2 samples, 0.10%)</title><rect x="386.5" y="115.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="389.5" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.10%)</title><rect x="386.5" y="99.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="389.5" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2 samples, 0.10%)</title><rect x="386.5" y="83.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="389.5" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (2 samples, 0.10%)</title><rect x="386.5" y="67.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="389.5" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (2 samples, 0.10%)</title><rect x="386.5" y="51.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="389.5" y="62.0"></text>
</g>
<g>
<title>__pread (2 samples, 0.10%)</title><rect x="386.5" y="35.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="389.5" y="46.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (5 samples, 0.25%)</title><rect x="387.7" y="147.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="390.7" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (5 samples, 0.25%)</title><rect x="387.7" y="131.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="390.7" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.05%)</title><rect x="387.7" y="115.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="390.7" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.05%)</title><rect x="387.7" y="99.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="390.7" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (4 samples, 0.20%)</title><rect x="388.3" y="115.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="391.3" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.05%)</title><rect x="388.3" y="99.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="391.3" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (3 samples, 0.15%)</title><rect x="388.9" y="99.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="391.9" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (3 samples, 0.15%)</title><rect x="388.9" y="83.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="391.9" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (3 samples, 0.15%)</title><rect x="388.9" y="67.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="391.9" y="78.0"></text>
</g>
<g>
<title>__pread (3 samples, 0.15%)</title><rect x="388.9" y="51.0" width="1.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="391.9" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.iterator (5 samples, 0.25%)</title><rect x="390.6" y="355.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="393.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (5 samples, 0.25%)</title><rect x="390.6" y="339.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="393.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (5 samples, 0.25%)</title><rect x="390.6" y="323.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="393.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (5 samples, 0.25%)</title><rect x="390.6" y="307.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="393.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (5 samples, 0.25%)</title><rect x="390.6" y="291.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="393.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (5 samples, 0.25%)</title><rect x="390.6" y="275.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="393.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (4 samples, 0.20%)</title><rect x="391.2" y="259.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="394.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (4 samples, 0.20%)</title><rect x="391.2" y="243.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="394.2" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.20%)</title><rect x="391.2" y="227.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="394.2" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.10%)</title><rect x="392.3" y="211.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="395.3" y="222.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.10%)</title><rect x="392.3" y="195.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="395.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.proxy (57 samples, 2.80%)</title><rect x="393.5" y="435.0" width="33.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.5" y="446.0">ru..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.05%)</title><rect x="393.5" y="419.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="396.5" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (55 samples, 2.70%)</title><rect x="394.1" y="419.0" width="31.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="397.1" y="430.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (55 samples, 2.70%)</title><rect x="394.1" y="403.0" width="31.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="397.1" y="414.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (18 samples, 0.88%)</title><rect x="394.1" y="387.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="397.1" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 0.20%)</title><rect x="394.1" y="371.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="397.1" y="382.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.20%)</title><rect x="394.1" y="355.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="397.1" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.15%)</title><rect x="394.6" y="339.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="397.6" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.15%)</title><rect x="394.6" y="323.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="397.6" y="334.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.10%)</title><rect x="394.6" y="307.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="397.6" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.05%)</title><rect x="394.6" y="291.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="397.6" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.05%)</title><rect x="394.6" y="275.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="397.6" y="286.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.05%)</title><rect x="394.6" y="259.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="397.6" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.05%)</title><rect x="394.6" y="243.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="397.6" y="254.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.05%)</title><rect x="394.6" y="227.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="397.6" y="238.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.05%)</title><rect x="394.6" y="211.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="397.6" y="222.0"></text>
</g>
<g>
<title>G1ConcurrentRefine::max_num_threads() (1 samples, 0.05%)</title><rect x="394.6" y="195.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="397.6" y="206.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.05%)</title><rect x="395.2" y="291.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="398.2" y="302.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.05%)</title><rect x="395.8" y="307.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="398.8" y="318.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (14 samples, 0.69%)</title><rect x="396.4" y="371.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="399.4" y="382.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (5 samples, 0.25%)</title><rect x="398.1" y="355.0" width="2.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="401.1" y="366.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.05%)</title><rect x="398.7" y="339.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="401.7" y="350.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.05%)</title><rect x="399.3" y="339.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="402.3" y="350.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.10%)</title><rect x="399.9" y="339.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="402.9" y="350.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="399.9" y="323.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="402.9" y="334.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.05%)</title><rect x="400.4" y="323.0" width="0.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="403.4" y="334.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.10%)</title><rect x="401.0" y="355.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="404.0" y="366.0"></text>
</g>
<g>
<title>__recv (4 samples, 0.20%)</title><rect x="402.2" y="355.0" width="2.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="405.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (11 samples, 0.54%)</title><rect x="404.5" y="387.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="407.5" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (5 samples, 0.25%)</title><rect x="404.5" y="371.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="407.5" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.25%)</title><rect x="404.5" y="355.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="407.5" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.25%)</title><rect x="404.5" y="339.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="407.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.05%)</title><rect x="407.4" y="371.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="410.4" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.05%)</title><rect x="408.0" y="371.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="411.0" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="408.0" y="355.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="411.0" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (4 samples, 0.20%)</title><rect x="408.5" y="371.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="411.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.05%)</title><rect x="410.3" y="355.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="413.3" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.05%)</title><rect x="410.3" y="339.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="413.3" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="410.3" y="323.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="413.3" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (12 samples, 0.59%)</title><rect x="410.9" y="387.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="413.9" y="398.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (12 samples, 0.59%)</title><rect x="410.9" y="371.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="413.9" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (12 samples, 0.59%)</title><rect x="410.9" y="355.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="413.9" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (12 samples, 0.59%)</title><rect x="410.9" y="339.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="413.9" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (12 samples, 0.59%)</title><rect x="410.9" y="323.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="413.9" y="334.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="416.7" y="307.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="419.7" y="318.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.05%)</title><rect x="417.2" y="307.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="420.2" y="318.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (5 samples, 0.25%)</title><rect x="417.8" y="387.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="420.8" y="398.0"></text>
</g>
<g>
<title>__setsockopt (5 samples, 0.25%)</title><rect x="417.8" y="371.0" width="2.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="420.8" y="382.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (9 samples, 0.44%)</title><rect x="420.7" y="387.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="423.7" y="398.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (4 samples, 0.20%)</title><rect x="420.7" y="371.0" width="2.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="423.7" y="382.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.15%)</title><rect x="420.7" y="355.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="423.7" y="366.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.05%)</title><rect x="422.4" y="355.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="425.4" y="366.0"></text>
</g>
<g>
<title>__libc_send (5 samples, 0.25%)</title><rect x="423.0" y="371.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="426.0" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.05%)</title><rect x="425.9" y="419.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="428.9" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (2 samples, 0.10%)</title><rect x="426.5" y="515.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="429.5" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (1 samples, 0.05%)</title><rect x="426.5" y="499.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="429.5" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.&lt;init&gt; (1 samples, 0.05%)</title><rect x="426.5" y="483.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="429.5" y="494.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.05%)</title><rect x="426.5" y="467.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="429.5" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.05%)</title><rect x="427.1" y="499.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="430.1" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.05%)</title><rect x="427.1" y="483.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="430.1" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/clustering/ConsistentHashingTopology.replicasFor (7 samples, 0.34%)</title><rect x="427.7" y="579.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="430.7" y="590.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.hashBytes (3 samples, 0.15%)</title><rect x="427.7" y="563.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="430.7" y="574.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.newHasher (2 samples, 0.10%)</title><rect x="427.7" y="547.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="430.7" y="558.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction.newHasher (2 samples, 0.10%)</title><rect x="427.7" y="531.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="430.7" y="542.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.&lt;init&gt; (2 samples, 0.10%)</title><rect x="427.7" y="515.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="430.7" y="526.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (2 samples, 0.10%)</title><rect x="427.7" y="499.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="430.7" y="510.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (2 samples, 0.10%)</title><rect x="427.7" y="483.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="430.7" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.05%)</title><rect x="428.2" y="467.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="431.2" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="428.2" y="451.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="431.2" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="428.2" y="435.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="431.2" y="446.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.hash (1 samples, 0.05%)</title><rect x="428.8" y="547.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="431.8" y="558.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.munch (1 samples, 0.05%)</title><rect x="428.8" y="531.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="431.8" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.compact (1 samples, 0.05%)</title><rect x="428.8" y="515.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="431.8" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="428.8" y="499.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="431.8" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="428.8" y="483.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="431.8" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.05%)</title><rect x="429.4" y="563.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="432.4" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="429.4" y="547.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="432.4" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="429.4" y="531.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="432.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.10%)</title><rect x="430.0" y="563.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.10%)</title><rect x="430.0" y="547.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="433.0" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.10%)</title><rect x="430.0" y="531.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="433.0" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.05%)</title><rect x="430.6" y="515.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="433.6" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="430.6" y="499.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="433.6" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.05%)</title><rect x="430.6" y="483.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="433.6" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="430.6" y="467.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="433.6" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="430.6" y="451.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="433.6" y="462.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="430.6" y="435.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="433.6" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.05%)</title><rect x="430.6" y="419.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="433.6" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.05%)</title><rect x="431.1" y="563.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="434.1" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.05%)</title><rect x="431.1" y="547.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="434.1" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (1 samples, 0.05%)</title><rect x="431.1" y="531.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="434.1" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (1 samples, 0.05%)</title><rect x="431.1" y="515.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="434.1" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.mergeEntries (2 samples, 0.10%)</title><rect x="431.7" y="595.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="434.7" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.05%)</title><rect x="431.7" y="579.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="434.7" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.05%)</title><rect x="431.7" y="563.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="434.7" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (1 samples, 0.05%)</title><rect x="431.7" y="547.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="434.7" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (1 samples, 0.05%)</title><rect x="431.7" y="531.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="434.7" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (1 samples, 0.05%)</title><rect x="431.7" y="515.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="434.7" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (1 samples, 0.05%)</title><rect x="432.3" y="579.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="435.3" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (1 samples, 0.05%)</title><rect x="432.3" y="563.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="435.3" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.05%)</title><rect x="432.3" y="547.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="435.3" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.05%)</title><rect x="432.3" y="531.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="435.3" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2.makeSink (1 samples, 0.05%)</title><rect x="432.3" y="515.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="435.3" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2.makeSink (1 samples, 0.05%)</title><rect x="432.3" y="499.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="435.3" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2ReducingSink.&lt;init&gt; (1 samples, 0.05%)</title><rect x="432.3" y="483.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="435.3" y="494.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.05%)</title><rect x="432.3" y="467.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="435.3" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.responseToEntry (1 samples, 0.05%)</title><rect x="432.9" y="595.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="435.9" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.05%)</title><rect x="432.9" y="579.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="435.9" y="590.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.05%)</title><rect x="432.9" y="563.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="435.9" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.05%)</title><rect x="432.9" y="547.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="435.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$120/254200562.act (1,201 samples, 58.96%)</title><rect x="433.5" y="627.0" width="695.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="436.5" y="638.0">ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$120/254200562.act</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replicasGet$1 (1,201 samples, 58.96%)</title><rect x="433.5" y="611.0" width="695.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="436.5" y="622.0">ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replicasGet$1</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/SimpleRequests.get (1,201 samples, 58.96%)</title><rect x="433.5" y="595.0" width="695.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="436.5" y="606.0">ru/mail/polis/service/mrsandman5/replication/SimpleRequests.get</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.entryFromBytes (1,199 samples, 58.86%)</title><rect x="434.0" y="579.0" width="694.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="437.0" y="590.0">ru/mail/polis/service/mrsandman5/replication/Entry.entryFromBytes</text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.05%)</title><rect x="434.0" y="563.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="437.0" y="574.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.05%)</title><rect x="434.0" y="547.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="437.0" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.hasNext (1 samples, 0.05%)</title><rect x="434.6" y="563.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="437.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (79 samples, 3.88%)</title><rect x="435.2" y="563.0" width="45.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="438.2" y="574.0">ru/m..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (77 samples, 3.78%)</title><rect x="435.8" y="547.0" width="44.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="438.8" y="558.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (2 samples, 0.10%)</title><rect x="436.4" y="531.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="439.4" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (8 samples, 0.39%)</title><rect x="437.5" y="531.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="440.5" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (8 samples, 0.39%)</title><rect x="437.5" y="515.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="440.5" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (8 samples, 0.39%)</title><rect x="437.5" y="499.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="440.5" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8 samples, 0.39%)</title><rect x="437.5" y="483.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="440.5" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8 samples, 0.39%)</title><rect x="437.5" y="467.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="440.5" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1 samples, 0.05%)</title><rect x="437.5" y="451.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="440.5" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (1 samples, 0.05%)</title><rect x="437.5" y="435.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="440.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (1 samples, 0.05%)</title><rect x="437.5" y="419.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="440.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (1 samples, 0.05%)</title><rect x="437.5" y="403.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="440.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (1 samples, 0.05%)</title><rect x="437.5" y="387.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="440.5" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.05%)</title><rect x="437.5" y="371.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="440.5" y="382.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (7 samples, 0.34%)</title><rect x="438.1" y="451.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="441.1" y="462.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (7 samples, 0.34%)</title><rect x="438.1" y="435.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="441.1" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (7 samples, 0.34%)</title><rect x="438.1" y="419.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="441.1" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (7 samples, 0.34%)</title><rect x="438.1" y="403.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="441.1" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.25%)</title><rect x="438.1" y="387.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="441.1" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="438.1" y="371.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="441.1" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (1 samples, 0.05%)</title><rect x="438.1" y="355.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="441.1" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.20%)</title><rect x="438.7" y="371.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="441.7" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.05%)</title><rect x="440.4" y="355.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="443.4" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (2 samples, 0.10%)</title><rect x="441.0" y="387.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="444.0" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (2 samples, 0.10%)</title><rect x="441.0" y="371.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="444.0" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (66 samples, 3.24%)</title><rect x="442.1" y="531.0" width="38.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="445.1" y="542.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (66 samples, 3.24%)</title><rect x="442.1" y="515.0" width="38.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="445.1" y="526.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (66 samples, 3.24%)</title><rect x="442.1" y="499.0" width="38.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="445.1" y="510.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (66 samples, 3.24%)</title><rect x="442.1" y="483.0" width="38.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="445.1" y="494.0">jav..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (66 samples, 3.24%)</title><rect x="442.1" y="467.0" width="38.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="445.1" y="478.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (66 samples, 3.24%)</title><rect x="442.1" y="451.0" width="38.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="445.1" y="462.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (64 samples, 3.14%)</title><rect x="442.1" y="435.0" width="37.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="445.1" y="446.0">com..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (64 samples, 3.14%)</title><rect x="442.1" y="419.0" width="37.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="445.1" y="430.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (64 samples, 3.14%)</title><rect x="442.1" y="403.0" width="37.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="445.1" y="414.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (64 samples, 3.14%)</title><rect x="442.1" y="387.0" width="37.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="445.1" y="398.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (21 samples, 1.03%)</title><rect x="442.1" y="371.0" width="12.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="445.1" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.10%)</title><rect x="442.1" y="355.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="445.1" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="442.7" y="339.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="445.7" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="442.7" y="323.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="445.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (19 samples, 0.93%)</title><rect x="443.3" y="355.0" width="11.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="446.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (19 samples, 0.93%)</title><rect x="443.3" y="339.0" width="11.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="446.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.10%)</title><rect x="443.3" y="323.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="446.3" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.10%)</title><rect x="443.3" y="307.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="446.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (16 samples, 0.79%)</title><rect x="444.5" y="323.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="447.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (14 samples, 0.69%)</title><rect x="445.0" y="307.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="448.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (14 samples, 0.69%)</title><rect x="445.0" y="291.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="448.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (14 samples, 0.69%)</title><rect x="445.0" y="275.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="448.0" y="286.0"></text>
</g>
<g>
<title>__pread (13 samples, 0.64%)</title><rect x="445.6" y="259.0" width="7.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="448.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="453.2" y="307.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="456.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.05%)</title><rect x="453.2" y="291.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="456.2" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="453.2" y="275.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="456.2" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="453.2" y="259.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="456.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="453.2" y="243.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="456.2" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="453.2" y="227.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="456.2" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.05%)</title><rect x="453.7" y="323.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="456.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (43 samples, 2.11%)</title><rect x="454.3" y="371.0" width="24.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="457.3" y="382.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (43 samples, 2.11%)</title><rect x="454.3" y="355.0" width="24.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="457.3" y="366.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.10%)</title><rect x="454.3" y="339.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="457.3" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.10%)</title><rect x="454.3" y="323.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="457.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.10%)</title><rect x="455.5" y="339.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="458.5" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.10%)</title><rect x="455.5" y="323.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="458.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (34 samples, 1.67%)</title><rect x="456.6" y="339.0" width="19.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="459.6" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.15%)</title><rect x="457.8" y="323.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="460.8" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.15%)</title><rect x="457.8" y="307.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="460.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.05%)</title><rect x="457.8" y="291.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="460.8" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.10%)</title><rect x="458.4" y="291.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="461.4" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.10%)</title><rect x="458.4" y="275.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="461.4" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.10%)</title><rect x="458.4" y="259.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="461.4" y="270.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="458.4" y="243.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="461.4" y="254.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.05%)</title><rect x="458.9" y="243.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="461.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (27 samples, 1.33%)</title><rect x="459.5" y="323.0" width="15.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="462.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (27 samples, 1.33%)</title><rect x="459.5" y="307.0" width="15.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="462.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (27 samples, 1.33%)</title><rect x="459.5" y="291.0" width="15.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="462.5" y="302.0"></text>
</g>
<g>
<title>__pread (26 samples, 1.28%)</title><rect x="460.1" y="275.0" width="15.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="463.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.10%)</title><rect x="475.2" y="323.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="478.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (2 samples, 0.10%)</title><rect x="475.2" y="307.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="478.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (3 samples, 0.15%)</title><rect x="476.3" y="339.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="479.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.05%)</title><rect x="477.5" y="323.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (2 samples, 0.10%)</title><rect x="478.1" y="339.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="481.1" y="350.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.10%)</title><rect x="479.2" y="435.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="482.2" y="446.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.10%)</title><rect x="479.2" y="419.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="482.2" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (2 samples, 0.10%)</title><rect x="479.2" y="403.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="482.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (2 samples, 0.10%)</title><rect x="479.2" y="387.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="482.2" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.10%)</title><rect x="479.2" y="371.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="482.2" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="479.2" y="355.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="482.2" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.05%)</title><rect x="479.2" y="339.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="482.2" y="350.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.05%)</title><rect x="479.8" y="355.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="482.8" y="366.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.05%)</title><rect x="479.8" y="339.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="482.8" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.05%)</title><rect x="480.4" y="547.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="483.4" y="558.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.05%)</title><rect x="480.4" y="531.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="483.4" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ByteUtils.toByteArray (1 samples, 0.05%)</title><rect x="481.0" y="563.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="484.0" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.05%)</title><rect x="481.0" y="547.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="484.0" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.05%)</title><rect x="481.0" y="531.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="484.0" y="542.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="481.0" y="515.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="484.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils.entryIterators (1,117 samples, 54.84%)</title><rect x="481.5" y="563.0" width="647.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="484.5" y="574.0">ru/mail/polis/utils/IteratorUtils.entryIterators</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (100 samples, 4.91%)</title><rect x="481.5" y="547.0" width="58.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="484.5" y="558.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (100 samples, 4.91%)</title><rect x="481.5" y="531.0" width="58.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="484.5" y="542.0">com/go..</text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (1 samples, 0.05%)</title><rect x="481.5" y="515.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="484.5" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1 samples, 0.05%)</title><rect x="481.5" y="499.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="484.5" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (99 samples, 4.86%)</title><rect x="482.1" y="515.0" width="57.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="485.1" y="526.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (99 samples, 4.86%)</title><rect x="482.1" y="499.0" width="57.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.1" y="510.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (1 samples, 0.05%)</title><rect x="482.7" y="483.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="485.7" y="494.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="482.7" y="467.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="485.7" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (97 samples, 4.76%)</title><rect x="483.3" y="483.0" width="56.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="486.3" y="494.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (97 samples, 4.76%)</title><rect x="483.3" y="467.0" width="56.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="486.3" y="478.0">java/u..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (97 samples, 4.76%)</title><rect x="483.3" y="451.0" width="56.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="486.3" y="462.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (97 samples, 4.76%)</title><rect x="483.3" y="435.0" width="56.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="486.3" y="446.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (94 samples, 4.61%)</title><rect x="483.3" y="419.0" width="54.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="486.3" y="430.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (4 samples, 0.20%)</title><rect x="483.9" y="403.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="486.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (4 samples, 0.20%)</title><rect x="483.9" y="387.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="486.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (4 samples, 0.20%)</title><rect x="483.9" y="371.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="486.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (4 samples, 0.20%)</title><rect x="483.9" y="355.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="486.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (1 samples, 0.05%)</title><rect x="485.6" y="339.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="488.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (89 samples, 4.37%)</title><rect x="486.2" y="403.0" width="51.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="489.2" y="414.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (89 samples, 4.37%)</title><rect x="486.2" y="387.0" width="51.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="489.2" y="398.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (89 samples, 4.37%)</title><rect x="486.2" y="371.0" width="51.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="489.2" y="382.0">ru/ma..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.15%)</title><rect x="486.2" y="355.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="489.2" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="486.2" y="339.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="489.2" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="486.2" y="323.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="489.2" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="486.2" y="307.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="489.2" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="486.2" y="291.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="489.2" y="302.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="486.2" y="275.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="489.2" y="286.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="486.2" y="259.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="489.2" y="270.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.05%)</title><rect x="486.2" y="243.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="489.2" y="254.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.05%)</title><rect x="486.2" y="227.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="489.2" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="486.8" y="339.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="489.8" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="486.8" y="323.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="489.8" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="487.3" y="307.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="490.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (33 samples, 1.62%)</title><rect x="487.9" y="355.0" width="19.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="490.9" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.05%)</title><rect x="487.9" y="339.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="490.9" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="487.9" y="323.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="490.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="487.9" y="307.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="490.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (1 samples, 0.05%)</title><rect x="488.5" y="339.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="491.5" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.rewind (1 samples, 0.05%)</title><rect x="488.5" y="323.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="491.5" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.05%)</title><rect x="489.1" y="339.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="492.1" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="489.1" y="323.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="492.1" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="489.1" y="307.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="492.1" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.05%)</title><rect x="489.1" y="291.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="492.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (30 samples, 1.47%)</title><rect x="489.6" y="339.0" width="17.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="492.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (29 samples, 1.42%)</title><rect x="490.2" y="323.0" width="16.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="493.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.10%)</title><rect x="490.8" y="307.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="493.8" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.10%)</title><rect x="490.8" y="291.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="493.8" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.05%)</title><rect x="492.0" y="307.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="495.0" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.05%)</title><rect x="492.0" y="291.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="495.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 1.18%)</title><rect x="492.5" y="307.0" width="13.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="495.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (21 samples, 1.03%)</title><rect x="492.5" y="291.0" width="12.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="495.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (21 samples, 1.03%)</title><rect x="492.5" y="275.0" width="12.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="495.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (21 samples, 1.03%)</title><rect x="492.5" y="259.0" width="12.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="495.5" y="270.0"></text>
</g>
<g>
<title>__pread (19 samples, 0.93%)</title><rect x="493.1" y="243.0" width="11.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="496.1" y="254.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.05%)</title><rect x="504.1" y="243.0" width="0.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="507.1" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="504.7" y="291.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="507.7" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="504.7" y="275.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="507.7" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.05%)</title><rect x="504.7" y="259.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="507.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.10%)</title><rect x="505.3" y="291.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="508.3" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="505.3" y="275.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="508.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (1 samples, 0.05%)</title><rect x="505.9" y="275.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="508.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.05%)</title><rect x="506.4" y="307.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="509.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (53 samples, 2.60%)</title><rect x="507.0" y="355.0" width="30.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="510.0" y="366.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (53 samples, 2.60%)</title><rect x="507.0" y="339.0" width="30.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="510.0" y="350.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.05%)</title><rect x="507.6" y="323.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="510.6" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.05%)</title><rect x="507.6" y="307.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="510.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.10%)</title><rect x="508.2" y="323.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="511.2" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.10%)</title><rect x="508.2" y="307.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="511.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (49 samples, 2.41%)</title><rect x="509.3" y="323.0" width="28.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="512.3" y="334.0">su..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.10%)</title><rect x="509.9" y="307.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="512.9" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.10%)</title><rect x="509.9" y="291.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="512.9" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.05%)</title><rect x="509.9" y="275.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="512.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="509.9" y="259.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="512.9" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="509.9" y="243.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="512.9" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="509.9" y="227.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="512.9" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.05%)</title><rect x="510.5" y="275.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="513.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (37 samples, 1.82%)</title><rect x="511.1" y="307.0" width="21.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="514.1" y="318.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (37 samples, 1.82%)</title><rect x="511.1" y="291.0" width="21.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="514.1" y="302.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (37 samples, 1.82%)</title><rect x="511.1" y="275.0" width="21.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="514.1" y="286.0">s..</text>
</g>
<g>
<title>__pread (35 samples, 1.72%)</title><rect x="511.1" y="259.0" width="20.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="514.1" y="270.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.05%)</title><rect x="531.4" y="259.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="534.4" y="270.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="531.9" y="259.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="534.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (8 samples, 0.39%)</title><rect x="532.5" y="307.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="535.5" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.20%)</title><rect x="532.5" y="291.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="535.5" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.05%)</title><rect x="534.3" y="275.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="537.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.20%)</title><rect x="534.8" y="291.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="537.8" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.05%)</title><rect x="536.6" y="275.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="539.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="537.1" y="307.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="540.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (1 samples, 0.05%)</title><rect x="537.1" y="291.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="540.1" y="302.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (3 samples, 0.15%)</title><rect x="537.7" y="419.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="540.7" y="430.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (3 samples, 0.15%)</title><rect x="537.7" y="403.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="540.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (3 samples, 0.15%)</title><rect x="537.7" y="387.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="540.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (3 samples, 0.15%)</title><rect x="537.7" y="371.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="540.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.10%)</title><rect x="537.7" y="355.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="540.7" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.10%)</title><rect x="537.7" y="339.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="540.7" y="350.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.05%)</title><rect x="538.3" y="323.0" width="0.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="541.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (1 samples, 0.05%)</title><rect x="538.9" y="355.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="541.9" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.05%)</title><rect x="538.9" y="339.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="541.9" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="538.9" y="323.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="541.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="538.9" y="307.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="541.9" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="538.9" y="291.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="541.9" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="538.9" y="275.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="541.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="538.9" y="259.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="541.9" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="538.9" y="243.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="541.9" y="254.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (984 samples, 48.31%)</title><rect x="539.5" y="547.0" width="570.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="542.5" y="558.0">java/util/Collections$UnmodifiableCollection.forEach</text>
</g>
<g>
<title>java/lang/Iterable.forEach (984 samples, 48.31%)</title><rect x="539.5" y="531.0" width="570.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="542.5" y="542.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (2 samples, 0.10%)</title><rect x="539.5" y="515.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="542.5" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (2 samples, 0.10%)</title><rect x="539.5" y="499.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="542.5" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (2 samples, 0.10%)</title><rect x="539.5" y="483.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="542.5" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (2 samples, 0.10%)</title><rect x="539.5" y="467.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="542.5" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (2 samples, 0.10%)</title><rect x="539.5" y="451.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="542.5" y="462.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (2 samples, 0.10%)</title><rect x="540.6" y="515.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="543.6" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (2 samples, 0.10%)</title><rect x="540.6" y="499.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="543.6" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (2 samples, 0.10%)</title><rect x="540.6" y="483.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="543.6" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.&lt;init&gt; (2 samples, 0.10%)</title><rect x="540.6" y="467.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="543.6" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (2 samples, 0.10%)</title><rect x="540.6" y="451.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="543.6" y="462.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.05%)</title><rect x="541.8" y="515.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="544.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils$$Lambda$115/1902819636.accept (979 samples, 48.06%)</title><rect x="542.4" y="515.0" width="567.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="545.4" y="526.0">ru/mail/polis/utils/IteratorUtils$$Lambda$115/1902819636.accept</text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils.lambda$entryIterators$3 (979 samples, 48.06%)</title><rect x="542.4" y="499.0" width="567.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="545.4" y="510.0">ru/mail/polis/utils/IteratorUtils.lambda$entryIterators$3</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.iterator (979 samples, 48.06%)</title><rect x="542.4" y="483.0" width="567.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="545.4" y="494.0">ru/mail/polis/dao/impl/tables/SSTable.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt; (979 samples, 48.06%)</title><rect x="542.4" y="467.0" width="567.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="545.4" y="478.0">ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getPosition (979 samples, 48.06%)</title><rect x="542.4" y="451.0" width="567.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="545.4" y="462.0">ru/mail/polis/dao/impl/tables/SSTable.getPosition</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (24 samples, 1.18%)</title><rect x="542.9" y="435.0" width="13.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="545.9" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="544.1" y="419.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="547.1" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.05%)</title><rect x="544.1" y="403.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="547.1" y="414.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (21 samples, 1.03%)</title><rect x="544.7" y="419.0" width="12.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="547.7" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.25%)</title><rect x="553.9" y="403.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="556.9" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.05%)</title><rect x="556.3" y="387.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="559.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.keyAt (954 samples, 46.83%)</title><rect x="556.8" y="435.0" width="552.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="559.8" y="446.0">ru/mail/polis/dao/impl/tables/SSTable.keyAt</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (16 samples, 0.79%)</title><rect x="558.0" y="419.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="561.0" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.10%)</title><rect x="558.0" y="403.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="561.0" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="558.0" y="387.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="561.0" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="558.0" y="371.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="561.0" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="558.0" y="355.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="561.0" y="366.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.05%)</title><rect x="558.6" y="387.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="561.6" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.69%)</title><rect x="559.2" y="403.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="562.2" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.10%)</title><rect x="562.1" y="387.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="565.1" y="398.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="562.6" y="371.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="565.6" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="562.6" y="355.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="565.6" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="562.6" y="339.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="565.6" y="350.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="562.6" y="323.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="565.6" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="562.6" y="307.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="565.6" y="318.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.05%)</title><rect x="562.6" y="291.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="565.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.34%)</title><rect x="563.2" y="387.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="566.2" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.34%)</title><rect x="563.2" y="371.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="566.2" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.34%)</title><rect x="563.2" y="355.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="566.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.34%)</title><rect x="563.2" y="339.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="566.2" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.10%)</title><rect x="566.1" y="323.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="569.1" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (48 samples, 2.36%)</title><rect x="567.3" y="419.0" width="27.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="570.3" y="430.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.10%)</title><rect x="578.9" y="403.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="581.9" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.10%)</title><rect x="578.9" y="387.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="581.9" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.10%)</title><rect x="578.9" y="371.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="581.9" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.10%)</title><rect x="578.9" y="355.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="581.9" y="366.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="578.9" y="339.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="581.9" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="578.9" y="323.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="581.9" y="334.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.05%)</title><rect x="579.4" y="339.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="582.4" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (26 samples, 1.28%)</title><rect x="580.0" y="403.0" width="15.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="583.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (25 samples, 1.23%)</title><rect x="580.6" y="387.0" width="14.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="583.6" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (9 samples, 0.44%)</title><rect x="589.9" y="371.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="592.9" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.20%)</title><rect x="590.4" y="355.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="593.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="592.2" y="339.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="595.2" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.20%)</title><rect x="592.8" y="355.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="595.8" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.10%)</title><rect x="593.9" y="339.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="596.9" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getInt (2 samples, 0.10%)</title><rect x="595.1" y="419.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="598.1" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (1 samples, 0.05%)</title><rect x="595.7" y="403.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="598.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (338 samples, 16.59%)</title><rect x="596.2" y="419.0" width="195.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="599.2" y="430.0">ru/mail/polis/dao/impl/ta..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.05%)</title><rect x="598.0" y="403.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="601.0" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="598.0" y="387.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="601.0" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="598.0" y="371.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="601.0" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (18 samples, 0.88%)</title><rect x="598.6" y="403.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="601.6" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="599.1" y="387.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="602.1" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (16 samples, 0.79%)</title><rect x="599.7" y="387.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="602.7" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (16 samples, 0.79%)</title><rect x="599.7" y="371.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="602.7" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="603.8" y="355.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="606.8" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.34%)</title><rect x="604.3" y="355.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="607.3" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.10%)</title><rect x="604.3" y="339.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="607.3" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.15%)</title><rect x="605.5" y="339.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="608.5" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.15%)</title><rect x="605.5" y="323.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="608.5" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.10%)</title><rect x="606.1" y="307.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="609.1" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="606.7" y="291.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="609.7" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.10%)</title><rect x="607.2" y="339.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="610.2" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.10%)</title><rect x="607.2" y="323.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="610.2" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.05%)</title><rect x="608.4" y="355.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="611.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (316 samples, 15.51%)</title><rect x="609.0" y="403.0" width="183.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="612.0" y="414.0">sun/nio/ch/FileChannelIm..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (314 samples, 15.41%)</title><rect x="610.1" y="387.0" width="181.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="613.1" y="398.0">sun/nio/ch/FileChannelI..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (21 samples, 1.03%)</title><rect x="613.0" y="371.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="616.0" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (21 samples, 1.03%)</title><rect x="613.0" y="355.0" width="12.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="616.0" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (8 samples, 0.39%)</title><rect x="614.8" y="339.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="617.8" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (2 samples, 0.10%)</title><rect x="619.4" y="339.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="622.4" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (7 samples, 0.34%)</title><rect x="620.6" y="339.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="623.6" y="350.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (6 samples, 0.29%)</title><rect x="620.6" y="323.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="623.6" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (6 samples, 0.29%)</title><rect x="620.6" y="307.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="623.6" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/SharedSecrets.getJavaLangAccess (1 samples, 0.05%)</title><rect x="624.0" y="323.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="627.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.05%)</title><rect x="624.6" y="339.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="627.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (268 samples, 13.16%)</title><rect x="625.2" y="371.0" width="155.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="628.2" y="382.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (7 samples, 0.34%)</title><rect x="626.9" y="355.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="629.9" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (7 samples, 0.34%)</title><rect x="626.9" y="339.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="629.9" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (4 samples, 0.20%)</title><rect x="628.1" y="323.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="631.1" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.15%)</title><rect x="628.7" y="307.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="631.7" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.05%)</title><rect x="630.4" y="323.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="633.4" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.05%)</title><rect x="630.4" y="307.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="633.4" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkSize (1 samples, 0.05%)</title><rect x="630.4" y="291.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="633.4" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (2 samples, 0.10%)</title><rect x="631.0" y="355.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="634.0" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (2 samples, 0.10%)</title><rect x="631.0" y="339.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="634.0" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.flip (1 samples, 0.05%)</title><rect x="631.6" y="323.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="634.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (199 samples, 9.77%)</title><rect x="632.2" y="355.0" width="115.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="635.2" y="366.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (199 samples, 9.77%)</title><rect x="632.2" y="339.0" width="115.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="635.2" y="350.0">sun/nio/ch/Fil..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (199 samples, 9.77%)</title><rect x="632.2" y="323.0" width="115.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="635.2" y="334.0">sun/nio/ch/Fil..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (4 samples, 0.20%)</title><rect x="635.0" y="307.0" width="2.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="638.0" y="318.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.10%)</title><rect x="636.2" y="291.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="639.2" y="302.0"></text>
</g>
<g>
<title>__pread (183 samples, 8.98%)</title><rect x="637.4" y="307.0" width="106.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="640.4" y="318.0">__pread</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.34%)</title><rect x="743.4" y="307.0" width="4.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="746.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (47 samples, 2.31%)</title><rect x="747.4" y="355.0" width="27.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="750.4" y="366.0">s..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (12 samples, 0.59%)</title><rect x="758.4" y="339.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="761.4" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.10%)</title><rect x="760.8" y="323.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="763.8" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (4 samples, 0.20%)</title><rect x="761.9" y="323.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="764.9" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.10%)</title><rect x="764.2" y="323.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="767.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (15 samples, 0.74%)</title><rect x="765.4" y="339.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="768.4" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.10%)</title><rect x="772.9" y="323.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="775.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.isBufferTooLarge (1 samples, 0.05%)</title><rect x="774.1" y="339.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="777.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (10 samples, 0.49%)</title><rect x="774.7" y="355.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="777.7" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.44%)</title><rect x="774.7" y="339.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="777.7" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.10%)</title><rect x="777.6" y="323.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="780.6" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (2 samples, 0.10%)</title><rect x="778.7" y="323.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="781.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (1 samples, 0.05%)</title><rect x="779.9" y="339.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="782.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (19 samples, 0.93%)</title><rect x="780.4" y="371.0" width="11.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="783.4" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.20%)</title><rect x="783.9" y="355.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="786.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (9 samples, 0.44%)</title><rect x="786.2" y="355.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="789.2" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.05%)</title><rect x="790.3" y="339.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="793.3" y="350.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.05%)</title><rect x="790.3" y="323.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="793.3" y="334.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.05%)</title><rect x="790.9" y="339.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="793.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.05%)</title><rect x="791.5" y="371.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="794.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.05%)</title><rect x="791.5" y="355.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.5" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.05%)</title><rect x="791.5" y="339.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="794.5" y="350.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.05%)</title><rect x="791.5" y="323.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="794.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (548 samples, 26.90%)</title><rect x="792.0" y="419.0" width="317.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="795.0" y="430.0">sun/nio/ch/FileChannelImpl.read</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (546 samples, 26.80%)</title><rect x="793.2" y="403.0" width="316.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="796.2" y="414.0">sun/nio/ch/FileChannelImpl.readInternal</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (21 samples, 1.03%)</title><rect x="796.1" y="387.0" width="12.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="799.1" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (21 samples, 1.03%)</title><rect x="796.1" y="371.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="799.1" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.05%)</title><rect x="804.2" y="355.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="807.2" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (6 samples, 0.29%)</title><rect x="804.8" y="355.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="807.8" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (6 samples, 0.29%)</title><rect x="804.8" y="339.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="807.8" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (6 samples, 0.29%)</title><rect x="804.8" y="323.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="807.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (6 samples, 0.29%)</title><rect x="808.3" y="387.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="811.3" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (6 samples, 0.29%)</title><rect x="808.3" y="371.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="811.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (486 samples, 23.86%)</title><rect x="811.7" y="387.0" width="281.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="814.7" y="398.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (15 samples, 0.74%)</title><rect x="819.8" y="371.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="822.8" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (13 samples, 0.64%)</title><rect x="820.4" y="355.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="823.4" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (2 samples, 0.10%)</title><rect x="820.4" y="339.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="823.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (4 samples, 0.20%)</title><rect x="821.6" y="339.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="824.6" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.05%)</title><rect x="823.3" y="323.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="826.3" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (1 samples, 0.05%)</title><rect x="823.3" y="307.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="826.3" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.ix (1 samples, 0.05%)</title><rect x="823.9" y="339.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="826.9" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.20%)</title><rect x="824.5" y="339.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="827.5" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.20%)</title><rect x="824.5" y="323.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="827.5" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.20%)</title><rect x="824.5" y="307.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="827.5" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.15%)</title><rect x="824.5" y="291.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="827.5" y="302.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="826.2" y="291.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="829.2" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.10%)</title><rect x="826.8" y="339.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="829.8" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.05%)</title><rect x="827.4" y="323.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="830.4" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.05%)</title><rect x="827.4" y="307.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="830.4" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.05%)</title><rect x="827.4" y="291.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="830.4" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.05%)</title><rect x="827.9" y="355.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="830.9" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (2 samples, 0.10%)</title><rect x="828.5" y="371.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="831.5" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (2 samples, 0.10%)</title><rect x="828.5" y="355.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="831.5" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.flip (2 samples, 0.10%)</title><rect x="828.5" y="339.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="831.5" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.flip (2 samples, 0.10%)</title><rect x="828.5" y="323.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="831.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (398 samples, 19.54%)</title><rect x="829.7" y="371.0" width="230.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="832.7" y="382.0">sun/nio/ch/IOUtil.readIntoNati..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (398 samples, 19.54%)</title><rect x="829.7" y="355.0" width="230.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="832.7" y="366.0">sun/nio/ch/FileDispatcherImpl...</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (398 samples, 19.54%)</title><rect x="829.7" y="339.0" width="230.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="832.7" y="350.0">sun/nio/ch/FileDispatcherImpl...</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (4 samples, 0.20%)</title><rect x="839.5" y="323.0" width="2.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="842.5" y="334.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.10%)</title><rect x="840.7" y="307.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="843.7" y="318.0"></text>
</g>
<g>
<title>__pread (351 samples, 17.23%)</title><rect x="841.9" y="323.0" width="203.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="844.9" y="334.0">__pread</text>
</g>
<g>
<title>__pthread_disable_asynccancel (11 samples, 0.54%)</title><rect x="1045.2" y="323.0" width="6.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1048.2" y="334.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (11 samples, 0.54%)</title><rect x="1051.6" y="323.0" width="6.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1054.6" y="334.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.05%)</title><rect x="1057.9" y="323.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1060.9" y="334.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.15%)</title><rect x="1058.5" y="323.0" width="1.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1061.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (18 samples, 0.88%)</title><rect x="1060.2" y="371.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1063.2" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.49%)</title><rect x="1061.4" y="355.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1064.4" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (5 samples, 0.25%)</title><rect x="1064.3" y="339.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1067.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (6 samples, 0.29%)</title><rect x="1067.2" y="355.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1070.2" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.05%)</title><rect x="1070.1" y="339.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1073.1" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.05%)</title><rect x="1070.1" y="323.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1073.1" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (1 samples, 0.05%)</title><rect x="1070.1" y="307.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1073.1" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.rewind (1 samples, 0.05%)</title><rect x="1070.1" y="291.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1073.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (39 samples, 1.91%)</title><rect x="1070.7" y="371.0" width="22.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1073.7" y="382.0">s..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (24 samples, 1.18%)</title><rect x="1072.4" y="355.0" width="13.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1075.4" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.20%)</title><rect x="1079.9" y="339.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1082.9" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (4 samples, 0.20%)</title><rect x="1082.3" y="339.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1085.3" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (3 samples, 0.15%)</title><rect x="1084.6" y="339.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1087.6" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.10%)</title><rect x="1086.3" y="355.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1089.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (10 samples, 0.49%)</title><rect x="1087.5" y="355.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1090.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (16 samples, 0.79%)</title><rect x="1093.3" y="387.0" width="9.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1096.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (14 samples, 0.69%)</title><rect x="1094.4" y="371.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1097.4" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.05%)</title><rect x="1101.4" y="355.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.4" y="366.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.05%)</title><rect x="1101.9" y="355.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1104.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (12 samples, 0.59%)</title><rect x="1102.5" y="387.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1105.5" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.05%)</title><rect x="1107.2" y="371.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (3 samples, 0.15%)</title><rect x="1107.7" y="371.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1110.7" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.05%)</title><rect x="1107.7" y="355.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.7" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.10%)</title><rect x="1108.3" y="355.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.3" y="366.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (2 samples, 0.10%)</title><rect x="1108.3" y="339.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (24 samples, 1.18%)</title><rect x="1109.5" y="547.0" width="13.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1112.5" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (24 samples, 1.18%)</title><rect x="1109.5" y="531.0" width="13.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1112.5" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (24 samples, 1.18%)</title><rect x="1109.5" y="515.0" width="13.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1112.5" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (4 samples, 0.20%)</title><rect x="1109.5" y="499.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1112.5" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (4 samples, 0.20%)</title><rect x="1109.5" y="483.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1112.5" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (4 samples, 0.20%)</title><rect x="1109.5" y="467.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1112.5" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4 samples, 0.20%)</title><rect x="1109.5" y="451.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1112.5" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4 samples, 0.20%)</title><rect x="1109.5" y="435.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1112.5" y="446.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (4 samples, 0.20%)</title><rect x="1109.5" y="419.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1112.5" y="430.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (4 samples, 0.20%)</title><rect x="1109.5" y="403.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1112.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (4 samples, 0.20%)</title><rect x="1109.5" y="387.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1112.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (4 samples, 0.20%)</title><rect x="1109.5" y="371.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1112.5" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.20%)</title><rect x="1109.5" y="355.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1112.5" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.05%)</title><rect x="1110.1" y="339.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1113.1" y="350.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.10%)</title><rect x="1110.6" y="339.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1113.6" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.10%)</title><rect x="1110.6" y="323.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1113.6" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (20 samples, 0.98%)</title><rect x="1111.8" y="499.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1114.8" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (20 samples, 0.98%)</title><rect x="1111.8" y="483.0" width="11.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1114.8" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (20 samples, 0.98%)</title><rect x="1111.8" y="467.0" width="11.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1114.8" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (20 samples, 0.98%)</title><rect x="1111.8" y="451.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1114.8" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (20 samples, 0.98%)</title><rect x="1111.8" y="435.0" width="11.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1114.8" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (20 samples, 0.98%)</title><rect x="1111.8" y="419.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1114.8" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (20 samples, 0.98%)</title><rect x="1111.8" y="403.0" width="11.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1114.8" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (20 samples, 0.98%)</title><rect x="1111.8" y="387.0" width="11.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1114.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (20 samples, 0.98%)</title><rect x="1111.8" y="371.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1114.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (20 samples, 0.98%)</title><rect x="1111.8" y="355.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1114.8" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.05%)</title><rect x="1111.8" y="339.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1114.8" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1111.8" y="323.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1114.8" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1111.8" y="307.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1114.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (5 samples, 0.25%)</title><rect x="1112.4" y="339.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1115.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (5 samples, 0.25%)</title><rect x="1112.4" y="323.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1115.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (5 samples, 0.25%)</title><rect x="1112.4" y="307.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1115.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.05%)</title><rect x="1112.4" y="291.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1115.4" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.05%)</title><rect x="1112.4" y="275.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1115.4" y="286.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.05%)</title><rect x="1112.4" y="259.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1115.4" y="270.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.05%)</title><rect x="1112.4" y="243.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1115.4" y="254.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.05%)</title><rect x="1112.4" y="227.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1115.4" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.05%)</title><rect x="1113.0" y="291.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1116.0" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.05%)</title><rect x="1113.0" y="275.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1116.0" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (3 samples, 0.15%)</title><rect x="1113.5" y="291.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1116.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.05%)</title><rect x="1113.5" y="275.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1116.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (1 samples, 0.05%)</title><rect x="1113.5" y="259.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1116.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.05%)</title><rect x="1113.5" y="243.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1116.5" y="254.0"></text>
</g>
<g>
<title>__pread (1 samples, 0.05%)</title><rect x="1113.5" y="227.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1116.5" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.10%)</title><rect x="1114.1" y="275.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1117.1" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="1114.1" y="259.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1117.1" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.05%)</title><rect x="1114.1" y="243.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1117.1" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (1 samples, 0.05%)</title><rect x="1114.7" y="259.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1117.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (14 samples, 0.69%)</title><rect x="1115.3" y="339.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1118.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (14 samples, 0.69%)</title><rect x="1115.3" y="323.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1118.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.05%)</title><rect x="1115.3" y="307.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1118.3" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.05%)</title><rect x="1115.3" y="291.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1118.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.05%)</title><rect x="1115.9" y="307.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1118.9" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.05%)</title><rect x="1115.9" y="291.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1118.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 0.54%)</title><rect x="1116.4" y="307.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1119.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (8 samples, 0.39%)</title><rect x="1117.0" y="291.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1120.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (8 samples, 0.39%)</title><rect x="1117.0" y="275.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1120.0" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (8 samples, 0.39%)</title><rect x="1117.0" y="259.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1120.0" y="270.0"></text>
</g>
<g>
<title>__pread (8 samples, 0.39%)</title><rect x="1117.0" y="243.0" width="4.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1120.0" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.10%)</title><rect x="1121.6" y="291.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1124.6" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="1121.6" y="275.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1124.6" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.05%)</title><rect x="1121.6" y="259.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1124.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (1 samples, 0.05%)</title><rect x="1122.2" y="275.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1125.2" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.05%)</title><rect x="1122.8" y="307.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1125.8" y="318.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.05%)</title><rect x="1122.8" y="291.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.8" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.05%)</title><rect x="1122.8" y="275.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.8" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.05%)</title><rect x="1122.8" y="259.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.iterator (9 samples, 0.44%)</title><rect x="1123.4" y="547.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1126.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (9 samples, 0.44%)</title><rect x="1123.4" y="531.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1126.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (9 samples, 0.44%)</title><rect x="1123.4" y="515.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1126.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (9 samples, 0.44%)</title><rect x="1123.4" y="499.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1126.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (9 samples, 0.44%)</title><rect x="1123.4" y="483.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1126.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (9 samples, 0.44%)</title><rect x="1123.4" y="467.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1126.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.10%)</title><rect x="1123.4" y="451.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1126.4" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.10%)</title><rect x="1123.4" y="435.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1126.4" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.10%)</title><rect x="1123.4" y="419.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1126.4" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.05%)</title><rect x="1123.4" y="403.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1126.4" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.05%)</title><rect x="1124.0" y="403.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1127.0" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.05%)</title><rect x="1124.0" y="387.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1127.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (7 samples, 0.34%)</title><rect x="1124.5" y="451.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1127.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (5 samples, 0.25%)</title><rect x="1125.7" y="435.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1128.7" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.25%)</title><rect x="1125.7" y="419.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1128.7" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.15%)</title><rect x="1126.9" y="403.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1129.9" y="414.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.15%)</title><rect x="1126.9" y="387.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1129.9" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.10%)</title><rect x="1127.4" y="371.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1130.4" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.05%)</title><rect x="1128.0" y="355.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1131.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.entryToResponse (1 samples, 0.05%)</title><rect x="1128.6" y="579.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1131.6" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.nonemptyResponse (1 samples, 0.05%)</title><rect x="1128.6" y="563.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1131.6" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1128.6" y="547.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1131.6" y="558.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="1128.6" y="531.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1131.6" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.sendResponse (25 samples, 1.23%)</title><rect x="1129.2" y="627.0" width="14.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1132.2" y="638.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.25%)</title><rect x="1129.2" y="611.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1132.2" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (18 samples, 0.88%)</title><rect x="1132.1" y="611.0" width="10.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1135.1" y="622.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.05%)</title><rect x="1132.7" y="595.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1135.7" y="606.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.05%)</title><rect x="1132.7" y="579.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1135.7" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.05%)</title><rect x="1132.7" y="563.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1135.7" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (15 samples, 0.74%)</title><rect x="1133.2" y="595.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1136.2" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.20%)</title><rect x="1133.2" y="579.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1136.2" y="590.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.10%)</title><rect x="1134.4" y="563.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1137.4" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.10%)</title><rect x="1134.4" y="547.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1137.4" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.10%)</title><rect x="1134.4" y="531.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1137.4" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.10%)</title><rect x="1134.4" y="515.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1137.4" y="526.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.10%)</title><rect x="1134.4" y="499.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1137.4" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="1135.0" y="483.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1138.0" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 0.54%)</title><rect x="1135.5" y="579.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1138.5" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 0.54%)</title><rect x="1135.5" y="563.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1138.5" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (11 samples, 0.54%)</title><rect x="1135.5" y="547.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1138.5" y="558.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (10 samples, 0.49%)</title><rect x="1136.1" y="531.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1139.1" y="542.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (5 samples, 0.25%)</title><rect x="1136.1" y="515.0" width="2.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1139.1" y="526.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.05%)</title><rect x="1136.7" y="499.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1139.7" y="510.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.10%)</title><rect x="1137.3" y="499.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1140.3" y="510.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.05%)</title><rect x="1138.4" y="499.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1141.4" y="510.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="1138.4" y="483.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.4" y="494.0"></text>
</g>
<g>
<title>__libc_send (4 samples, 0.20%)</title><rect x="1139.0" y="515.0" width="2.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1142.0" y="526.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.05%)</title><rect x="1141.3" y="515.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1144.3" y="526.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (1 samples, 0.05%)</title><rect x="1141.9" y="595.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1144.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$120/254200562.act (2 samples, 0.10%)</title><rect x="1142.5" y="611.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1145.5" y="622.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (63 samples, 3.09%)</title><rect x="1143.7" y="707.0" width="36.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1146.7" y="718.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 0.10%)</title><rect x="1143.7" y="691.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1146.7" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 0.10%)</title><rect x="1143.7" y="675.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1146.7" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2 samples, 0.10%)</title><rect x="1143.7" y="659.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1146.7" y="670.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (13 samples, 0.64%)</title><rect x="1144.8" y="691.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1147.8" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (2 samples, 0.10%)</title><rect x="1144.8" y="675.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1147.8" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2 samples, 0.10%)</title><rect x="1144.8" y="659.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1147.8" y="670.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (11 samples, 0.54%)</title><rect x="1146.0" y="675.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1149.0" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.05%)</title><rect x="1146.6" y="659.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1149.6" y="670.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.05%)</title><rect x="1147.1" y="659.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1150.1" y="670.0"></text>
</g>
<g>
<title>clock_gettime@plt (1 samples, 0.05%)</title><rect x="1147.7" y="659.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1150.7" y="670.0"></text>
</g>
<g>
<title>epoll_wait (7 samples, 0.34%)</title><rect x="1148.3" y="659.0" width="4.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1151.3" y="670.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (46 samples, 2.26%)</title><rect x="1152.3" y="691.0" width="26.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1155.3" y="702.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (46 samples, 2.26%)</title><rect x="1152.3" y="675.0" width="26.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1155.3" y="686.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (34 samples, 1.67%)</title><rect x="1152.3" y="659.0" width="19.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1155.3" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (20 samples, 0.98%)</title><rect x="1154.1" y="643.0" width="11.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1157.1" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (20 samples, 0.98%)</title><rect x="1154.1" y="627.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1157.1" y="638.0"></text>
</g>
<g>
<title>RequestHandler1_response.handleRequest (17 samples, 0.83%)</title><rect x="1154.1" y="611.0" width="9.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1157.1" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (2 samples, 0.10%)</title><rect x="1154.1" y="595.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1157.1" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.10%)</title><rect x="1154.1" y="579.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1157.1" y="590.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.05%)</title><rect x="1154.7" y="563.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1157.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (15 samples, 0.74%)</title><rect x="1155.2" y="595.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1158.2" y="606.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.05%)</title><rect x="1155.8" y="579.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1158.8" y="590.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.05%)</title><rect x="1155.8" y="563.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1158.8" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.05%)</title><rect x="1156.4" y="579.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1159.4" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.05%)</title><rect x="1156.4" y="563.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1159.4" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="1156.4" y="547.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.4" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="1156.4" y="531.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.4" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.10%)</title><rect x="1157.0" y="579.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1160.0" y="590.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.05%)</title><rect x="1157.6" y="563.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1160.6" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="1157.6" y="547.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1160.6" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="1157.6" y="531.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.6" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="1157.6" y="515.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.6" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="1157.6" y="499.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.6" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="1157.6" y="483.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.6" y="494.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.05%)</title><rect x="1157.6" y="467.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.6" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.replicasGet (10 samples, 0.49%)</title><rect x="1158.1" y="579.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1161.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.asyncExecute (10 samples, 0.49%)</title><rect x="1158.1" y="563.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1161.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (10 samples, 0.49%)</title><rect x="1158.1" y="547.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1161.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (10 samples, 0.49%)</title><rect x="1158.1" y="531.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1161.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (2 samples, 0.10%)</title><rect x="1158.1" y="515.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1161.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 0.39%)</title><rect x="1159.3" y="515.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1162.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.39%)</title><rect x="1159.3" y="499.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1162.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.39%)</title><rect x="1159.3" y="483.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1162.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.39%)</title><rect x="1159.3" y="467.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1162.3" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (8 samples, 0.39%)</title><rect x="1159.3" y="451.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1162.3" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.05%)</title><rect x="1159.3" y="435.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.3" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.10%)</title><rect x="1159.9" y="435.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1162.9" y="446.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.10%)</title><rect x="1159.9" y="419.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1162.9" y="430.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 0.20%)</title><rect x="1161.0" y="435.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1164.0" y="446.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.05%)</title><rect x="1163.4" y="435.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1166.4" y="446.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.10%)</title><rect x="1163.9" y="611.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1166.9" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.10%)</title><rect x="1163.9" y="595.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1166.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.10%)</title><rect x="1163.9" y="579.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1166.9" y="590.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.10%)</title><rect x="1163.9" y="563.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1166.9" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.10%)</title><rect x="1163.9" y="547.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1166.9" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.05%)</title><rect x="1165.1" y="611.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1168.1" y="622.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.05%)</title><rect x="1165.1" y="595.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1168.1" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="1165.1" y="579.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1168.1" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.05%)</title><rect x="1165.1" y="563.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1168.1" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 0.25%)</title><rect x="1165.7" y="643.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1168.7" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.10%)</title><rect x="1166.8" y="627.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1169.8" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.10%)</title><rect x="1166.8" y="611.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1169.8" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="1167.4" y="595.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.4" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1167.4" y="579.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.4" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1167.4" y="563.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.4" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.05%)</title><rect x="1167.4" y="547.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1170.4" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.05%)</title><rect x="1168.0" y="627.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1171.0" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="1168.0" y="611.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1171.0" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.29%)</title><rect x="1168.6" y="643.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1171.6" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.29%)</title><rect x="1168.6" y="627.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1171.6" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.10%)</title><rect x="1170.9" y="611.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1173.9" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.10%)</title><rect x="1170.9" y="595.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1173.9" y="606.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.10%)</title><rect x="1170.9" y="579.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1173.9" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.10%)</title><rect x="1170.9" y="563.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.9" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.10%)</title><rect x="1170.9" y="547.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.9" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.10%)</title><rect x="1170.9" y="531.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.9" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.10%)</title><rect x="1170.9" y="515.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.9" y="526.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.10%)</title><rect x="1170.9" y="499.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.9" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.10%)</title><rect x="1170.9" y="483.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.9" y="494.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.05%)</title><rect x="1170.9" y="467.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.9" y="478.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.05%)</title><rect x="1171.5" y="467.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.5" y="478.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.05%)</title><rect x="1171.5" y="451.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.5" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (12 samples, 0.59%)</title><rect x="1172.0" y="659.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1175.0" y="670.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (12 samples, 0.59%)</title><rect x="1172.0" y="643.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1175.0" y="654.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (8 samples, 0.39%)</title><rect x="1173.2" y="627.0" width="4.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1176.2" y="638.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="1173.8" y="611.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.8" y="622.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.29%)</title><rect x="1174.4" y="611.0" width="3.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1177.4" y="622.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="1175.5" y="595.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.5" y="606.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.15%)</title><rect x="1176.1" y="595.0" width="1.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1179.1" y="606.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.05%)</title><rect x="1177.3" y="579.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.3" y="590.0"></text>
</g>
<g>
<title>__recv (2 samples, 0.10%)</title><rect x="1177.8" y="627.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1180.8" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.10%)</title><rect x="1179.0" y="691.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.0" y="702.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="1179.6" y="675.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1182.6" y="686.0"></text>
</g>
<g>
<title>start_thread (17 samples, 0.83%)</title><rect x="1180.2" y="707.0" width="9.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1183.2" y="718.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (17 samples, 0.83%)</title><rect x="1180.2" y="691.0" width="9.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1183.2" y="702.0"></text>
</g>
<g>
<title>Thread::call_run() (17 samples, 0.83%)</title><rect x="1180.2" y="675.0" width="9.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.2" y="686.0"></text>
</g>
<g>
<title>GangWorker::loop() (16 samples, 0.79%)</title><rect x="1180.2" y="659.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.2" y="670.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 0.79%)</title><rect x="1180.2" y="643.0" width="9.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.2" y="654.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 0.54%)</title><rect x="1180.2" y="627.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.2" y="638.0"></text>
</g>
<g>
<title>SpinPause (11 samples, 0.54%)</title><rect x="1180.2" y="611.0" width="6.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1183.2" y="622.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.05%)</title><rect x="1186.5" y="627.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.5" y="638.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.05%)</title><rect x="1186.5" y="611.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.5" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.05%)</title><rect x="1186.5" y="595.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.5" y="606.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (1 samples, 0.05%)</title><rect x="1186.5" y="579.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.5" y="590.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.05%)</title><rect x="1186.5" y="563.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.5" y="574.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.05%)</title><rect x="1186.5" y="547.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.5" y="558.0"></text>
</g>
<g>
<title>void OopOopIterateBoundedDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate_bounded&lt;ObjArrayKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*, MemRegion) (1 samples, 0.05%)</title><rect x="1186.5" y="531.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.5" y="542.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (4 samples, 0.20%)</title><rect x="1187.1" y="627.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.1" y="638.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.05%)</title><rect x="1187.1" y="611.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.1" y="622.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.10%)</title><rect x="1187.7" y="611.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.7" y="622.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.10%)</title><rect x="1187.7" y="595.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.7" y="606.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.10%)</title><rect x="1187.7" y="579.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.7" y="590.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.10%)</title><rect x="1187.7" y="563.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.7" y="574.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 0.10%)</title><rect x="1187.7" y="547.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.7" y="558.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (2 samples, 0.10%)</title><rect x="1187.7" y="531.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.7" y="542.0"></text>
</g>
<g>
<title>oop_Relocation::oop_value() (2 samples, 0.10%)</title><rect x="1187.7" y="515.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.7" y="526.0"></text>
</g>
<g>
<title>Assembler::locate_operand(unsigned char*, Assembler::WhichOperand) (2 samples, 0.10%)</title><rect x="1187.7" y="499.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.7" y="510.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (1 samples, 0.05%)</title><rect x="1188.8" y="611.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.8" y="622.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.05%)</title><rect x="1189.4" y="659.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.4" y="670.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.05%)</title><rect x="1189.4" y="643.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.4" y="654.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.05%)</title><rect x="1189.4" y="627.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.4" y="638.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.05%)</title><rect x="1189.4" y="611.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.4" y="622.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.05%)</title><rect x="1189.4" y="595.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.4" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.05%)</title><rect x="1189.4" y="579.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.4" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(G1CollectionSet*, EvacuationInfo&amp;, unsigned long const*) (1 samples, 0.05%)</title><rect x="1189.4" y="563.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.4" y="574.0"></text>
</g>
<g>
<title>SurvRateGroup::all_surviving_words_recorded(G1Predictions const&amp;, bool) (1 samples, 0.05%)</title><rect x="1189.4" y="547.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.4" y="558.0"></text>
</g>
<g>
<title>TruncatedSeq::add(double) (1 samples, 0.05%)</title><rect x="1189.4" y="531.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.4" y="542.0"></text>
</g>
</g>
</svg>
