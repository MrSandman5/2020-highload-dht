<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="629"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="629"> </text>
<g id="frames">
<g>
<title>all (139 samples, 100.00%)</title><rect x="10.0" y="595.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="606.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (129 samples, 92.81%)</title><rect x="10.0" y="579.0" width="1095.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="590.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.72%)</title><rect x="10.0" y="563.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.72%)</title><rect x="18.5" y="563.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.5" y="574.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.72%)</title><rect x="18.5" y="547.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.5" y="558.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (11 samples, 7.91%)</title><rect x="27.0" y="563.0" width="93.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="30.0" y="574.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (11 samples, 7.91%)</title><rect x="27.0" y="547.0" width="93.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.0" y="558.0">one/nio/net..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (2 samples, 1.44%)</title><rect x="35.5" y="531.0" width="16.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="38.5" y="542.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 1.44%)</title><rect x="52.4" y="531.0" width="17.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="55.4" y="542.0"></text>
</g>
<g>
<title>epoll_wait (6 samples, 4.32%)</title><rect x="69.4" y="531.0" width="51.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="72.4" y="542.0">epoll..</text>
</g>
<g>
<title>one/nio/net/Session.process (116 samples, 83.45%)</title><rect x="120.4" y="563.0" width="984.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="123.4" y="574.0">one/nio/net/Session.process</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.72%)</title><rect x="120.4" y="547.0" width="8.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="123.4" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (115 samples, 82.73%)</title><rect x="128.8" y="547.0" width="976.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="131.8" y="558.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (97 samples, 69.78%)</title><rect x="128.8" y="531.0" width="823.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="131.8" y="542.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.72%)</title><rect x="128.8" y="515.0" width="8.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="131.8" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (85 samples, 61.15%)</title><rect x="137.3" y="515.0" width="721.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="140.3" y="526.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (84 samples, 60.43%)</title><rect x="145.8" y="499.0" width="713.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.8" y="510.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_response.handleRequest (84 samples, 60.43%)</title><rect x="145.8" y="483.0" width="713.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="148.8" y="494.0">RequestHandler1_response.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (10 samples, 7.19%)</title><rect x="145.8" y="467.0" width="84.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.8" y="478.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (8 samples, 5.76%)</title><rect x="162.8" y="451.0" width="67.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="165.8" y="462.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.72%)</title><rect x="162.8" y="435.0" width="8.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="165.8" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 5.04%)</title><rect x="171.3" y="435.0" width="59.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="174.3" y="446.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 5.04%)</title><rect x="171.3" y="419.0" width="59.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="174.3" y="430.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (7 samples, 5.04%)</title><rect x="171.3" y="403.0" width="59.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="174.3" y="414.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (6 samples, 4.32%)</title><rect x="179.8" y="387.0" width="50.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="182.8" y="398.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.72%)</title><rect x="179.8" y="371.0" width="8.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="182.8" y="382.0"></text>
</g>
<g>
<title>__libc_send (5 samples, 3.60%)</title><rect x="188.3" y="371.0" width="42.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="191.3" y="382.0">__li..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.72%)</title><rect x="230.7" y="467.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.7" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.72%)</title><rect x="230.7" y="451.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.7" y="462.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.72%)</title><rect x="230.7" y="435.0" width="8.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="233.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (73 samples, 52.52%)</title><rect x="239.2" y="467.0" width="619.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.2" y="478.0">ru/mail/polis/service/mrsandman5/ServiceImpl.response</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (56 samples, 40.29%)</title><rect x="239.2" y="451.0" width="475.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="242.2" y="462.0">ch/qos/logback/classic/Logger.debug</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (56 samples, 40.29%)</title><rect x="239.2" y="435.0" width="475.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.2" y="446.0">ch/qos/logback/classic/Logger.filterAndLog_1</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (55 samples, 39.57%)</title><rect x="247.7" y="419.0" width="466.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.7" y="430.0">ch/qos/logback/classic/Logger.buildLoggingEventAndAppend</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (53 samples, 38.13%)</title><rect x="256.2" y="403.0" width="449.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.2" y="414.0">ch/qos/logback/classic/Logger.callAppenders</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (52 samples, 37.41%)</title><rect x="256.2" y="387.0" width="441.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="259.2" y="398.0">ch/qos/logback/classic/Logger.appendLoopOnAppenders</text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (52 samples, 37.41%)</title><rect x="256.2" y="371.0" width="441.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="259.2" y="382.0">ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAp..</text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (52 samples, 37.41%)</title><rect x="256.2" y="355.0" width="441.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.2" y="366.0">ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (52 samples, 37.41%)</title><rect x="256.2" y="339.0" width="441.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="259.2" y="350.0">ch/qos/logback/core/OutputStreamAppender.append</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (52 samples, 37.41%)</title><rect x="256.2" y="323.0" width="441.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="259.2" y="334.0">ch/qos/logback/core/OutputStreamAppender.subAppend</text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.prepareForDeferredProcessing (14 samples, 10.07%)</title><rect x="256.2" y="307.0" width="118.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="259.2" y="318.0">ch/qos/logback..</text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.getFormattedMessage (12 samples, 8.63%)</title><rect x="256.2" y="291.0" width="101.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="259.2" y="302.0">ch/qos/logba..</text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (12 samples, 8.63%)</title><rect x="256.2" y="275.0" width="101.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="259.2" y="286.0">org/slf4j/he..</text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (12 samples, 8.63%)</title><rect x="256.2" y="259.0" width="101.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.2" y="270.0">org/slf4j/he..</text>
</g>
<g>
<title>java/lang/String.length (5 samples, 3.60%)</title><rect x="256.2" y="243.0" width="42.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="259.2" y="254.0">java..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 2.16%)</title><rect x="298.6" y="243.0" width="25.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="301.6" y="254.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.44%)</title><rect x="298.6" y="227.0" width="17.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.6" y="238.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.44%)</title><rect x="298.6" y="211.0" width="17.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.6" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.44%)</title><rect x="298.6" y="195.0" width="17.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.6" y="206.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.72%)</title><rect x="315.6" y="227.0" width="8.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="318.6" y="238.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.72%)</title><rect x="324.1" y="243.0" width="8.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="327.1" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.72%)</title><rect x="324.1" y="227.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.1" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (2 samples, 1.44%)</title><rect x="332.6" y="243.0" width="17.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="335.6" y="254.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.72%)</title><rect x="341.1" y="227.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="344.1" y="238.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.isEscapedDelimeter (1 samples, 0.72%)</title><rect x="349.6" y="243.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="352.6" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.72%)</title><rect x="349.6" y="227.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="352.6" y="238.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.getMDCPropertyMap (2 samples, 1.44%)</title><rect x="358.1" y="291.0" width="16.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="361.1" y="302.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.writeBytes (19 samples, 13.67%)</title><rect x="375.0" y="307.0" width="161.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="378.0" y="318.0">ch/qos/logback/core/O..</text>
</g>
<g>
<title>ch/qos/logback/core/joran/spi/ConsoleTarget$1.write (17 samples, 12.23%)</title><rect x="392.0" y="291.0" width="144.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="395.0" y="302.0">ch/qos/logback/cor..</text>
</g>
<g>
<title>java/io/FilterOutputStream.write (17 samples, 12.23%)</title><rect x="392.0" y="275.0" width="144.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="395.0" y="286.0">java/io/FilterOutp..</text>
</g>
<g>
<title>java/io/PrintStream.write (17 samples, 12.23%)</title><rect x="392.0" y="259.0" width="144.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="395.0" y="270.0">java/io/PrintStrea..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (17 samples, 12.23%)</title><rect x="392.0" y="243.0" width="144.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="395.0" y="254.0">java/io/BufferedOu..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (17 samples, 12.23%)</title><rect x="392.0" y="227.0" width="144.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="395.0" y="238.0">java/io/BufferedOu..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (17 samples, 12.23%)</title><rect x="392.0" y="211.0" width="144.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="395.0" y="222.0">java/io/FileOutput..</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (17 samples, 12.23%)</title><rect x="392.0" y="195.0" width="144.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="395.0" y="206.0">java/io/FileOutput..</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (17 samples, 12.23%)</title><rect x="392.0" y="179.0" width="144.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="395.0" y="190.0">Java_java_io_FileO..</text>
</g>
<g>
<title>jni_GetArrayLength (1 samples, 0.72%)</title><rect x="400.5" y="163.0" width="8.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="403.5" y="174.0"></text>
</g>
<g>
<title>writeBytes (15 samples, 10.79%)</title><rect x="409.0" y="163.0" width="127.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="412.0" y="174.0">writeBytes</text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.72%)</title><rect x="409.0" y="147.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="412.0" y="158.0"></text>
</g>
<g>
<title>__libc_write (5 samples, 3.60%)</title><rect x="417.5" y="147.0" width="42.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="420.5" y="158.0">__li..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.72%)</title><rect x="459.9" y="147.0" width="8.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="462.9" y="158.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.72%)</title><rect x="468.4" y="147.0" width="8.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="471.4" y="158.0"></text>
</g>
<g>
<title>jni_ExceptionOccurred (1 samples, 0.72%)</title><rect x="476.9" y="147.0" width="8.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="479.9" y="158.0"></text>
</g>
<g>
<title>jni_GetArrayLength (1 samples, 0.72%)</title><rect x="485.4" y="147.0" width="8.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="488.4" y="158.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.72%)</title><rect x="493.9" y="147.0" width="8.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="496.9" y="158.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.72%)</title><rect x="493.9" y="131.0" width="8.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="496.9" y="142.0"></text>
</g>
<g>
<title>jni_GetObjectField (4 samples, 2.88%)</title><rect x="502.4" y="147.0" width="33.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="505.4" y="158.0">jn..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.72%)</title><rect x="519.4" y="131.0" width="8.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="522.4" y="142.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.72%)</title><rect x="527.8" y="131.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="530.8" y="142.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (19 samples, 13.67%)</title><rect x="536.3" y="307.0" width="161.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="539.3" y="318.0">ch/qos/logback/core/e..</text>
</g>
<g>
<title>ch/qos/logback/classic/PatternLayout.doLayout (19 samples, 13.67%)</title><rect x="536.3" y="291.0" width="161.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="539.3" y="302.0">ch/qos/logback/classi..</text>
</g>
<g>
<title>ch/qos/logback/classic/PatternLayout.doLayout (19 samples, 13.67%)</title><rect x="536.3" y="275.0" width="161.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="539.3" y="286.0">ch/qos/logback/classi..</text>
</g>
<g>
<title>ch/qos/logback/core/pattern/PatternLayoutBase.writeLoopOnConverters (19 samples, 13.67%)</title><rect x="536.3" y="259.0" width="161.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="539.3" y="270.0">ch/qos/logback/core/p..</text>
</g>
<g>
<title>ch/qos/logback/core/pattern/Converter.write (3 samples, 2.16%)</title><rect x="536.3" y="243.0" width="25.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="539.3" y="254.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 2.16%)</title><rect x="536.3" y="227.0" width="25.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="539.3" y="238.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 2.16%)</title><rect x="536.3" y="211.0" width="25.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="539.3" y="222.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (3 samples, 2.16%)</title><rect x="536.3" y="195.0" width="25.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="539.3" y="206.0">j..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.72%)</title><rect x="553.3" y="179.0" width="8.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="556.3" y="190.0"></text>
</g>
<g>
<title>ch/qos/logback/core/pattern/FormattingConverter.write (14 samples, 10.07%)</title><rect x="561.8" y="243.0" width="118.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="564.8" y="254.0">ch/qos/logback..</text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/DateConverter.convert (5 samples, 3.60%)</title><rect x="561.8" y="227.0" width="42.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="564.8" y="238.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/DateConverter.convert (5 samples, 3.60%)</title><rect x="561.8" y="211.0" width="42.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="564.8" y="222.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/core/util/CachingDateFormatter.format (5 samples, 3.60%)</title><rect x="561.8" y="195.0" width="42.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="564.8" y="206.0">ch/q..</text>
</g>
<g>
<title>java/text/DateFormat.format (5 samples, 3.60%)</title><rect x="561.8" y="179.0" width="42.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="564.8" y="190.0">java..</text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (5 samples, 3.60%)</title><rect x="561.8" y="163.0" width="42.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="564.8" y="174.0">java..</text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (5 samples, 3.60%)</title><rect x="561.8" y="147.0" width="42.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="564.8" y="158.0">java..</text>
</g>
<g>
<title>java/text/SimpleDateFormat.subFormat (3 samples, 2.16%)</title><rect x="570.3" y="131.0" width="25.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="573.3" y="142.0">j..</text>
</g>
<g>
<title>java/text/SimpleDateFormat.zeroPaddingNumber (2 samples, 1.44%)</title><rect x="578.8" y="115.0" width="17.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="581.8" y="126.0"></text>
</g>
<g>
<title>java/text/DecimalFormat.format (2 samples, 1.44%)</title><rect x="578.8" y="99.0" width="17.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="581.8" y="110.0"></text>
</g>
<g>
<title>java/text/DecimalFormat.format (1 samples, 0.72%)</title><rect x="587.3" y="83.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="590.3" y="94.0"></text>
</g>
<g>
<title>java/text/DecimalFormat.subformat (1 samples, 0.72%)</title><rect x="587.3" y="67.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="590.3" y="78.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (1 samples, 0.72%)</title><rect x="587.3" y="51.0" width="8.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="590.3" y="62.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.72%)</title><rect x="587.3" y="35.0" width="8.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="590.3" y="46.0"></text>
</g>
<g>
<title>java/util/Calendar.setTime (1 samples, 0.72%)</title><rect x="595.8" y="131.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="598.8" y="142.0"></text>
</g>
<g>
<title>java/util/Calendar.setTimeInMillis (1 samples, 0.72%)</title><rect x="595.8" y="115.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="598.8" y="126.0"></text>
</g>
<g>
<title>java/util/GregorianCalendar.computeFields (1 samples, 0.72%)</title><rect x="595.8" y="99.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="598.8" y="110.0"></text>
</g>
<g>
<title>java/util/GregorianCalendar.computeFields (1 samples, 0.72%)</title><rect x="595.8" y="83.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="598.8" y="94.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/NamedConverter.convert (4 samples, 2.88%)</title><rect x="604.2" y="227.0" width="34.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="607.2" y="238.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/NamedConverter.convert (4 samples, 2.88%)</title><rect x="604.2" y="211.0" width="34.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="607.2" y="222.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/TargetLengthBasedClassNameAbbreviator.abbreviate (4 samples, 2.88%)</title><rect x="604.2" y="195.0" width="34.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="607.2" y="206.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/TargetLengthBasedClassNameAbbreviator.computeDotIndexes (1 samples, 0.72%)</title><rect x="604.2" y="179.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="607.2" y="190.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.72%)</title><rect x="604.2" y="163.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="607.2" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.72%)</title><rect x="604.2" y="147.0" width="8.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="607.2" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.72%)</title><rect x="612.7" y="179.0" width="8.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="615.7" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.72%)</title><rect x="612.7" y="163.0" width="8.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="615.7" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.72%)</title><rect x="612.7" y="147.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="615.7" y="158.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.72%)</title><rect x="612.7" y="131.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="615.7" y="142.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.72%)</title><rect x="612.7" y="115.0" width="8.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="615.7" y="126.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.72%)</title><rect x="612.7" y="99.0" width="8.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="615.7" y="110.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.44%)</title><rect x="621.2" y="179.0" width="17.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="624.2" y="190.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.44%)</title><rect x="621.2" y="163.0" width="17.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="624.2" y="174.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (2 samples, 1.44%)</title><rect x="621.2" y="147.0" width="17.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="624.2" y="158.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 3.60%)</title><rect x="638.2" y="227.0" width="42.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="641.2" y="238.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 3.60%)</title><rect x="638.2" y="211.0" width="42.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="641.2" y="222.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (5 samples, 3.60%)</title><rect x="638.2" y="195.0" width="42.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="641.2" y="206.0">java..</text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/LineSeparatorConverter.convert (1 samples, 0.72%)</title><rect x="663.7" y="179.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="666.7" y="190.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/NamedConverter.convert (1 samples, 0.72%)</title><rect x="672.2" y="179.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="675.2" y="190.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.72%)</title><rect x="680.6" y="243.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="683.6" y="254.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.72%)</title><rect x="689.1" y="243.0" width="8.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="692.1" y="254.0"></text>
</g>
<g>
<title>ch/qos/logback/core/pattern/Converter.write (1 samples, 0.72%)</title><rect x="689.1" y="227.0" width="8.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="692.1" y="238.0"></text>
</g>
<g>
<title>java/io/OutputStream.flush (1 samples, 0.72%)</title><rect x="697.6" y="387.0" width="8.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="700.6" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.&lt;init&gt; (1 samples, 0.72%)</title><rect x="706.1" y="403.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="709.1" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.put (17 samples, 12.23%)</title><rect x="714.6" y="451.0" width="144.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="717.6" y="462.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.72%)</title><rect x="714.6" y="435.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="717.6" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.72%)</title><rect x="714.6" y="419.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="717.6" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.72%)</title><rect x="714.6" y="403.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="717.6" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.72%)</title><rect x="714.6" y="387.0" width="8.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="717.6" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.72%)</title><rect x="714.6" y="371.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="717.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.72%)</title><rect x="714.6" y="355.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="717.6" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.72%)</title><rect x="714.6" y="339.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="717.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.upsert (16 samples, 11.51%)</title><rect x="723.1" y="435.0" width="135.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="726.1" y="446.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.upsert (16 samples, 11.51%)</title><rect x="723.1" y="419.0" width="135.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="726.1" y="430.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 2.16%)</title><rect x="723.1" y="403.0" width="25.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="726.1" y="414.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 2.16%)</title><rect x="723.1" y="387.0" width="25.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="726.1" y="398.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 2.16%)</title><rect x="723.1" y="371.0" width="25.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="726.1" y="382.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 2.16%)</title><rect x="723.1" y="355.0" width="25.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="726.1" y="366.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 1.44%)</title><rect x="723.1" y="339.0" width="17.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="726.1" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.72%)</title><rect x="731.6" y="323.0" width="8.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="734.6" y="334.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.72%)</title><rect x="731.6" y="307.0" width="8.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="734.6" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.72%)</title><rect x="740.1" y="339.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="743.1" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.72%)</title><rect x="740.1" y="323.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="743.1" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (13 samples, 9.35%)</title><rect x="748.6" y="403.0" width="110.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="751.6" y="414.0">java/util/Tre..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 2.88%)</title><rect x="782.5" y="387.0" width="34.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="785.5" y="398.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 2.88%)</title><rect x="782.5" y="371.0" width="34.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="785.5" y="382.0">ja..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 2.88%)</title><rect x="782.5" y="355.0" width="34.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="785.5" y="366.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.72%)</title><rect x="808.0" y="339.0" width="8.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="811.0" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.72%)</title><rect x="808.0" y="323.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="811.0" y="334.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.72%)</title><rect x="808.0" y="307.0" width="8.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="811.0" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (2 samples, 1.44%)</title><rect x="816.5" y="387.0" width="17.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="819.5" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (3 samples, 2.16%)</title><rect x="833.5" y="387.0" width="25.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="836.5" y="398.0">j..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 3.60%)</title><rect x="858.9" y="515.0" width="42.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="861.9" y="526.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1 samples, 0.72%)</title><rect x="858.9" y="499.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="861.9" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 2.88%)</title><rect x="867.4" y="499.0" width="34.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="870.4" y="510.0">on..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 2.88%)</title><rect x="867.4" y="483.0" width="34.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="870.4" y="494.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 1.44%)</title><rect x="901.4" y="515.0" width="16.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="904.4" y="526.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 1.44%)</title><rect x="901.4" y="499.0" width="16.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="904.4" y="510.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.72%)</title><rect x="909.9" y="483.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="912.9" y="494.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.72%)</title><rect x="909.9" y="467.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="912.9" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.72%)</title><rect x="918.3" y="515.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="921.3" y="526.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.72%)</title><rect x="918.3" y="499.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="921.3" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.72%)</title><rect x="918.3" y="483.0" width="8.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="921.3" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 2.16%)</title><rect x="926.8" y="515.0" width="25.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="929.8" y="526.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.read (18 samples, 12.95%)</title><rect x="952.3" y="531.0" width="152.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="955.3" y="542.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (17 samples, 12.23%)</title><rect x="960.8" y="515.0" width="144.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="963.8" y="526.0">one/nio/net/Native..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (7 samples, 5.04%)</title><rect x="960.8" y="499.0" width="59.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="963.8" y="510.0">Java_o..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.72%)</title><rect x="969.3" y="483.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="972.3" y="494.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.72%)</title><rect x="977.8" y="483.0" width="8.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="980.8" y="494.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 2.88%)</title><rect x="986.3" y="483.0" width="33.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="989.3" y="494.0">jn..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.72%)</title><rect x="1003.2" y="467.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1006.2" y="478.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.72%)</title><rect x="1011.7" y="467.0" width="8.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1014.7" y="478.0"></text>
</g>
<g>
<title>__recv (10 samples, 7.19%)</title><rect x="1020.2" y="499.0" width="84.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1023.2" y="510.0">__recv</text>
</g>
<g>
<title>start_thread (10 samples, 7.19%)</title><rect x="1105.1" y="579.0" width="84.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1108.1" y="590.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (10 samples, 7.19%)</title><rect x="1105.1" y="563.0" width="84.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1108.1" y="574.0">thread_nat..</text>
</g>
<g>
<title>Thread::call_run() (10 samples, 7.19%)</title><rect x="1105.1" y="547.0" width="84.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.1" y="558.0">Thread::ca..</text>
</g>
<g>
<title>GangWorker::loop() (4 samples, 2.88%)</title><rect x="1105.1" y="531.0" width="34.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.1" y="542.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (4 samples, 2.88%)</title><rect x="1105.1" y="515.0" width="34.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.1" y="526.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 2.88%)</title><rect x="1105.1" y="499.0" width="34.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.1" y="510.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.72%)</title><rect x="1105.1" y="483.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.1" y="494.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 2.16%)</title><rect x="1113.6" y="483.0" width="25.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1116.6" y="494.0">G..</text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;TypeArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.72%)</title><rect x="1130.6" y="467.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.6" y="478.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (6 samples, 4.32%)</title><rect x="1139.1" y="531.0" width="50.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1142.1" y="542.0">JavaT..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (6 samples, 4.32%)</title><rect x="1139.1" y="515.0" width="50.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.1" y="526.0">Compi..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (6 samples, 4.32%)</title><rect x="1139.1" y="499.0" width="50.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.1" y="510.0">Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (6 samples, 4.32%)</title><rect x="1139.1" y="483.0" width="50.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.1" y="494.0">C2Com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (6 samples, 4.32%)</title><rect x="1139.1" y="467.0" width="50.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.1" y="478.0">Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (3 samples, 2.16%)</title><rect x="1139.1" y="451.0" width="25.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.1" y="462.0">C..</text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (3 samples, 2.16%)</title><rect x="1139.1" y="435.0" width="25.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.1" y="446.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.72%)</title><rect x="1139.1" y="419.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.1" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.44%)</title><rect x="1147.6" y="419.0" width="16.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.6" y="430.0"></text>
</g>
<g>
<title>Compile::Optimize() (2 samples, 1.44%)</title><rect x="1164.5" y="451.0" width="17.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.5" y="462.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (1 samples, 0.72%)</title><rect x="1164.5" y="435.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.5" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.72%)</title><rect x="1164.5" y="419.0" width="8.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.5" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.72%)</title><rect x="1164.5" y="403.0" width="8.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.5" y="414.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.72%)</title><rect x="1173.0" y="435.0" width="8.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.0" y="446.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.72%)</title><rect x="1181.5" y="451.0" width="8.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.5" y="462.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.72%)</title><rect x="1181.5" y="435.0" width="8.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.5" y="446.0"></text>
</g>
</g>
</svg>
