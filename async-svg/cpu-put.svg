<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="725"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="725"> </text>
<g id="frames">
<g>
<title>all (116 samples, 100.00%)</title><rect x="10.0" y="691.0" width="1180.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="13.0" y="702.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (86 samples, 74.14%)</title><rect x="10.0" y="675.0" width="874.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="686.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (11 samples, 9.48%)</title><rect x="10.0" y="659.0" width="111.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="670.0">one/nio/net/N..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (11 samples, 9.48%)</title><rect x="10.0" y="643.0" width="111.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="654.0">one/nio/net/N..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.86%)</title><rect x="20.2" y="627.0" width="10.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="23.2" y="638.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.72%)</title><rect x="30.3" y="627.0" width="20.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="33.3" y="638.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.86%)</title><rect x="50.7" y="627.0" width="10.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="53.7" y="638.0"></text>
</g>
<g>
<title>epoll_wait (6 samples, 5.17%)</title><rect x="60.9" y="627.0" width="61.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="63.9" y="638.0">epoll_..</text>
</g>
<g>
<title>one/nio/net/Session.process (75 samples, 64.66%)</title><rect x="121.9" y="659.0" width="762.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="124.9" y="670.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (74 samples, 63.79%)</title><rect x="132.1" y="643.0" width="752.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="135.1" y="654.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (68 samples, 58.62%)</title><rect x="132.1" y="627.0" width="691.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="135.1" y="638.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (55 samples, 47.41%)</title><rect x="142.2" y="611.0" width="559.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="145.2" y="622.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (55 samples, 47.41%)</title><rect x="142.2" y="595.0" width="559.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="145.2" y="606.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_response.handleRequest (54 samples, 46.55%)</title><rect x="142.2" y="579.0" width="549.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="145.2" y="590.0">RequestHandler0_response.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (9 samples, 7.76%)</title><rect x="142.2" y="563.0" width="91.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="145.2" y="574.0">one/nio/htt..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.86%)</title><rect x="142.2" y="547.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="145.2" y="558.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.86%)</title><rect x="142.2" y="531.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="145.2" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.86%)</title><rect x="142.2" y="515.0" width="10.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="145.2" y="526.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.86%)</title><rect x="142.2" y="499.0" width="10.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="145.2" y="510.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.86%)</title><rect x="142.2" y="483.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="145.2" y="494.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.86%)</title><rect x="142.2" y="467.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="145.2" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (6 samples, 5.17%)</title><rect x="152.4" y="547.0" width="61.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="155.4" y="558.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 5.17%)</title><rect x="152.4" y="531.0" width="61.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="155.4" y="542.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 5.17%)</title><rect x="152.4" y="515.0" width="61.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="155.4" y="526.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (6 samples, 5.17%)</title><rect x="152.4" y="499.0" width="61.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="155.4" y="510.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (6 samples, 5.17%)</title><rect x="152.4" y="483.0" width="61.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="155.4" y="494.0">one/ni..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 1.72%)</title><rect x="152.4" y="467.0" width="20.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="155.4" y="478.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.86%)</title><rect x="162.6" y="451.0" width="10.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="165.6" y="462.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.86%)</title><rect x="162.6" y="435.0" width="10.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="165.6" y="446.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.86%)</title><rect x="162.6" y="419.0" width="10.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="165.6" y="430.0"></text>
</g>
<g>
<title>__libc_send (4 samples, 3.45%)</title><rect x="172.8" y="467.0" width="40.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="175.8" y="478.0">__l..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 1.72%)</title><rect x="213.4" y="547.0" width="20.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.4" y="558.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 1.72%)</title><rect x="213.4" y="531.0" width="20.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="216.4" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 1.72%)</title><rect x="213.4" y="515.0" width="20.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="216.4" y="526.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.86%)</title><rect x="223.6" y="499.0" width="10.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="226.6" y="510.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.86%)</title><rect x="223.6" y="483.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.6" y="494.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.86%)</title><rect x="223.6" y="467.0" width="10.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="226.6" y="478.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.86%)</title><rect x="223.6" y="451.0" width="10.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="226.6" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (45 samples, 38.79%)</title><rect x="233.8" y="563.0" width="457.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.8" y="574.0">ru/mail/polis/service/mrsandman5/ServiceImpl.response</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (32 samples, 27.59%)</title><rect x="233.8" y="547.0" width="325.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.8" y="558.0">ch/qos/logback/classic/Logger.debug</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (32 samples, 27.59%)</title><rect x="233.8" y="531.0" width="325.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.8" y="542.0">ch/qos/logback/classic/Logger.filterAndLog_1</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (32 samples, 27.59%)</title><rect x="233.8" y="515.0" width="325.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.8" y="526.0">ch/qos/logback/classic/Logger.buildLoggingEv..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (31 samples, 26.72%)</title><rect x="233.8" y="499.0" width="315.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.8" y="510.0">ch/qos/logback/classic/Logger.callAppenders</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (31 samples, 26.72%)</title><rect x="233.8" y="483.0" width="315.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.8" y="494.0">ch/qos/logback/classic/Logger.appendLoopOnA..</text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (31 samples, 26.72%)</title><rect x="233.8" y="467.0" width="315.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.8" y="478.0">ch/qos/logback/core/spi/AppenderAttachableI..</text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (31 samples, 26.72%)</title><rect x="233.8" y="451.0" width="315.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.8" y="462.0">ch/qos/logback/core/UnsynchronizedAppenderB..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (28 samples, 24.14%)</title><rect x="233.8" y="435.0" width="284.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.8" y="446.0">ch/qos/logback/core/OutputStreamAppend..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (28 samples, 24.14%)</title><rect x="233.8" y="419.0" width="284.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.8" y="430.0">ch/qos/logback/core/OutputStreamAppend..</text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.prepareForDeferredProcessing (2 samples, 1.72%)</title><rect x="233.8" y="403.0" width="20.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.8" y="414.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.getFormattedMessage (2 samples, 1.72%)</title><rect x="233.8" y="387.0" width="20.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="236.8" y="398.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (2 samples, 1.72%)</title><rect x="233.8" y="371.0" width="20.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.8" y="382.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (2 samples, 1.72%)</title><rect x="233.8" y="355.0" width="20.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="236.8" y="366.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.86%)</title><rect x="233.8" y="339.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.8" y="350.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.86%)</title><rect x="244.0" y="339.0" width="10.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.0" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.86%)</title><rect x="244.0" y="323.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.0" y="334.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.appendChars (1 samples, 0.86%)</title><rect x="244.0" y="307.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.0" y="318.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.writeBytes (14 samples, 12.07%)</title><rect x="254.1" y="403.0" width="142.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="257.1" y="414.0">ch/qos/logback/cor..</text>
</g>
<g>
<title>ch/qos/logback/core/joran/spi/ConsoleTarget$1.write (11 samples, 9.48%)</title><rect x="264.3" y="387.0" width="111.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.3" y="398.0">ch/qos/logbac..</text>
</g>
<g>
<title>java/io/FilterOutputStream.write (11 samples, 9.48%)</title><rect x="264.3" y="371.0" width="111.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="267.3" y="382.0">java/io/Filte..</text>
</g>
<g>
<title>java/io/PrintStream.write (11 samples, 9.48%)</title><rect x="264.3" y="355.0" width="111.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.3" y="366.0">java/io/Print..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (9 samples, 7.76%)</title><rect x="264.3" y="339.0" width="91.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="267.3" y="350.0">java/io/Buf..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (9 samples, 7.76%)</title><rect x="264.3" y="323.0" width="91.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="267.3" y="334.0">java/io/Buf..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (9 samples, 7.76%)</title><rect x="264.3" y="307.0" width="91.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="267.3" y="318.0">java/io/Fil..</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (9 samples, 7.76%)</title><rect x="264.3" y="291.0" width="91.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="267.3" y="302.0">java/io/Fil..</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (9 samples, 7.76%)</title><rect x="264.3" y="275.0" width="91.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="267.3" y="286.0">Java_java_i..</text>
</g>
<g>
<title>jni_GetObjectField (1 samples, 0.86%)</title><rect x="264.3" y="259.0" width="10.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="267.3" y="270.0"></text>
</g>
<g>
<title>writeBytes (8 samples, 6.90%)</title><rect x="274.5" y="259.0" width="81.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="277.5" y="270.0">writeBytes</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.86%)</title><rect x="274.5" y="243.0" width="10.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="277.5" y="254.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.86%)</title><rect x="284.7" y="243.0" width="10.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="287.7" y="254.0"></text>
</g>
<g>
<title>__libc_write (3 samples, 2.59%)</title><rect x="294.8" y="243.0" width="30.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="297.8" y="254.0">__..</text>
</g>
<g>
<title>jni_GetObjectField (3 samples, 2.59%)</title><rect x="325.3" y="243.0" width="30.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="328.3" y="254.0">jn..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;802934ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 802934ul&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.86%)</title><rect x="345.7" y="227.0" width="10.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="348.7" y="238.0"></text>
</g>
<g>
<title>java_lang_ref_Reference::is_referent_field(oopDesc*, long) (1 samples, 0.86%)</title><rect x="345.7" y="211.0" width="10.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="348.7" y="222.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (2 samples, 1.72%)</title><rect x="355.9" y="339.0" width="20.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="358.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 1.72%)</title><rect x="376.2" y="387.0" width="20.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="379.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.72%)</title><rect x="376.2" y="371.0" width="20.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="379.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 1.72%)</title><rect x="376.2" y="355.0" width="20.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="379.2" y="366.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.86%)</title><rect x="376.2" y="339.0" width="10.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="379.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.86%)</title><rect x="386.4" y="339.0" width="10.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="389.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.86%)</title><rect x="386.4" y="323.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="389.4" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.86%)</title><rect x="386.4" y="307.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="389.4" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.86%)</title><rect x="386.4" y="291.0" width="10.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="389.4" y="302.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (12 samples, 10.34%)</title><rect x="396.6" y="403.0" width="122.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="399.6" y="414.0">ch/qos/logback/..</text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (12 samples, 10.34%)</title><rect x="396.6" y="387.0" width="122.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="399.6" y="398.0">ch/qos/logback/..</text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (12 samples, 10.34%)</title><rect x="396.6" y="371.0" width="122.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="399.6" y="382.0">ch/qos/logback/..</text>
</g>
<g>
<title>ch/qos/logback/core/util/CachingDateFormatter.format (6 samples, 5.17%)</title><rect x="396.6" y="355.0" width="61.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="399.6" y="366.0">ch/qos..</text>
</g>
<g>
<title>java/text/DateFormat.format (5 samples, 4.31%)</title><rect x="406.7" y="339.0" width="50.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="409.7" y="350.0">java/..</text>
</g>
<g>
<title>java/lang/StringBuffer.toString (1 samples, 0.86%)</title><rect x="406.7" y="323.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="409.7" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.86%)</title><rect x="406.7" y="307.0" width="10.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="409.7" y="318.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (4 samples, 3.45%)</title><rect x="416.9" y="323.0" width="40.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.9" y="334.0">jav..</text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (4 samples, 3.45%)</title><rect x="416.9" y="307.0" width="40.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="419.9" y="318.0">jav..</text>
</g>
<g>
<title>java/text/SimpleDateFormat.subFormat (2 samples, 1.72%)</title><rect x="416.9" y="291.0" width="20.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="419.9" y="302.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.zeroPaddingNumber (1 samples, 0.86%)</title><rect x="427.1" y="275.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="430.1" y="286.0"></text>
</g>
<g>
<title>java/util/Calendar.setTime (2 samples, 1.72%)</title><rect x="437.2" y="291.0" width="20.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="440.2" y="302.0"></text>
</g>
<g>
<title>java/util/Calendar.setTimeInMillis (2 samples, 1.72%)</title><rect x="437.2" y="275.0" width="20.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="440.2" y="286.0"></text>
</g>
<g>
<title>java/util/GregorianCalendar.computeFields (2 samples, 1.72%)</title><rect x="437.2" y="259.0" width="20.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="440.2" y="270.0"></text>
</g>
<g>
<title>java/util/GregorianCalendar.computeFields (2 samples, 1.72%)</title><rect x="437.2" y="243.0" width="20.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="440.2" y="254.0"></text>
</g>
<g>
<title>java/util/Calendar.internalSet (1 samples, 0.86%)</title><rect x="447.4" y="227.0" width="10.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="450.4" y="238.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 4.31%)</title><rect x="457.6" y="355.0" width="50.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="460.6" y="366.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 4.31%)</title><rect x="457.6" y="339.0" width="50.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="460.6" y="350.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.86%)</title><rect x="457.6" y="323.0" width="10.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="460.6" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.86%)</title><rect x="457.6" y="307.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="460.6" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.86%)</title><rect x="457.6" y="291.0" width="10.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="460.6" y="302.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (2 samples, 1.72%)</title><rect x="467.8" y="323.0" width="20.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="470.8" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 1.72%)</title><rect x="467.8" y="307.0" width="20.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="470.8" y="318.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 1.72%)</title><rect x="488.1" y="323.0" width="20.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="491.1" y="334.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.86%)</title><rect x="508.4" y="355.0" width="10.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="511.4" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.86%)</title><rect x="508.4" y="339.0" width="10.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="511.4" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.86%)</title><rect x="508.4" y="323.0" width="10.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="511.4" y="334.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.86%)</title><rect x="508.4" y="307.0" width="10.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="511.4" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 2.59%)</title><rect x="518.6" y="435.0" width="30.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="521.6" y="446.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 2.59%)</title><rect x="518.6" y="419.0" width="30.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="521.6" y="430.0">ja..</text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 2.59%)</title><rect x="518.6" y="403.0" width="30.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="521.6" y="414.0">ja..</text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.&lt;init&gt; (1 samples, 0.86%)</title><rect x="549.1" y="499.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="552.1" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (1 samples, 0.86%)</title><rect x="549.1" y="483.0" width="10.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="552.1" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.86%)</title><rect x="559.3" y="547.0" width="10.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="562.3" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.86%)</title><rect x="559.3" y="531.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="562.3" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.put (1 samples, 0.86%)</title><rect x="559.3" y="515.0" width="10.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="562.3" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.put (12 samples, 10.34%)</title><rect x="569.5" y="547.0" width="122.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="572.5" y="558.0">ru/mail/polis/s..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.86%)</title><rect x="569.5" y="531.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="572.5" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.86%)</title><rect x="569.5" y="515.0" width="10.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="572.5" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.86%)</title><rect x="569.5" y="499.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="572.5" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.86%)</title><rect x="569.5" y="483.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="572.5" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.86%)</title><rect x="569.5" y="467.0" width="10.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="572.5" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.86%)</title><rect x="569.5" y="451.0" width="10.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="572.5" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.86%)</title><rect x="569.5" y="435.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="572.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.upsert (11 samples, 9.48%)</title><rect x="579.7" y="531.0" width="111.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="582.7" y="542.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.upsert (11 samples, 9.48%)</title><rect x="579.7" y="515.0" width="111.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="582.7" y="526.0">ru/mail/polis..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 2.59%)</title><rect x="579.7" y="499.0" width="30.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="582.7" y="510.0">ja..</text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.86%)</title><rect x="579.7" y="483.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="582.7" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 1.72%)</title><rect x="589.8" y="483.0" width="20.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="592.8" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 1.72%)</title><rect x="589.8" y="467.0" width="20.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="592.8" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 1.72%)</title><rect x="589.8" y="451.0" width="20.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="592.8" y="462.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.86%)</title><rect x="589.8" y="435.0" width="10.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="592.8" y="446.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.86%)</title><rect x="600.0" y="435.0" width="10.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="603.0" y="446.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.86%)</title><rect x="600.0" y="419.0" width="10.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="603.0" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (8 samples, 6.90%)</title><rect x="610.2" y="499.0" width="81.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="613.2" y="510.0">java/util..</text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 1.72%)</title><rect x="610.2" y="483.0" width="20.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="613.2" y="494.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 1.72%)</title><rect x="610.2" y="467.0" width="20.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="613.2" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (2 samples, 1.72%)</title><rect x="610.2" y="451.0" width="20.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="613.2" y="462.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 1.72%)</title><rect x="610.2" y="435.0" width="20.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="613.2" y="446.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.86%)</title><rect x="620.3" y="419.0" width="10.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="623.3" y="430.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.86%)</title><rect x="620.3" y="403.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="623.3" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 2.59%)</title><rect x="630.5" y="483.0" width="30.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="633.5" y="494.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 1.72%)</title><rect x="640.7" y="467.0" width="20.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="643.7" y="478.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 1.72%)</title><rect x="640.7" y="451.0" width="20.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="643.7" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.86%)</title><rect x="650.9" y="435.0" width="10.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="653.9" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.86%)</title><rect x="650.9" y="419.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="653.9" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (3 samples, 2.59%)</title><rect x="661.0" y="483.0" width="30.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="664.0" y="494.0">ja..</text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (2 samples, 1.72%)</title><rect x="671.2" y="467.0" width="20.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="674.2" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.86%)</title><rect x="691.6" y="579.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="694.6" y="590.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.86%)</title><rect x="691.6" y="563.0" width="10.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="694.6" y="574.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.86%)</title><rect x="691.6" y="547.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="694.6" y="558.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.86%)</title><rect x="691.6" y="531.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="694.6" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.86%)</title><rect x="691.6" y="515.0" width="10.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="694.6" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 6.03%)</title><rect x="701.7" y="611.0" width="71.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="704.7" y="622.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 3.45%)</title><rect x="701.7" y="595.0" width="40.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="704.7" y="606.0">one..</text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.86%)</title><rect x="732.2" y="579.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="735.2" y="590.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.86%)</title><rect x="732.2" y="563.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="735.2" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 2.59%)</title><rect x="742.4" y="595.0" width="30.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="745.4" y="606.0">on..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 2.59%)</title><rect x="742.4" y="579.0" width="30.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="745.4" y="590.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 4.31%)</title><rect x="772.9" y="611.0" width="50.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="775.9" y="622.0">one/n..</text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 3.45%)</title><rect x="772.9" y="595.0" width="40.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="775.9" y="606.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 2.59%)</title><rect x="783.1" y="579.0" width="30.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="786.1" y="590.0">ja..</text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 1.72%)</title><rect x="793.3" y="563.0" width="20.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="796.3" y="574.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 1.72%)</title><rect x="793.3" y="547.0" width="20.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="796.3" y="558.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 1.72%)</title><rect x="793.3" y="531.0" width="20.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="796.3" y="542.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.86%)</title><rect x="803.4" y="515.0" width="10.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="806.4" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.86%)</title><rect x="813.6" y="595.0" width="10.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="816.6" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (6 samples, 5.17%)</title><rect x="823.8" y="627.0" width="61.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="826.8" y="638.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (6 samples, 5.17%)</title><rect x="823.8" y="611.0" width="61.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="826.8" y="622.0">one/ni..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (3 samples, 2.59%)</title><rect x="823.8" y="595.0" width="30.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="826.8" y="606.0">Ja..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.86%)</title><rect x="823.8" y="579.0" width="10.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="826.8" y="590.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.86%)</title><rect x="834.0" y="579.0" width="10.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="837.0" y="590.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.86%)</title><rect x="844.1" y="579.0" width="10.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="847.1" y="590.0"></text>
</g>
<g>
<title>__recv (3 samples, 2.59%)</title><rect x="854.3" y="595.0" width="30.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="857.3" y="606.0">__..</text>
</g>
<g>
<title>start_thread (30 samples, 25.86%)</title><rect x="884.8" y="675.0" width="305.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="887.8" y="686.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (30 samples, 25.86%)</title><rect x="884.8" y="659.0" width="305.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="887.8" y="670.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (30 samples, 25.86%)</title><rect x="884.8" y="643.0" width="305.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="887.8" y="654.0">Thread::call_run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (30 samples, 25.86%)</title><rect x="884.8" y="627.0" width="305.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="887.8" y="638.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (30 samples, 25.86%)</title><rect x="884.8" y="611.0" width="305.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="887.8" y="622.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (30 samples, 25.86%)</title><rect x="884.8" y="595.0" width="305.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="887.8" y="606.0">CompileBroker::invoke_compiler_on_method(..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (30 samples, 25.86%)</title><rect x="884.8" y="579.0" width="305.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="887.8" y="590.0">C2Compiler::compile_method(ciEnv*, ciMeth..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (30 samples, 25.86%)</title><rect x="884.8" y="563.0" width="305.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="887.8" y="574.0">Compile::Compile(ciEnv*, C2Compiler*, ciM..</text>
</g>
<g>
<title>Compile::Code_Gen() (17 samples, 14.66%)</title><rect x="884.8" y="547.0" width="173.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="887.8" y="558.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.72%)</title><rect x="884.8" y="531.0" width="20.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="887.8" y="542.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.72%)</title><rect x="884.8" y="515.0" width="20.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="887.8" y="526.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.72%)</title><rect x="884.8" y="499.0" width="20.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="887.8" y="510.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (2 samples, 1.72%)</title><rect x="884.8" y="483.0" width="20.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="887.8" y="494.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (2 samples, 1.72%)</title><rect x="884.8" y="467.0" width="20.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="887.8" y="478.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.86%)</title><rect x="895.0" y="451.0" width="10.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="898.0" y="462.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.86%)</title><rect x="895.0" y="435.0" width="10.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="898.0" y="446.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.86%)</title><rect x="895.0" y="419.0" width="10.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="898.0" y="430.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.86%)</title><rect x="895.0" y="403.0" width="10.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="898.0" y="414.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.72%)</title><rect x="905.2" y="531.0" width="20.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="908.2" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.72%)</title><rect x="905.2" y="515.0" width="20.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="908.2" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.86%)</title><rect x="905.2" y="499.0" width="10.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="908.2" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.86%)</title><rect x="905.2" y="483.0" width="10.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="908.2" y="494.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.86%)</title><rect x="915.3" y="499.0" width="10.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="918.3" y="510.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.86%)</title><rect x="915.3" y="483.0" width="10.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="918.3" y="494.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.86%)</title><rect x="915.3" y="467.0" width="10.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="918.3" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (13 samples, 11.21%)</title><rect x="925.5" y="531.0" width="132.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="928.5" y="542.0">PhaseChaitin::Re..</text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.72%)</title><rect x="925.5" y="515.0" width="20.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="928.5" y="526.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.86%)</title><rect x="935.7" y="499.0" width="10.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="938.7" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.72%)</title><rect x="945.9" y="515.0" width="20.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="948.9" y="526.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.86%)</title><rect x="956.0" y="499.0" width="10.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="959.0" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.86%)</title><rect x="966.2" y="515.0" width="10.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="969.2" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.86%)</title><rect x="976.4" y="515.0" width="10.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.4" y="526.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.86%)</title><rect x="976.4" y="499.0" width="10.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.4" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::compact() (1 samples, 0.86%)</title><rect x="986.6" y="515.0" width="10.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="989.6" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.86%)</title><rect x="996.7" y="515.0" width="10.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="999.7" y="526.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.86%)</title><rect x="996.7" y="499.0" width="10.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="999.7" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.86%)</title><rect x="1006.9" y="515.0" width="10.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1009.9" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.86%)</title><rect x="1017.1" y="515.0" width="10.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1020.1" y="526.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.86%)</title><rect x="1027.2" y="515.0" width="10.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1030.2" y="526.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.86%)</title><rect x="1027.2" y="499.0" width="10.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1030.2" y="510.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.86%)</title><rect x="1037.4" y="515.0" width="10.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1040.4" y="526.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.86%)</title><rect x="1037.4" y="499.0" width="10.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1040.4" y="510.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.86%)</title><rect x="1037.4" y="483.0" width="10.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1040.4" y="494.0"></text>
</g>
<g>
<title>loadPNode::ideal_Opcode() const (1 samples, 0.86%)</title><rect x="1047.6" y="515.0" width="10.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1050.6" y="526.0"></text>
</g>
<g>
<title>Compile::Optimize() (9 samples, 7.76%)</title><rect x="1057.8" y="547.0" width="91.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1060.8" y="558.0">Compile::Op..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (1 samples, 0.86%)</title><rect x="1057.8" y="531.0" width="10.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1060.8" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.86%)</title><rect x="1057.8" y="515.0" width="10.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1060.8" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.86%)</title><rect x="1057.8" y="499.0" width="10.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1060.8" y="510.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.86%)</title><rect x="1067.9" y="531.0" width="10.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1070.9" y="542.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.86%)</title><rect x="1067.9" y="515.0" width="10.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.9" y="526.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.86%)</title><rect x="1067.9" y="499.0" width="10.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1070.9" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (3 samples, 2.59%)</title><rect x="1078.1" y="531.0" width="30.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1081.1" y="542.0">Ph..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.86%)</title><rect x="1078.1" y="515.0" width="10.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.1" y="526.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.86%)</title><rect x="1088.3" y="515.0" width="10.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1091.3" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.86%)</title><rect x="1098.4" y="515.0" width="10.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1101.4" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.86%)</title><rect x="1098.4" y="499.0" width="10.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.4" y="510.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseGVN*) (1 samples, 0.86%)</title><rect x="1098.4" y="483.0" width="10.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1101.4" y="494.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.86%)</title><rect x="1098.4" y="467.0" width="10.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1101.4" y="478.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.86%)</title><rect x="1098.4" y="451.0" width="10.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.4" y="462.0"></text>
</g>
<g>
<title>TypeInt::eq(Type const*) const (1 samples, 0.86%)</title><rect x="1098.4" y="435.0" width="10.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.4" y="446.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (2 samples, 1.72%)</title><rect x="1108.6" y="531.0" width="20.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.6" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (2 samples, 1.72%)</title><rect x="1108.6" y="515.0" width="20.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.6" y="526.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 1.72%)</title><rect x="1129.0" y="531.0" width="20.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.0" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.72%)</title><rect x="1129.0" y="515.0" width="20.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.0" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.72%)</title><rect x="1129.0" y="499.0" width="20.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.0" y="510.0"></text>
</g>
<g>
<title>LoadLNode::Opcode() const (1 samples, 0.86%)</title><rect x="1129.0" y="483.0" width="10.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.0" y="494.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.86%)</title><rect x="1139.1" y="483.0" width="10.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.1" y="494.0"></text>
</g>
<g>
<title>Compile::start() const (1 samples, 0.86%)</title><rect x="1139.1" y="467.0" width="10.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.1" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 3.45%)</title><rect x="1149.3" y="547.0" width="40.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.3" y="558.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 3.45%)</title><rect x="1149.3" y="531.0" width="40.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.3" y="542.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 3.45%)</title><rect x="1149.3" y="515.0" width="40.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.3" y="526.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 3.45%)</title><rect x="1149.3" y="499.0" width="40.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.3" y="510.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 3.45%)</title><rect x="1149.3" y="483.0" width="40.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.3" y="494.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 3.45%)</title><rect x="1149.3" y="467.0" width="40.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.3" y="478.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.72%)</title><rect x="1149.3" y="451.0" width="20.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.72%)</title><rect x="1149.3" y="435.0" width="20.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.72%)</title><rect x="1149.3" y="419.0" width="20.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.72%)</title><rect x="1149.3" y="403.0" width="20.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.72%)</title><rect x="1149.3" y="387.0" width="20.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.86%)</title><rect x="1149.3" y="371.0" width="10.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.86%)</title><rect x="1149.3" y="355.0" width="10.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.3" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.86%)</title><rect x="1149.3" y="339.0" width="10.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.86%)</title><rect x="1149.3" y="323.0" width="10.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.86%)</title><rect x="1149.3" y="307.0" width="10.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.86%)</title><rect x="1149.3" y="291.0" width="10.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.86%)</title><rect x="1149.3" y="275.0" width="10.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.86%)</title><rect x="1149.3" y="259.0" width="10.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.3" y="270.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.86%)</title><rect x="1149.3" y="243.0" width="10.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.3" y="254.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.86%)</title><rect x="1149.3" y="227.0" width="10.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.3" y="238.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.86%)</title><rect x="1149.3" y="211.0" width="10.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.3" y="222.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.86%)</title><rect x="1149.3" y="195.0" width="10.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.3" y="206.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool) (1 samples, 0.86%)</title><rect x="1149.3" y="179.0" width="10.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.3" y="190.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.86%)</title><rect x="1149.3" y="163.0" width="10.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.3" y="174.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.86%)</title><rect x="1149.3" y="147.0" width="10.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.3" y="158.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.86%)</title><rect x="1149.3" y="131.0" width="10.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.3" y="142.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.86%)</title><rect x="1149.3" y="115.0" width="10.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.3" y="126.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.86%)</title><rect x="1149.3" y="99.0" width="10.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.3" y="110.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.86%)</title><rect x="1149.3" y="83.0" width="10.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.3" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.86%)</title><rect x="1149.3" y="67.0" width="10.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.3" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.86%)</title><rect x="1149.3" y="51.0" width="10.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.3" y="62.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.86%)</title><rect x="1149.3" y="35.0" width="10.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.86%)</title><rect x="1159.5" y="371.0" width="10.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.5" y="382.0"></text>
</g>
<g>
<title>Parse::branch_prediction(float&amp;, BoolTest::mask, int, Node*) (1 samples, 0.86%)</title><rect x="1159.5" y="355.0" width="10.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.5" y="366.0"></text>
</g>
<g>
<title>Parse::dynamic_branch_prediction(float&amp;, BoolTest::mask, Node*) (1 samples, 0.86%)</title><rect x="1159.5" y="339.0" width="10.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.5" y="350.0"></text>
</g>
<g>
<title>CounterData::cell_count() const (1 samples, 0.86%)</title><rect x="1159.5" y="323.0" width="10.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.5" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.72%)</title><rect x="1169.7" y="451.0" width="20.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.72%)</title><rect x="1169.7" y="435.0" width="20.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.72%)</title><rect x="1169.7" y="419.0" width="20.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.72%)</title><rect x="1169.7" y="403.0" width="20.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.72%)</title><rect x="1169.7" y="387.0" width="20.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.72%)</title><rect x="1169.7" y="371.0" width="20.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.72%)</title><rect x="1169.7" y="355.0" width="20.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.86%)</title><rect x="1169.7" y="339.0" width="10.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.7" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.86%)</title><rect x="1169.7" y="323.0" width="10.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.86%)</title><rect x="1169.7" y="307.0" width="10.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.86%)</title><rect x="1169.7" y="291.0" width="10.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.86%)</title><rect x="1169.7" y="275.0" width="10.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.86%)</title><rect x="1169.7" y="259.0" width="10.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.7" y="270.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.86%)</title><rect x="1169.7" y="243.0" width="10.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.7" y="254.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.86%)</title><rect x="1169.7" y="227.0" width="10.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.7" y="238.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.86%)</title><rect x="1169.7" y="211.0" width="10.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.7" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.86%)</title><rect x="1169.7" y="195.0" width="10.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.7" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.86%)</title><rect x="1169.7" y="179.0" width="10.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.7" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.86%)</title><rect x="1169.7" y="163.0" width="10.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.7" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.86%)</title><rect x="1169.7" y="147.0" width="10.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.7" y="158.0"></text>
</g>
<g>
<title>ciType::make(BasicType) (1 samples, 0.86%)</title><rect x="1169.7" y="131.0" width="10.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.7" y="142.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.86%)</title><rect x="1179.8" y="339.0" width="10.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.8" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.86%)</title><rect x="1179.8" y="323.0" width="10.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.8" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.86%)</title><rect x="1179.8" y="307.0" width="10.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.8" y="318.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle const&amp;, int) (1 samples, 0.86%)</title><rect x="1179.8" y="291.0" width="10.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="302.0"></text>
</g>
</g>
</svg>
