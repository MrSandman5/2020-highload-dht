<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="565"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="565"> </text>
<g id="frames">
<g>
<title>all (873 samples, 100.00%)</title><rect x="10.0" y="531.0" width="1180.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="13.0" y="542.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.11%)</title><rect x="10.0" y="515.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.11%)</title><rect x="10.0" y="499.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.11%)</title><rect x="10.0" y="483.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.11%)</title><rect x="10.0" y="467.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.11%)</title><rect x="10.0" y="451.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>[no_Java_frame] (2 samples, 0.23%)</title><rect x="11.4" y="515.0" width="2.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="14.4" y="526.0"></text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.46%)</title><rect x="14.1" y="515.0" width="5.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="17.1" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.34%)</title><rect x="14.1" y="499.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="17.1" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.34%)</title><rect x="14.1" y="483.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="17.1" y="494.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.34%)</title><rect x="14.1" y="467.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="17.1" y="478.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.34%)</title><rect x="14.1" y="451.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="17.1" y="462.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.23%)</title><rect x="14.1" y="435.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="17.1" y="446.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.23%)</title><rect x="14.1" y="419.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="17.1" y="430.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.11%)</title><rect x="16.8" y="435.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="19.8" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="18.1" y="499.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="21.1" y="510.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (1 samples, 0.11%)</title><rect x="18.1" y="483.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="21.1" y="494.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.11%)</title><rect x="19.5" y="515.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="22.5" y="526.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.11%)</title><rect x="19.5" y="499.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="22.5" y="510.0"></text>
</g>
<g>
<title>java/lang/Thread.run (502 samples, 57.50%)</title><rect x="20.8" y="515.0" width="678.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.8" y="526.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (502 samples, 57.50%)</title><rect x="20.8" y="499.0" width="678.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.8" y="510.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (502 samples, 57.50%)</title><rect x="20.8" y="483.0" width="678.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.8" y="494.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1 samples, 0.11%)</title><rect x="26.2" y="467.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.11%)</title><rect x="27.6" y="467.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.11%)</title><rect x="27.6" y="451.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.11%)</title><rect x="27.6" y="435.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.11%)</title><rect x="27.6" y="419.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (143 samples, 16.38%)</title><rect x="28.9" y="467.0" width="193.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.9" y="478.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (143 samples, 16.38%)</title><rect x="28.9" y="451.0" width="193.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.9" y="462.0">java/util/concurrent/Arra..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (129 samples, 14.78%)</title><rect x="31.6" y="435.0" width="174.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="34.6" y="446.0">java/util/concurrent/l..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (2 samples, 0.23%)</title><rect x="43.8" y="419.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.8" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.23%)</title><rect x="43.8" y="403.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.11%)</title><rect x="45.1" y="387.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="48.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (7 samples, 0.80%)</title><rect x="46.5" y="419.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="49.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.11%)</title><rect x="47.8" y="403.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.11%)</title><rect x="47.8" y="387.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="50.8" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.11%)</title><rect x="47.8" y="371.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.8" y="382.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.11%)</title><rect x="47.8" y="355.0" width="1.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="50.8" y="366.0"></text>
</g>
<g>
<title>pthread_mutex_trylock@plt (1 samples, 0.11%)</title><rect x="47.8" y="339.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="50.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (3 samples, 0.34%)</title><rect x="49.2" y="403.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="52.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.23%)</title><rect x="53.3" y="403.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="56.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.23%)</title><rect x="53.3" y="387.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.23%)</title><rect x="53.3" y="371.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="56.3" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.23%)</title><rect x="53.3" y="355.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="56.3" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.23%)</title><rect x="53.3" y="339.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="56.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.80%)</title><rect x="56.0" y="419.0" width="9.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="59.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.80%)</title><rect x="56.0" y="403.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.23%)</title><rect x="62.7" y="387.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.23%)</title><rect x="62.7" y="371.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.7" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.23%)</title><rect x="62.7" y="355.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="65.7" y="366.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.23%)</title><rect x="62.7" y="339.0" width="2.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="65.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (104 samples, 11.91%)</title><rect x="65.4" y="419.0" width="140.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="68.4" y="430.0">java/util/concurre..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (101 samples, 11.57%)</title><rect x="69.5" y="403.0" width="136.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="72.5" y="414.0">jdk/internal/misc..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="70.8" y="387.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="73.8" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.11%)</title><rect x="72.2" y="387.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="75.2" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park (67 samples, 7.67%)</title><rect x="73.5" y="387.0" width="90.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="76.5" y="398.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.11%)</title><rect x="81.6" y="371.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="84.6" y="382.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="83.0" y="371.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="86.0" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (25 samples, 2.86%)</title><rect x="84.3" y="371.0" width="33.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="87.3" y="382.0">Pa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (7 samples, 0.80%)</title><rect x="96.5" y="355.0" width="9.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="99.5" y="366.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.23%)</title><rect x="103.3" y="339.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="106.3" y="350.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.34%)</title><rect x="106.0" y="355.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="109.0" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.46%)</title><rect x="110.0" y="355.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="113.0" y="366.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.23%)</title><rect x="115.4" y="355.0" width="2.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="118.4" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.46%)</title><rect x="118.1" y="371.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="121.1" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.11%)</title><rect x="123.5" y="371.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="126.5" y="382.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.11%)</title><rect x="124.9" y="371.0" width="1.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="127.9" y="382.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.23%)</title><rect x="126.2" y="371.0" width="2.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="129.2" y="382.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (17 samples, 1.95%)</title><rect x="128.9" y="371.0" width="23.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="131.9" y="382.0">_..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="151.9" y="371.0" width="1.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="154.9" y="382.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.11%)</title><rect x="153.3" y="371.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="156.3" y="382.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.34%)</title><rect x="154.6" y="371.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="157.6" y="382.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.11%)</title><rect x="158.7" y="371.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="161.7" y="382.0"></text>
</g>
<g>
<title>pthread_mutex_trylock@plt (1 samples, 0.11%)</title><rect x="160.0" y="371.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="163.0" y="382.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (2 samples, 0.23%)</title><rect x="161.4" y="371.0" width="2.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="164.4" y="382.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 3.44%)</title><rect x="164.1" y="387.0" width="40.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="167.1" y="398.0">[un..</text>
</g>
<g>
<title>__condvar_confirm_wakeup (1 samples, 0.11%)</title><rect x="164.1" y="371.0" width="1.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="167.1" y="382.0"></text>
</g>
<g>
<title>__condvar_dec_grefs (2 samples, 0.23%)</title><rect x="165.4" y="371.0" width="2.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="168.4" y="382.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.11%)</title><rect x="168.1" y="371.0" width="1.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="171.1" y="382.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (26 samples, 2.98%)</title><rect x="169.5" y="371.0" width="35.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="172.5" y="382.0">pth..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.11%)</title><rect x="204.6" y="387.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="207.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.11%)</title><rect x="206.0" y="435.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="209.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.11%)</title><rect x="206.0" y="419.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="209.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.11%)</title><rect x="206.0" y="403.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="209.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (1 samples, 0.11%)</title><rect x="206.0" y="387.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="209.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 1.26%)</title><rect x="207.3" y="435.0" width="14.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 1.26%)</title><rect x="207.3" y="419.0" width="14.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="210.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 1.26%)</title><rect x="207.3" y="403.0" width="14.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 1.26%)</title><rect x="207.3" y="387.0" width="14.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="210.3" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.80%)</title><rect x="212.7" y="371.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="215.7" y="382.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.11%)</title><rect x="212.7" y="355.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="215.7" y="366.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.34%)</title><rect x="214.1" y="355.0" width="4.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="217.1" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.11%)</title><rect x="215.5" y="339.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="218.5" y="350.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.11%)</title><rect x="216.8" y="339.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="219.8" y="350.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.34%)</title><rect x="218.2" y="355.0" width="4.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="221.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$76/103907069.run (353 samples, 40.44%)</title><rect x="222.2" y="467.0" width="477.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.2" y="478.0">ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$76/103907069...</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$asyncExecute$12 (353 samples, 40.44%)</title><rect x="222.2" y="451.0" width="477.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="225.2" y="462.0">ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$asyncExecute$12</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="224.9" y="435.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="227.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$71/2078767474.act (230 samples, 26.35%)</title><rect x="226.3" y="435.0" width="310.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.3" y="446.0">ru/mail/polis/service/mrsandman5/ServiceIm..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replicasPut$7 (230 samples, 26.35%)</title><rect x="226.3" y="419.0" width="310.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="229.3" y="430.0">ru/mail/polis/service/mrsandman5/ServiceIm..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.11%)</title><rect x="226.3" y="403.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.3" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.11%)</title><rect x="226.3" y="387.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$81/1882180511.get$Lambda (1 samples, 0.11%)</title><rect x="226.3" y="371.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.3" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.11%)</title><rect x="226.3" y="355.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="229.3" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.46%)</title><rect x="227.6" y="403.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.6" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.23%)</title><rect x="230.3" y="387.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="233.3" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.23%)</title><rect x="230.3" y="371.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.3" y="382.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.23%)</title><rect x="230.3" y="355.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.3" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.23%)</title><rect x="230.3" y="339.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.3" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (2 samples, 0.23%)</title><rect x="230.3" y="323.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="233.3" y="334.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.11%)</title><rect x="231.7" y="307.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="234.7" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.11%)</title><rect x="231.7" y="291.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.7" y="302.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$91/1488832228.accept (1 samples, 0.11%)</title><rect x="231.7" y="275.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="234.7" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.11%)</title><rect x="231.7" y="259.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.7" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.11%)</title><rect x="231.7" y="243.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="234.7" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.11%)</title><rect x="231.7" y="227.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.7" y="238.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.11%)</title><rect x="231.7" y="211.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.7" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (1 samples, 0.11%)</title><rect x="231.7" y="195.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="234.7" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.replication (225 samples, 25.77%)</title><rect x="233.0" y="403.0" width="304.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.0" y="414.0">ru/mail/polis/service/mrsandman5/ServiceI..</text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.11%)</title><rect x="234.4" y="387.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.4" y="398.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.11%)</title><rect x="234.4" y="371.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="237.4" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$Head.&lt;init&gt; (1 samples, 0.11%)</title><rect x="234.4" y="355.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="237.4" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (1 samples, 0.11%)</title><rect x="234.4" y="339.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.4" y="350.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (1 samples, 0.11%)</title><rect x="234.4" y="323.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.4" y="334.0"></text>
</g>
<g>
<title>java/util/stream/PipelineHelper.&lt;init&gt; (1 samples, 0.11%)</title><rect x="234.4" y="307.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="237.4" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (203 samples, 23.25%)</title><rect x="235.7" y="387.0" width="274.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.7" y="398.0">java/util/stream/ReferencePipeline.co..</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (203 samples, 23.25%)</title><rect x="235.7" y="371.0" width="274.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="238.7" y="382.0">java/util/stream/AbstractPipeline.eva..</text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (203 samples, 23.25%)</title><rect x="235.7" y="355.0" width="274.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.7" y="366.0">java/util/stream/ReduceOps$ReduceOp.e..</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (201 samples, 23.02%)</title><rect x="235.7" y="339.0" width="271.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.7" y="350.0">java/util/stream/AbstractPipeline.wr..</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (201 samples, 23.02%)</title><rect x="235.7" y="323.0" width="271.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.7" y="334.0">java/util/stream/AbstractPipeline.co..</text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (201 samples, 23.02%)</title><rect x="235.7" y="307.0" width="271.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.7" y="318.0">java/util/HashMap$KeySpliterator.for..</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (197 samples, 22.57%)</title><rect x="241.1" y="291.0" width="266.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.1" y="302.0">java/util/stream/ReferencePipeline$3..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$85/1771982368.apply (197 samples, 22.57%)</title><rect x="241.1" y="275.0" width="266.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="244.1" y="286.0">ru/mail/polis/service/mrsandman5/Ser..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replication$0 (197 samples, 22.57%)</title><rect x="241.1" y="259.0" width="266.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="244.1" y="270.0">ru/mail/polis/service/mrsandman5/Ser..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$81/1882180511.act (77 samples, 8.82%)</title><rect x="241.1" y="243.0" width="104.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.1" y="254.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replicasPut$5 (77 samples, 8.82%)</title><rect x="241.1" y="227.0" width="104.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="244.1" y="238.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/SimpleRequests.put (77 samples, 8.82%)</title><rect x="241.1" y="211.0" width="104.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="244.1" y="222.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.upsert (77 samples, 8.82%)</title><rect x="241.1" y="195.0" width="104.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.1" y="206.0">ru/mail/poli..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (7 samples, 0.80%)</title><rect x="243.8" y="179.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.8" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (6 samples, 0.69%)</title><rect x="243.8" y="163.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.8" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.69%)</title><rect x="243.8" y="147.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.8" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.69%)</title><rect x="243.8" y="131.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.8" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.46%)</title><rect x="245.2" y="115.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.2" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.34%)</title><rect x="245.2" y="99.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="248.2" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.11%)</title><rect x="249.2" y="99.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="252.2" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.11%)</title><rect x="249.2" y="83.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.2" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.11%)</title><rect x="249.2" y="67.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="252.2" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.11%)</title><rect x="250.6" y="115.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.6" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.11%)</title><rect x="250.6" y="99.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.6" y="110.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.11%)</title><rect x="250.6" y="83.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.6" y="94.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.11%)</title><rect x="251.9" y="163.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.9" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.11%)</title><rect x="253.3" y="179.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.3" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="253.3" y="163.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="253.3" y="147.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.3" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (2 samples, 0.23%)</title><rect x="254.7" y="179.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (2 samples, 0.23%)</title><rect x="254.7" y="163.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="257.7" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.11%)</title><rect x="256.0" y="147.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="259.0" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (1 samples, 0.11%)</title><rect x="256.0" y="131.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="259.0" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (1 samples, 0.11%)</title><rect x="256.0" y="115.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.0" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (29 samples, 3.32%)</title><rect x="257.4" y="179.0" width="39.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="260.4" y="190.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (29 samples, 3.32%)</title><rect x="257.4" y="163.0" width="39.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="260.4" y="174.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (29 samples, 3.32%)</title><rect x="257.4" y="147.0" width="39.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.4" y="158.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (29 samples, 3.32%)</title><rect x="257.4" y="131.0" width="39.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.4" y="142.0">jav..</text>
</g>
<g>
<title>java/lang/CharacterData.of (2 samples, 0.23%)</title><rect x="287.1" y="115.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="290.1" y="126.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="289.8" y="115.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="292.8" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.23%)</title><rect x="291.1" y="115.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.1" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.23%)</title><rect x="293.8" y="115.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="296.8" y="126.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="296.6" y="179.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="299.6" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.sizeInBytes (3 samples, 0.34%)</title><rect x="297.9" y="179.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.get (3 samples, 0.34%)</title><rect x="297.9" y="163.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="300.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.upsert (32 samples, 3.67%)</title><rect x="302.0" y="179.0" width="43.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="305.0" y="190.0">ru/m..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (2 samples, 0.23%)</title><rect x="302.0" y="163.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.0" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (2 samples, 0.23%)</title><rect x="302.0" y="147.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="305.0" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (2 samples, 0.23%)</title><rect x="302.0" y="131.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="305.0" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (30 samples, 3.44%)</title><rect x="304.7" y="163.0" width="40.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="307.7" y="174.0">jav..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.11%)</title><rect x="306.0" y="147.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="309.0" y="158.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.11%)</title><rect x="306.0" y="131.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="309.0" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (26 samples, 2.98%)</title><rect x="307.4" y="147.0" width="35.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="310.4" y="158.0">jav..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (4 samples, 0.46%)</title><rect x="307.4" y="131.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="310.4" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (4 samples, 0.46%)</title><rect x="307.4" y="115.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="310.4" y="126.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (2 samples, 0.23%)</title><rect x="310.1" y="99.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.1" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (7 samples, 0.80%)</title><rect x="312.8" y="131.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="315.8" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.11%)</title><rect x="322.2" y="131.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="325.2" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (14 samples, 1.60%)</title><rect x="323.6" y="131.0" width="18.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="326.6" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.92%)</title><rect x="331.7" y="115.0" width="10.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="334.7" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.92%)</title><rect x="331.7" y="99.0" width="10.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="334.7" y="110.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.92%)</title><rect x="331.7" y="83.0" width="10.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="334.7" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.34%)</title><rect x="338.5" y="67.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="341.5" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.34%)</title><rect x="338.5" y="51.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="341.5" y="62.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.11%)</title><rect x="341.2" y="35.0" width="1.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="344.2" y="46.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.23%)</title><rect x="342.5" y="147.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="345.5" y="158.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.23%)</title><rect x="342.5" y="131.0" width="2.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="345.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.proxy (120 samples, 13.75%)</title><rect x="345.2" y="243.0" width="162.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="348.2" y="254.0">ru/mail/polis/service..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (6 samples, 0.69%)</title><rect x="345.2" y="227.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="348.2" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/360207322.invoke (6 samples, 0.69%)</title><rect x="345.2" y="211.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="348.2" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (114 samples, 13.06%)</title><rect x="353.3" y="227.0" width="154.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="356.3" y="238.0">one/nio/http/HttpCli..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (114 samples, 13.06%)</title><rect x="353.3" y="211.0" width="154.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="356.3" y="222.0">one/nio/http/HttpCli..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (47 samples, 5.38%)</title><rect x="353.3" y="195.0" width="63.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="356.3" y="206.0">one/nio..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.57%)</title><rect x="353.3" y="179.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="356.3" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.11%)</title><rect x="353.3" y="163.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="356.3" y="174.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.46%)</title><rect x="354.7" y="163.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="357.7" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.46%)</title><rect x="354.7" y="147.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="357.7" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.34%)</title><rect x="354.7" y="131.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="357.7" y="142.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="354.7" y="115.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="357.7" y="126.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.11%)</title><rect x="354.7" y="99.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="357.7" y="110.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.23%)</title><rect x="356.0" y="115.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="359.0" y="126.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="358.7" y="131.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="361.7" y="142.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (41 samples, 4.70%)</title><rect x="360.1" y="179.0" width="55.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="363.1" y="190.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (16 samples, 1.83%)</title><rect x="362.8" y="163.0" width="21.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="365.8" y="174.0">J..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.34%)</title><rect x="366.8" y="147.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="369.8" y="158.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.23%)</title><rect x="370.9" y="147.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="373.9" y="158.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (4 samples, 0.46%)</title><rect x="373.6" y="147.0" width="5.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="376.6" y="158.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.46%)</title><rect x="379.0" y="147.0" width="5.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="382.0" y="158.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.11%)</title><rect x="381.7" y="131.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="384.7" y="142.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.11%)</title><rect x="381.7" y="115.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="384.7" y="126.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.11%)</title><rect x="383.1" y="131.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="386.1" y="142.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (8 samples, 0.92%)</title><rect x="384.4" y="163.0" width="10.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="387.4" y="174.0"></text>
</g>
<g>
<title>__recv (14 samples, 1.60%)</title><rect x="395.2" y="163.0" width="18.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="398.2" y="174.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.11%)</title><rect x="414.1" y="163.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="417.1" y="174.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.11%)</title><rect x="415.5" y="179.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="418.5" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (9 samples, 1.03%)</title><rect x="416.8" y="195.0" width="12.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="419.8" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (6 samples, 0.69%)</title><rect x="418.2" y="179.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="421.2" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.69%)</title><rect x="418.2" y="163.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="421.2" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.69%)</title><rect x="418.2" y="147.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="421.2" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.23%)</title><rect x="426.3" y="179.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="429.3" y="190.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.11%)</title><rect x="427.7" y="163.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="430.7" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.11%)</title><rect x="427.7" y="147.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="430.7" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (23 samples, 2.63%)</title><rect x="429.0" y="195.0" width="31.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="432.0" y="206.0">on..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.69%)</title><rect x="452.0" y="179.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.0" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.69%)</title><rect x="452.0" y="163.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="455.0" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.69%)</title><rect x="452.0" y="147.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="455.0" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.69%)</title><rect x="452.0" y="131.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="455.0" y="142.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.69%)</title><rect x="452.0" y="115.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="455.0" y="126.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (16 samples, 1.83%)</title><rect x="460.1" y="195.0" width="21.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="463.1" y="206.0">o..</text>
</g>
<g>
<title>__setsockopt (14 samples, 1.60%)</title><rect x="462.8" y="179.0" width="18.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="465.8" y="190.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (19 samples, 2.18%)</title><rect x="481.7" y="195.0" width="25.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="484.7" y="206.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (7 samples, 0.80%)</title><rect x="483.1" y="179.0" width="9.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="486.1" y="190.0"></text>
</g>
<g>
<title>WeakPreserveExceptionMark::WeakPreserveExceptionMark(Thread*) (1 samples, 0.11%)</title><rect x="483.1" y="163.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="486.1" y="174.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.11%)</title><rect x="484.4" y="163.0" width="1.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="487.4" y="174.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (1 samples, 0.11%)</title><rect x="485.8" y="163.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="488.8" y="174.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.46%)</title><rect x="487.1" y="163.0" width="5.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="490.1" y="174.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.34%)</title><rect x="488.5" y="147.0" width="4.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="491.5" y="158.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.11%)</title><rect x="491.2" y="131.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="494.2" y="142.0"></text>
</g>
<g>
<title>__libc_send (9 samples, 1.03%)</title><rect x="492.5" y="179.0" width="12.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="495.5" y="190.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.11%)</title><rect x="504.7" y="179.0" width="1.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="507.7" y="190.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.11%)</title><rect x="506.1" y="179.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="509.1" y="190.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (2 samples, 0.23%)</title><rect x="507.4" y="339.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="510.4" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (2 samples, 0.23%)</title><rect x="507.4" y="323.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="510.4" y="334.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.11%)</title><rect x="508.8" y="307.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="511.8" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (2 samples, 0.23%)</title><rect x="510.1" y="387.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="513.1" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (2 samples, 0.23%)</title><rect x="510.1" y="371.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="513.1" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (2 samples, 0.23%)</title><rect x="510.1" y="355.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="513.1" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (2 samples, 0.23%)</title><rect x="510.1" y="339.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="513.1" y="350.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (2 samples, 0.23%)</title><rect x="510.1" y="323.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="513.1" y="334.0"></text>
</g>
<g>
<title>java/util/stream/PipelineHelper.&lt;init&gt; (2 samples, 0.23%)</title><rect x="510.1" y="307.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="513.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/clustering/ConsistentHashingTopology.replicasFor (18 samples, 2.06%)</title><rect x="512.8" y="387.0" width="24.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="515.8" y="398.0">r..</text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.hashBytes (4 samples, 0.46%)</title><rect x="512.8" y="371.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="515.8" y="382.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.newHasher (1 samples, 0.11%)</title><rect x="512.8" y="355.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="515.8" y="366.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction.newHasher (1 samples, 0.11%)</title><rect x="512.8" y="339.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="515.8" y="350.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.&lt;init&gt; (1 samples, 0.11%)</title><rect x="512.8" y="323.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="515.8" y="334.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (1 samples, 0.11%)</title><rect x="512.8" y="307.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="515.8" y="318.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (1 samples, 0.11%)</title><rect x="512.8" y="291.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="515.8" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.11%)</title><rect x="512.8" y="275.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="515.8" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="512.8" y="259.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="515.8" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="512.8" y="243.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="515.8" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="512.8" y="227.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="515.8" y="238.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.hash (3 samples, 0.34%)</title><rect x="514.2" y="355.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="517.2" y="366.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.putBytesInternal (1 samples, 0.11%)</title><rect x="515.5" y="339.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="518.5" y="350.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.makeHash (1 samples, 0.11%)</title><rect x="516.9" y="339.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="519.9" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.11%)</title><rect x="516.9" y="323.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="519.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.11%)</title><rect x="516.9" y="307.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="519.9" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="516.9" y="291.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="519.9" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="516.9" y="275.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="519.9" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="516.9" y="259.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="519.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.11%)</title><rect x="516.9" y="243.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="519.9" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.11%)</title><rect x="516.9" y="227.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="519.9" y="238.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.processRemaining (1 samples, 0.11%)</title><rect x="516.9" y="211.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="519.9" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.11%)</title><rect x="518.2" y="371.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="521.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.11%)</title><rect x="518.2" y="355.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="521.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.add (11 samples, 1.26%)</title><rect x="519.6" y="371.0" width="14.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="522.6" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 1.26%)</title><rect x="519.6" y="355.0" width="14.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="522.6" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 0.80%)</title><rect x="525.0" y="339.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="528.0" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.11%)</title><rect x="529.0" y="323.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="532.0" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.34%)</title><rect x="530.4" y="323.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="533.4" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (2 samples, 0.23%)</title><rect x="534.4" y="371.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="537.4" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (2 samples, 0.23%)</title><rect x="534.4" y="355.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="537.4" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (2 samples, 0.23%)</title><rect x="534.4" y="339.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="537.4" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (2 samples, 0.23%)</title><rect x="534.4" y="323.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="537.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$97/1256808528.act (65 samples, 7.45%)</title><rect x="537.1" y="435.0" width="87.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="540.1" y="446.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replicasPut$4 (65 samples, 7.45%)</title><rect x="537.1" y="419.0" width="87.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="540.1" y="430.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/SimpleRequests.put (65 samples, 7.45%)</title><rect x="537.1" y="403.0" width="87.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="540.1" y="414.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.34%)</title><rect x="538.5" y="387.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="541.5" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.34%)</title><rect x="538.5" y="371.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="541.5" y="382.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="539.9" y="355.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="542.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.upsert (1 samples, 0.11%)</title><rect x="541.2" y="355.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="544.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.upsert (58 samples, 6.64%)</title><rect x="542.6" y="387.0" width="78.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="545.6" y="398.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.34%)</title><rect x="542.6" y="371.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="545.6" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="542.6" y="355.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="545.6" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="542.6" y="339.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="545.6" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="542.6" y="323.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="545.6" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="542.6" y="307.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="545.6" y="318.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="542.6" y="291.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="545.6" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="542.6" y="275.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="545.6" y="286.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.11%)</title><rect x="542.6" y="259.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="545.6" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.11%)</title><rect x="542.6" y="243.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="545.6" y="254.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.11%)</title><rect x="542.6" y="227.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="545.6" y="238.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.11%)</title><rect x="542.6" y="211.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="545.6" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.23%)</title><rect x="543.9" y="355.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="546.9" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.23%)</title><rect x="543.9" y="339.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="546.9" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.23%)</title><rect x="543.9" y="323.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="546.9" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.23%)</title><rect x="543.9" y="307.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="546.9" y="318.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.11%)</title><rect x="545.3" y="291.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="548.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.upsert (55 samples, 6.30%)</title><rect x="546.6" y="371.0" width="74.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="549.6" y="382.0">ru/mail/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="546.6" y="355.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="549.6" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="546.6" y="339.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="549.6" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="546.6" y="323.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="549.6" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="546.6" y="307.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="549.6" y="318.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="546.6" y="291.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="549.6" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="546.6" y="275.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="549.6" y="286.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.11%)</title><rect x="546.6" y="259.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="549.6" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (4 samples, 0.46%)</title><rect x="548.0" y="355.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="551.0" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (4 samples, 0.46%)</title><rect x="548.0" y="339.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="551.0" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.34%)</title><rect x="549.3" y="323.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="552.3" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.34%)</title><rect x="549.3" y="307.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="552.3" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.34%)</title><rect x="549.3" y="291.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="552.3" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.34%)</title><rect x="549.3" y="275.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="552.3" y="286.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.34%)</title><rect x="549.3" y="259.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="552.3" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.34%)</title><rect x="549.3" y="243.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="552.3" y="254.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.11%)</title><rect x="550.7" y="227.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="553.7" y="238.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.11%)</title><rect x="552.0" y="227.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="555.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (50 samples, 5.73%)</title><rect x="553.4" y="355.0" width="67.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="556.4" y="366.0">java/ut..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.11%)</title><rect x="554.7" y="339.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="557.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (48 samples, 5.50%)</title><rect x="556.1" y="339.0" width="64.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="559.1" y="350.0">java/ut..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (7 samples, 0.80%)</title><rect x="558.8" y="323.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="561.8" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (7 samples, 0.80%)</title><rect x="558.8" y="307.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="561.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.11%)</title><rect x="562.8" y="291.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="565.8" y="302.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (3 samples, 0.34%)</title><rect x="564.2" y="291.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="567.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (8 samples, 0.92%)</title><rect x="568.2" y="323.0" width="10.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="571.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (1 samples, 0.11%)</title><rect x="579.0" y="323.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="582.0" y="334.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.11%)</title><rect x="579.0" y="307.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="582.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (3 samples, 0.34%)</title><rect x="580.4" y="323.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="583.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (2 samples, 0.23%)</title><rect x="580.4" y="307.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="583.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.11%)</title><rect x="583.1" y="307.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="586.1" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.11%)</title><rect x="583.1" y="291.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="586.1" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.11%)</title><rect x="583.1" y="275.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="586.1" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.11%)</title><rect x="583.1" y="259.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="586.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (27 samples, 3.09%)</title><rect x="584.5" y="323.0" width="36.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="587.5" y="334.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (17 samples, 1.95%)</title><rect x="598.0" y="307.0" width="23.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="601.0" y="318.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (16 samples, 1.83%)</title><rect x="599.3" y="291.0" width="21.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="602.3" y="302.0">j..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (16 samples, 1.83%)</title><rect x="599.3" y="275.0" width="21.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="602.3" y="286.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (11 samples, 1.26%)</title><rect x="606.1" y="259.0" width="14.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="609.1" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (11 samples, 1.26%)</title><rect x="606.1" y="243.0" width="14.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="609.1" y="254.0"></text>
</g>
<g>
<title>vectorizedMismatch (3 samples, 0.34%)</title><rect x="616.9" y="227.0" width="4.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="619.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.emptyResponse (3 samples, 0.34%)</title><rect x="621.0" y="387.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="624.0" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.34%)</title><rect x="621.0" y="371.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="624.0" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.23%)</title><rect x="621.0" y="355.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="624.0" y="366.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.23%)</title><rect x="621.0" y="339.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="624.0" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.11%)</title><rect x="622.3" y="323.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="625.3" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="622.3" y="307.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="625.3" y="318.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="622.3" y="291.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="625.3" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="622.3" y="275.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="625.3" y="286.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.11%)</title><rect x="622.3" y="259.0" width="1.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="625.3" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="623.7" y="355.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="626.7" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="623.7" y="339.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="626.7" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="623.7" y="323.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="626.7" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="623.7" y="307.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="626.7" y="318.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="623.7" y="291.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="626.7" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="623.7" y="275.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="626.7" y="286.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.11%)</title><rect x="623.7" y="259.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="626.7" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.11%)</title><rect x="623.7" y="243.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="626.7" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.sendResponse (55 samples, 6.30%)</title><rect x="625.0" y="435.0" width="74.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="628.0" y="446.0">ru/mail/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (53 samples, 6.07%)</title><rect x="625.0" y="419.0" width="71.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="628.0" y="430.0">one/nio/..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.34%)</title><rect x="630.4" y="403.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="633.4" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.34%)</title><rect x="630.4" y="387.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="633.4" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.23%)</title><rect x="630.4" y="371.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="633.4" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.11%)</title><rect x="633.1" y="371.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="636.1" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.11%)</title><rect x="633.1" y="355.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="636.1" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (41 samples, 4.70%)</title><rect x="634.5" y="403.0" width="55.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="637.5" y="414.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (14 samples, 1.60%)</title><rect x="634.5" y="387.0" width="18.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="637.5" y="398.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.23%)</title><rect x="650.7" y="371.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="653.7" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.23%)</title><rect x="650.7" y="355.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="653.7" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.23%)</title><rect x="650.7" y="339.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="653.7" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.23%)</title><rect x="650.7" y="323.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="653.7" y="334.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.23%)</title><rect x="650.7" y="307.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="653.7" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (27 samples, 3.09%)</title><rect x="653.4" y="387.0" width="36.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="656.4" y="398.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (26 samples, 2.98%)</title><rect x="654.7" y="371.0" width="35.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="657.7" y="382.0">one..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.11%)</title><rect x="654.7" y="355.0" width="1.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="657.7" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (25 samples, 2.86%)</title><rect x="656.1" y="355.0" width="33.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="659.1" y="366.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (25 samples, 2.86%)</title><rect x="656.1" y="339.0" width="33.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="659.1" y="350.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (9 samples, 1.03%)</title><rect x="657.4" y="323.0" width="12.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="660.4" y="334.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.11%)</title><rect x="658.8" y="307.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="661.8" y="318.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.11%)</title><rect x="660.1" y="307.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="663.1" y="318.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.11%)</title><rect x="661.5" y="307.0" width="1.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="664.5" y="318.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.57%)</title><rect x="662.9" y="307.0" width="6.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="665.9" y="318.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.34%)</title><rect x="664.2" y="291.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="667.2" y="302.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.11%)</title><rect x="668.3" y="291.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="671.3" y="302.0"></text>
</g>
<g>
<title>__libc_send (13 samples, 1.49%)</title><rect x="669.6" y="323.0" width="17.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="672.6" y="334.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.11%)</title><rect x="687.2" y="323.0" width="1.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="690.2" y="334.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.11%)</title><rect x="688.5" y="323.0" width="1.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="691.5" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.46%)</title><rect x="689.9" y="403.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="692.9" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.23%)</title><rect x="692.6" y="387.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="695.6" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.23%)</title><rect x="692.6" y="371.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="695.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.isHttp11 (1 samples, 0.11%)</title><rect x="695.3" y="403.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="698.3" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.11%)</title><rect x="695.3" y="387.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="698.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$97/1256808528.act (2 samples, 0.23%)</title><rect x="696.6" y="419.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="699.6" y="430.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (242 samples, 27.72%)</title><rect x="699.3" y="515.0" width="327.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="702.3" y="526.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.11%)</title><rect x="702.1" y="499.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="705.1" y="510.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (7 samples, 0.80%)</title><rect x="703.4" y="499.0" width="9.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="706.4" y="510.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (7 samples, 0.80%)</title><rect x="703.4" y="483.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="706.4" y="494.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (7 samples, 0.80%)</title><rect x="703.4" y="467.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="706.4" y="478.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (63 samples, 7.22%)</title><rect x="712.9" y="499.0" width="85.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="715.9" y="510.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (61 samples, 6.99%)</title><rect x="715.6" y="483.0" width="82.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="718.6" y="494.0">one/nio/n..</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.11%)</title><rect x="731.8" y="467.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="734.8" y="478.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.11%)</title><rect x="731.8" y="451.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="734.8" y="462.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.11%)</title><rect x="731.8" y="435.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="734.8" y="446.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.11%)</title><rect x="731.8" y="419.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="734.8" y="430.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (3 samples, 0.34%)</title><rect x="733.1" y="467.0" width="4.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="736.1" y="478.0"></text>
</g>
<g>
<title>__clock_gettime (11 samples, 1.26%)</title><rect x="737.2" y="467.0" width="14.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="740.2" y="478.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="748.0" y="451.0" width="1.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="751.0" y="462.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.23%)</title><rect x="749.4" y="451.0" width="2.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="752.4" y="462.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (3 samples, 0.34%)</title><rect x="752.1" y="467.0" width="4.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="755.1" y="478.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.23%)</title><rect x="756.1" y="467.0" width="2.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="759.1" y="478.0"></text>
</g>
<g>
<title>clock_gettime@plt (1 samples, 0.11%)</title><rect x="758.8" y="467.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="761.8" y="478.0"></text>
</g>
<g>
<title>epoll_wait (28 samples, 3.21%)</title><rect x="760.2" y="467.0" width="37.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="763.2" y="478.0">epo..</text>
</g>
<g>
<title>one/nio/net/Session.process (167 samples, 19.13%)</title><rect x="798.0" y="499.0" width="225.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="801.0" y="510.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (165 samples, 18.90%)</title><rect x="800.7" y="483.0" width="223.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="803.7" y="494.0">one/nio/http/HttpSession.proc..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (114 samples, 13.06%)</title><rect x="800.7" y="467.0" width="154.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="803.7" y="478.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.11%)</title><rect x="803.4" y="451.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="806.4" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (64 samples, 7.33%)</title><rect x="804.8" y="451.0" width="86.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="807.8" y="462.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (62 samples, 7.10%)</title><rect x="807.5" y="435.0" width="83.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="810.5" y="446.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler1_response.handleRequest (58 samples, 6.64%)</title><rect x="807.5" y="419.0" width="78.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="810.5" y="430.0">RequestHa..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.34%)</title><rect x="807.5" y="403.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="810.5" y="414.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.11%)</title><rect x="810.2" y="387.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="813.2" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.11%)</title><rect x="810.2" y="371.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="813.2" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (6 samples, 0.69%)</title><rect x="811.5" y="403.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="814.5" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.69%)</title><rect x="811.5" y="387.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="814.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.46%)</title><rect x="811.5" y="371.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="814.5" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.46%)</title><rect x="811.5" y="355.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="814.5" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="811.5" y="339.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="814.5" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="811.5" y="323.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="814.5" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="811.5" y="307.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="814.5" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="811.5" y="291.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="814.5" y="302.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.11%)</title><rect x="811.5" y="275.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="814.5" y="286.0"></text>
</g>
<g>
<title>JfrAllocationTracer::~JfrAllocationTracer() (1 samples, 0.11%)</title><rect x="811.5" y="259.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="814.5" y="270.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.34%)</title><rect x="812.9" y="339.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="815.9" y="350.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.11%)</title><rect x="816.9" y="371.0" width="1.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="819.9" y="382.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.11%)</title><rect x="818.3" y="371.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="821.3" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (49 samples, 5.61%)</title><rect x="819.6" y="403.0" width="66.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="822.6" y="414.0">ru/mail..</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.11%)</title><rect x="822.3" y="387.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="825.3" y="398.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.11%)</title><rect x="822.3" y="371.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="825.3" y="382.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.11%)</title><rect x="822.3" y="355.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="825.3" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.11%)</title><rect x="822.3" y="339.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="825.3" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="822.3" y="323.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="825.3" y="334.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.11%)</title><rect x="822.3" y="307.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="825.3" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.11%)</title><rect x="823.7" y="387.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="826.7" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.11%)</title><rect x="823.7" y="371.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="826.7" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="823.7" y="355.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="826.7" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="823.7" y="339.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="826.7" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="823.7" y="323.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="826.7" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="823.7" y="307.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="826.7" y="318.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="823.7" y="291.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="826.7" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="823.7" y="275.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="826.7" y="286.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.11%)</title><rect x="823.7" y="259.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="826.7" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.92%)</title><rect x="825.1" y="387.0" width="10.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="828.1" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.23%)</title><rect x="833.2" y="371.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="836.2" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.23%)</title><rect x="833.2" y="355.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="836.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.replicasPut (37 samples, 4.24%)</title><rect x="835.9" y="387.0" width="50.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="838.9" y="398.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.asyncExecute (37 samples, 4.24%)</title><rect x="835.9" y="371.0" width="50.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="838.9" y="382.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (34 samples, 3.89%)</title><rect x="839.9" y="355.0" width="46.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="842.9" y="366.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (33 samples, 3.78%)</title><rect x="841.3" y="339.0" width="44.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="844.3" y="350.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.11%)</title><rect x="842.6" y="323.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="845.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.11%)</title><rect x="842.6" y="307.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="845.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (31 samples, 3.55%)</title><rect x="844.0" y="323.0" width="41.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="847.0" y="334.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (31 samples, 3.55%)</title><rect x="844.0" y="307.0" width="41.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="847.0" y="318.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (31 samples, 3.55%)</title><rect x="844.0" y="291.0" width="41.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="847.0" y="302.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (31 samples, 3.55%)</title><rect x="844.0" y="275.0" width="41.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="847.0" y="286.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (20 samples, 2.29%)</title><rect x="858.8" y="259.0" width="27.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="861.8" y="270.0">j..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.11%)</title><rect x="858.8" y="243.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="861.8" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.23%)</title><rect x="860.2" y="243.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="863.2" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.11%)</title><rect x="862.9" y="243.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="865.9" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 0.69%)</title><rect x="864.2" y="243.0" width="8.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="867.2" y="254.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="864.2" y="227.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="867.2" y="238.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.11%)</title><rect x="865.6" y="227.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="868.6" y="238.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.11%)</title><rect x="867.0" y="227.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="870.0" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.11%)</title><rect x="868.3" y="227.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="871.3" y="238.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.11%)</title><rect x="869.7" y="227.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="872.7" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.11%)</title><rect x="871.0" y="227.0" width="1.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="874.0" y="238.0"></text>
</g>
<g>
<title>__pthread_cond_signal (8 samples, 0.92%)</title><rect x="872.4" y="243.0" width="10.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="875.4" y="254.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="883.2" y="243.0" width="1.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="886.2" y="254.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.11%)</title><rect x="884.5" y="243.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="887.5" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.46%)</title><rect x="885.9" y="419.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="888.9" y="430.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.46%)</title><rect x="885.9" y="403.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="888.9" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.46%)</title><rect x="885.9" y="387.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="888.9" y="398.0"></text>
</g>
<g>
<title>RequestHandler1_response.handleRequest (2 samples, 0.23%)</title><rect x="885.9" y="371.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="888.9" y="382.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.23%)</title><rect x="888.6" y="371.0" width="2.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="891.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (20 samples, 2.29%)</title><rect x="891.3" y="451.0" width="27.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="894.3" y="462.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.34%)</title><rect x="891.3" y="435.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="894.3" y="446.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.34%)</title><rect x="891.3" y="419.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="894.3" y="430.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.34%)</title><rect x="891.3" y="403.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="894.3" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.34%)</title><rect x="891.3" y="387.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="894.3" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.11%)</title><rect x="894.0" y="371.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="897.0" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.80%)</title><rect x="895.3" y="435.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="898.3" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.80%)</title><rect x="895.3" y="419.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="898.3" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.23%)</title><rect x="902.1" y="403.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="905.1" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.23%)</title><rect x="902.1" y="387.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="905.1" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.23%)</title><rect x="902.1" y="371.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="905.1" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.23%)</title><rect x="902.1" y="355.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="905.1" y="366.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.11%)</title><rect x="902.1" y="339.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="905.1" y="350.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="902.1" y="323.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="905.1" y="334.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.11%)</title><rect x="902.1" y="307.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="905.1" y="318.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="903.4" y="339.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="906.4" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="903.4" y="323.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="906.4" y="334.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.11%)</title><rect x="903.4" y="307.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="906.4" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (10 samples, 1.15%)</title><rect x="904.8" y="435.0" width="13.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="907.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.34%)</title><rect x="918.3" y="451.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="921.3" y="462.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.34%)</title><rect x="918.3" y="435.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="921.3" y="446.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.11%)</title><rect x="918.3" y="419.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="921.3" y="430.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.11%)</title><rect x="918.3" y="403.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="921.3" y="414.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.23%)</title><rect x="919.7" y="419.0" width="2.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="922.7" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.57%)</title><rect x="922.4" y="451.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="925.4" y="462.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.34%)</title><rect x="923.7" y="435.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="926.7" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.34%)</title><rect x="923.7" y="419.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="926.7" y="430.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.11%)</title><rect x="927.8" y="435.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="930.8" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.11%)</title><rect x="927.8" y="419.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="930.8" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="927.8" y="403.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="930.8" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="927.8" y="387.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="930.8" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="927.8" y="371.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="930.8" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="927.8" y="355.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="930.8" y="366.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.11%)</title><rect x="927.8" y="339.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="930.8" y="350.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="927.8" y="323.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="930.8" y="334.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.11%)</title><rect x="927.8" y="307.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="930.8" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (19 samples, 2.18%)</title><rect x="929.1" y="451.0" width="25.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="932.1" y="462.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.92%)</title><rect x="944.0" y="435.0" width="10.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="947.0" y="446.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (2 samples, 0.23%)</title><rect x="954.8" y="467.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="957.8" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (49 samples, 5.61%)</title><rect x="957.5" y="467.0" width="66.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="960.5" y="478.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (47 samples, 5.38%)</title><rect x="958.9" y="451.0" width="63.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="961.9" y="462.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (21 samples, 2.41%)</title><rect x="964.3" y="435.0" width="28.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="967.3" y="446.0">Ja..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.11%)</title><rect x="965.6" y="419.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="968.6" y="430.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.11%)</title><rect x="967.0" y="419.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="970.0" y="430.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (4 samples, 0.46%)</title><rect x="968.3" y="419.0" width="5.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="971.3" y="430.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (2 samples, 0.23%)</title><rect x="973.7" y="419.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="976.7" y="430.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.11%)</title><rect x="976.4" y="419.0" width="1.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="979.4" y="430.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (11 samples, 1.26%)</title><rect x="977.8" y="419.0" width="14.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="980.8" y="430.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="979.1" y="403.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="982.1" y="414.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.11%)</title><rect x="980.5" y="403.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="983.5" y="414.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6 samples, 0.69%)</title><rect x="981.8" y="403.0" width="8.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="984.8" y="414.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.11%)</title><rect x="988.6" y="387.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="991.6" y="398.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (2 samples, 0.23%)</title><rect x="990.0" y="403.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="993.0" y="414.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.11%)</title><rect x="992.7" y="435.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="995.7" y="446.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.11%)</title><rect x="994.0" y="435.0" width="1.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="997.0" y="446.0"></text>
</g>
<g>
<title>__recv (19 samples, 2.18%)</title><rect x="995.4" y="435.0" width="25.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="998.4" y="446.0">_..</text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.11%)</title><rect x="1021.0" y="435.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1024.0" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (1 samples, 0.11%)</title><rect x="1022.4" y="451.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1025.4" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.23%)</title><rect x="1023.7" y="499.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1026.7" y="510.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.11%)</title><rect x="1025.1" y="483.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1028.1" y="494.0"></text>
</g>
<g>
<title>start_thread (121 samples, 13.86%)</title><rect x="1026.4" y="515.0" width="163.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1029.4" y="526.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (121 samples, 13.86%)</title><rect x="1026.4" y="499.0" width="163.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1029.4" y="510.0">thread_native_entry(T..</text>
</g>
<g>
<title>Thread::call_run() (121 samples, 13.86%)</title><rect x="1026.4" y="483.0" width="163.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1029.4" y="494.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (120 samples, 13.75%)</title><rect x="1026.4" y="467.0" width="162.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1029.4" y="478.0">GangWorker::loop()</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (120 samples, 13.75%)</title><rect x="1026.4" y="451.0" width="162.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1029.4" y="462.0">G1ParTask::work(unsig..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (43 samples, 4.93%)</title><rect x="1026.4" y="435.0" width="58.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1029.4" y="446.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (14 samples, 1.60%)</title><rect x="1026.4" y="419.0" width="19.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1029.4" y="430.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (10 samples, 1.15%)</title><rect x="1030.5" y="403.0" width="13.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1033.5" y="414.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (3 samples, 0.34%)</title><rect x="1040.0" y="387.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1043.0" y="398.0"></text>
</g>
<g>
<title>EnableIf&lt;!IsSame&lt;G1ScanEvacuatedObjClosure, OopClosure&gt;::value, void&gt;::type call_do_oop&lt;unsigned int, G1ScanEvacuatedObjClosure, OopClosure, G1ScanEvacuatedObjClosure&gt;(void (G1ScanEvacuatedObjClosure::*)(unsigned int*), void (OopClosure::*)(unsigned int*), G1ScanEvacuatedObjClosure*, unsigned int*) (3 samples, 0.34%)</title><rect x="1040.0" y="371.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1043.0" y="382.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.11%)</title><rect x="1044.0" y="403.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1047.0" y="414.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.11%)</title><rect x="1045.4" y="419.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1048.4" y="430.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.11%)</title><rect x="1045.4" y="403.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1048.4" y="414.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.23%)</title><rect x="1046.7" y="419.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1049.7" y="430.0"></text>
</g>
<g>
<title>SpinPause (26 samples, 2.98%)</title><rect x="1049.4" y="419.0" width="35.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1052.4" y="430.0">Spi..</text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (76 samples, 8.71%)</title><rect x="1084.6" y="435.0" width="102.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1087.6" y="446.0">G1RemSet::oo..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (76 samples, 8.71%)</title><rect x="1084.6" y="419.0" width="102.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1087.6" y="430.0">G1RemSet::up..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (76 samples, 8.71%)</title><rect x="1084.6" y="403.0" width="102.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1087.6" y="414.0">G1CollectedH..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (76 samples, 8.71%)</title><rect x="1084.6" y="387.0" width="102.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.6" y="398.0">DirtyCardQue..</text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (76 samples, 8.71%)</title><rect x="1084.6" y="371.0" width="102.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1087.6" y="382.0">G1RefineCard..</text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (33 samples, 3.78%)</title><rect x="1084.6" y="355.0" width="44.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1087.6" y="366.0">G1Re..</text>
</g>
<g>
<title>EnableIf&lt;!IsSame&lt;G1ScanObjsDuringUpdateRSClosure, OopClosure&gt;::value, void&gt;::type call_do_oop&lt;unsigned int, G1ScanObjsDuringUpdateRSClosure, OopClosure, G1ScanObjsDuringUpdateRSClosure&gt;(void (G1ScanObjsDuringUpdateRSClosure::*)(unsigned int*), void (OopClosure::*)(unsigned int*), G1ScanObjsDuringUpdateRSClosure*, unsigned int*) (1 samples, 0.11%)</title><rect x="1094.0" y="339.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.0" y="350.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (19 samples, 2.18%)</title><rect x="1095.4" y="339.0" width="25.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1098.4" y="350.0">G..</text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.11%)</title><rect x="1099.4" y="323.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1102.4" y="334.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (15 samples, 1.72%)</title><rect x="1100.8" y="323.0" width="20.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.8" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.11%)</title><rect x="1106.2" y="307.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1109.2" y="318.0"></text>
</g>
<g>
<title>G1ContiguousSpace::used_region() const (1 samples, 0.11%)</title><rect x="1107.5" y="307.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.5" y="318.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (9 samples, 1.03%)</title><rect x="1108.9" y="307.0" width="12.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.9" y="318.0"></text>
</g>
<g>
<title>G1ContiguousSpace::used_region() const (1 samples, 0.11%)</title><rect x="1119.7" y="291.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.7" y="302.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (6 samples, 0.69%)</title><rect x="1121.1" y="339.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.1" y="350.0"></text>
</g>
<g>
<title>EnableIf&lt;!IsSame&lt;G1ScanObjsDuringUpdateRSClosure, OopClosure&gt;::value, void&gt;::type call_do_oop&lt;unsigned int, G1ScanObjsDuringUpdateRSClosure, OopClosure, G1ScanObjsDuringUpdateRSClosure&gt;(void (G1ScanObjsDuringUpdateRSClosure::*)(unsigned int*), void (OopClosure::*)(unsigned int*), G1ScanObjsDuringUpdateRSClosure*, unsigned int*) (3 samples, 0.34%)</title><rect x="1125.1" y="323.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.1" y="334.0"></text>
</g>
<g>
<title>G1ScanClosureBase::trim_queue_partially() (39 samples, 4.47%)</title><rect x="1129.2" y="355.0" width="52.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.2" y="366.0">G1Sca..</text>
</g>
<g>
<title>G1CardTable::mark_card_deferred(unsigned long) (1 samples, 0.11%)</title><rect x="1146.7" y="339.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.7" y="350.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (24 samples, 2.75%)</title><rect x="1148.1" y="339.0" width="32.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.1" y="350.0">G1..</text>
</g>
<g>
<title>EnableIf&lt;!IsSame&lt;G1ScanEvacuatedObjClosure, OopClosure&gt;::value, void&gt;::type call_do_oop&lt;unsigned int, G1ScanEvacuatedObjClosure, OopClosure, G1ScanEvacuatedObjClosure&gt;(void (G1ScanEvacuatedObjClosure::*)(unsigned int*), void (OopClosure::*)(unsigned int*), G1ScanEvacuatedObjClosure*, unsigned int*) (1 samples, 0.11%)</title><rect x="1172.4" y="323.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.4" y="334.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.11%)</title><rect x="1173.8" y="323.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.8" y="334.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (4 samples, 0.46%)</title><rect x="1175.1" y="323.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.1" y="334.0"></text>
</g>
<g>
<title>EnableIf&lt;!IsSame&lt;G1ScanEvacuatedObjClosure, OopClosure&gt;::value, void&gt;::type call_do_oop&lt;unsigned int, G1ScanEvacuatedObjClosure, OopClosure, G1ScanEvacuatedObjClosure&gt;(void (G1ScanEvacuatedObjClosure::*)(unsigned int*), void (OopClosure::*)(unsigned int*), G1ScanEvacuatedObjClosure*, unsigned int*) (3 samples, 0.34%)</title><rect x="1176.5" y="307.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.5" y="318.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.11%)</title><rect x="1180.5" y="339.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.5" y="350.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (3 samples, 0.34%)</title><rect x="1181.9" y="355.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.9" y="366.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;TypeArrayKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (1 samples, 0.11%)</title><rect x="1185.9" y="355.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.9" y="366.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.11%)</title><rect x="1187.3" y="435.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.3" y="446.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.11%)</title><rect x="1187.3" y="419.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.3" y="430.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.11%)</title><rect x="1187.3" y="403.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.3" y="414.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.11%)</title><rect x="1187.3" y="387.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.3" y="398.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_card(MemRegion, unsigned int) (1 samples, 0.11%)</title><rect x="1187.3" y="371.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.3" y="382.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.11%)</title><rect x="1187.3" y="355.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.3" y="366.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.11%)</title><rect x="1188.6" y="467.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.6" y="478.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.11%)</title><rect x="1188.6" y="451.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.6" y="462.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.11%)</title><rect x="1188.6" y="435.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.6" y="446.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.11%)</title><rect x="1188.6" y="419.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.6" y="430.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.11%)</title><rect x="1188.6" y="403.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.6" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.11%)</title><rect x="1188.6" y="387.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.6" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.11%)</title><rect x="1188.6" y="371.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.6" y="382.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.11%)</title><rect x="1188.6" y="355.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.6" y="366.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.11%)</title><rect x="1188.6" y="339.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.6" y="350.0"></text>
</g>
<g>
<title>__new_sem_post (1 samples, 0.11%)</title><rect x="1188.6" y="323.0" width="1.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1191.6" y="334.0"></text>
</g>
</g>
</svg>
