<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="741"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="741"> </text>
<g id="frames">
<g>
<title>all (152 samples, 100.00%)</title><rect x="10.0" y="707.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="718.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (92 samples, 60.53%)</title><rect x="10.0" y="691.0" width="714.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="702.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.66%)</title><rect x="56.6" y="675.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.6" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 1.32%)</title><rect x="64.3" y="675.0" width="15.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="67.3" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.isOpen (1 samples, 0.66%)</title><rect x="79.9" y="675.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.9" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (16 samples, 10.53%)</title><rect x="87.6" y="675.0" width="124.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="90.6" y="686.0">one/nio/net/Nat..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (16 samples, 10.53%)</title><rect x="87.6" y="659.0" width="124.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.6" y="670.0">one/nio/net/Nat..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (3 samples, 1.97%)</title><rect x="103.2" y="643.0" width="23.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="106.2" y="654.0">J..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.97%)</title><rect x="126.4" y="643.0" width="23.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="129.4" y="654.0">_..</text>
</g>
<g>
<title>clock_gettime (1 samples, 0.66%)</title><rect x="142.0" y="627.0" width="7.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="145.0" y="638.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (3 samples, 1.97%)</title><rect x="149.7" y="643.0" width="23.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="152.7" y="654.0">_..</text>
</g>
<g>
<title>clock_gettime (1 samples, 0.66%)</title><rect x="173.0" y="643.0" width="7.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="176.0" y="654.0"></text>
</g>
<g>
<title>epoll_wait (4 samples, 2.63%)</title><rect x="180.8" y="643.0" width="31.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="183.8" y="654.0">ep..</text>
</g>
<g>
<title>one/nio/net/Session.process (66 samples, 43.42%)</title><rect x="211.8" y="675.0" width="512.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="214.8" y="686.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (65 samples, 42.76%)</title><rect x="219.6" y="659.0" width="504.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.6" y="670.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (53 samples, 34.87%)</title><rect x="219.6" y="643.0" width="411.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.6" y="654.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (45 samples, 29.61%)</title><rect x="227.4" y="627.0" width="349.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.4" y="638.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (45 samples, 29.61%)</title><rect x="227.4" y="611.0" width="349.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="230.4" y="622.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_response.handleRequest (44 samples, 28.95%)</title><rect x="227.4" y="595.0" width="341.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.4" y="606.0">RequestHandler1_response.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (7 samples, 4.61%)</title><rect x="227.4" y="579.0" width="54.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="230.4" y="590.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (5 samples, 3.29%)</title><rect x="227.4" y="563.0" width="38.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="230.4" y="574.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.66%)</title><rect x="227.4" y="547.0" width="7.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="230.4" y="558.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.66%)</title><rect x="227.4" y="531.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.4" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.66%)</title><rect x="227.4" y="515.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="230.4" y="526.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.66%)</title><rect x="227.4" y="499.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.4" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (4 samples, 2.63%)</title><rect x="235.1" y="547.0" width="31.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.1" y="558.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (4 samples, 2.63%)</title><rect x="235.1" y="531.0" width="31.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.1" y="542.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (3 samples, 1.97%)</title><rect x="242.9" y="515.0" width="23.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.9" y="526.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (3 samples, 1.97%)</title><rect x="242.9" y="499.0" width="23.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.9" y="510.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.66%)</title><rect x="250.7" y="483.0" width="7.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="253.7" y="494.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.66%)</title><rect x="250.7" y="467.0" width="7.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="253.7" y="478.0"></text>
</g>
<g>
<title>__libc_send (1 samples, 0.66%)</title><rect x="258.4" y="483.0" width="7.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="261.4" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 1.32%)</title><rect x="266.2" y="563.0" width="15.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="269.2" y="574.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.66%)</title><rect x="266.2" y="547.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.2" y="558.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.66%)</title><rect x="273.9" y="547.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.9" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.66%)</title><rect x="273.9" y="531.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (2 samples, 1.32%)</title><rect x="281.7" y="579.0" width="15.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="284.7" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 1.32%)</title><rect x="281.7" y="563.0" width="15.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.7" y="574.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.66%)</title><rect x="281.7" y="547.0" width="7.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="284.7" y="558.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.66%)</title><rect x="289.5" y="547.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="292.5" y="558.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.66%)</title><rect x="289.5" y="531.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.5" y="542.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.66%)</title><rect x="289.5" y="515.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="292.5" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.66%)</title><rect x="289.5" y="499.0" width="7.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="292.5" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (35 samples, 23.03%)</title><rect x="297.2" y="579.0" width="271.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="300.2" y="590.0">ru/mail/polis/service/mrsandman5/Ser..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (28 samples, 18.42%)</title><rect x="297.2" y="563.0" width="217.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="300.2" y="574.0">ch/qos/logback/classic/Logger..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (28 samples, 18.42%)</title><rect x="297.2" y="547.0" width="217.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="300.2" y="558.0">ch/qos/logback/classic/Logger..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (27 samples, 17.76%)</title><rect x="297.2" y="531.0" width="209.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="300.2" y="542.0">ch/qos/logback/classic/Logg..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (24 samples, 15.79%)</title><rect x="297.2" y="515.0" width="186.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="300.2" y="526.0">ch/qos/logback/classic/L..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (24 samples, 15.79%)</title><rect x="297.2" y="499.0" width="186.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.2" y="510.0">ch/qos/logback/classic/L..</text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (24 samples, 15.79%)</title><rect x="297.2" y="483.0" width="186.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="300.2" y="494.0">ch/qos/logback/core/spi/..</text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (24 samples, 15.79%)</title><rect x="297.2" y="467.0" width="186.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="300.2" y="478.0">ch/qos/logback/core/Unsy..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (24 samples, 15.79%)</title><rect x="297.2" y="451.0" width="186.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.2" y="462.0">ch/qos/logback/core/Outp..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (24 samples, 15.79%)</title><rect x="297.2" y="435.0" width="186.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="300.2" y="446.0">ch/qos/logback/core/Outp..</text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.prepareForDeferredProcessing (3 samples, 1.97%)</title><rect x="297.2" y="419.0" width="23.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="300.2" y="430.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.getFormattedMessage (3 samples, 1.97%)</title><rect x="297.2" y="403.0" width="23.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="300.2" y="414.0">c..</text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (3 samples, 1.97%)</title><rect x="297.2" y="387.0" width="23.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="300.2" y="398.0">o..</text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (3 samples, 1.97%)</title><rect x="297.2" y="371.0" width="23.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="300.2" y="382.0">o..</text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 1.32%)</title><rect x="297.2" y="355.0" width="15.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="300.2" y="366.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.66%)</title><rect x="297.2" y="339.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="300.2" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.66%)</title><rect x="305.0" y="339.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="308.0" y="350.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.66%)</title><rect x="305.0" y="323.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="308.0" y="334.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.66%)</title><rect x="312.8" y="355.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="315.8" y="366.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.writeBytes (12 samples, 7.89%)</title><rect x="320.5" y="419.0" width="93.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="323.5" y="430.0">ch/qos/logb..</text>
</g>
<g>
<title>ch/qos/logback/core/joran/spi/ConsoleTarget$1.flush (1 samples, 0.66%)</title><rect x="320.5" y="403.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="323.5" y="414.0"></text>
</g>
<g>
<title>java/io/PrintStream.flush (1 samples, 0.66%)</title><rect x="320.5" y="387.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.5" y="398.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (1 samples, 0.66%)</title><rect x="320.5" y="371.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="323.5" y="382.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (1 samples, 0.66%)</title><rect x="320.5" y="355.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="323.5" y="366.0"></text>
</g>
<g>
<title>java/io/OutputStream.flush (1 samples, 0.66%)</title><rect x="320.5" y="339.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.5" y="350.0"></text>
</g>
<g>
<title>ch/qos/logback/core/joran/spi/ConsoleTarget$1.write (10 samples, 6.58%)</title><rect x="328.3" y="403.0" width="77.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="331.3" y="414.0">ch/qos/lo..</text>
</g>
<g>
<title>java/io/FilterOutputStream.write (10 samples, 6.58%)</title><rect x="328.3" y="387.0" width="77.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.3" y="398.0">java/io/F..</text>
</g>
<g>
<title>java/io/PrintStream.write (10 samples, 6.58%)</title><rect x="328.3" y="371.0" width="77.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="331.3" y="382.0">java/io/P..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (10 samples, 6.58%)</title><rect x="328.3" y="355.0" width="77.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="331.3" y="366.0">java/io/B..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (8 samples, 5.26%)</title><rect x="336.1" y="339.0" width="62.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="339.1" y="350.0">java/i..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (8 samples, 5.26%)</title><rect x="336.1" y="323.0" width="62.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="339.1" y="334.0">java/i..</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (8 samples, 5.26%)</title><rect x="336.1" y="307.0" width="62.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="339.1" y="318.0">java/i..</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (8 samples, 5.26%)</title><rect x="336.1" y="291.0" width="62.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="339.1" y="302.0">Java_j..</text>
</g>
<g>
<title>writeBytes (8 samples, 5.26%)</title><rect x="336.1" y="275.0" width="62.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="339.1" y="286.0">writeB..</text>
</g>
<g>
<title>__libc_write (1 samples, 0.66%)</title><rect x="343.8" y="259.0" width="7.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="346.8" y="270.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.66%)</title><rect x="351.6" y="259.0" width="7.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="354.6" y="270.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.66%)</title><rect x="359.3" y="259.0" width="7.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="362.3" y="270.0"></text>
</g>
<g>
<title>jni_GetObjectField (4 samples, 2.63%)</title><rect x="367.1" y="259.0" width="31.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="370.1" y="270.0">jn..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;802934ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 802934ul&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.66%)</title><rect x="382.6" y="243.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="385.6" y="254.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.66%)</title><rect x="390.4" y="243.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="393.4" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.66%)</title><rect x="398.2" y="339.0" width="7.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="401.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.66%)</title><rect x="405.9" y="403.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="408.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.66%)</title><rect x="405.9" y="387.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="408.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.66%)</title><rect x="405.9" y="371.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="408.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.66%)</title><rect x="405.9" y="355.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="408.9" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.66%)</title><rect x="405.9" y="339.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="408.9" y="350.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (9 samples, 5.92%)</title><rect x="413.7" y="419.0" width="69.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="416.7" y="430.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (9 samples, 5.92%)</title><rect x="413.7" y="403.0" width="69.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="416.7" y="414.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (9 samples, 5.92%)</title><rect x="413.7" y="387.0" width="69.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="416.7" y="398.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/core/util/CachingDateFormatter.format (6 samples, 3.95%)</title><rect x="413.7" y="371.0" width="46.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="416.7" y="382.0">ch/q..</text>
</g>
<g>
<title>java/text/DateFormat.format (5 samples, 3.29%)</title><rect x="413.7" y="355.0" width="38.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="416.7" y="366.0">jav..</text>
</g>
<g>
<title>java/lang/StringBuffer.toString (1 samples, 0.66%)</title><rect x="413.7" y="339.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="416.7" y="350.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (4 samples, 2.63%)</title><rect x="421.4" y="339.0" width="31.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="424.4" y="350.0">ja..</text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (4 samples, 2.63%)</title><rect x="421.4" y="323.0" width="31.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="424.4" y="334.0">ja..</text>
</g>
<g>
<title>java/text/SimpleDateFormat.subFormat (2 samples, 1.32%)</title><rect x="421.4" y="307.0" width="15.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="424.4" y="318.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.zeroPaddingNumber (2 samples, 1.32%)</title><rect x="421.4" y="291.0" width="15.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="424.4" y="302.0"></text>
</g>
<g>
<title>java/text/DecimalFormat.format (2 samples, 1.32%)</title><rect x="421.4" y="275.0" width="15.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="424.4" y="286.0"></text>
</g>
<g>
<title>java/text/DecimalFormat.format (2 samples, 1.32%)</title><rect x="421.4" y="259.0" width="15.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="424.4" y="270.0"></text>
</g>
<g>
<title>java/text/DecimalFormat.subformat (2 samples, 1.32%)</title><rect x="421.4" y="243.0" width="15.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="424.4" y="254.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (1 samples, 0.66%)</title><rect x="429.2" y="227.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="432.2" y="238.0"></text>
</g>
<g>
<title>java/util/Calendar.setTime (2 samples, 1.32%)</title><rect x="437.0" y="307.0" width="15.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="440.0" y="318.0"></text>
</g>
<g>
<title>java/util/Calendar.setTimeInMillis (2 samples, 1.32%)</title><rect x="437.0" y="291.0" width="15.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="440.0" y="302.0"></text>
</g>
<g>
<title>java/util/GregorianCalendar.computeFields (2 samples, 1.32%)</title><rect x="437.0" y="275.0" width="15.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="440.0" y="286.0"></text>
</g>
<g>
<title>java/util/GregorianCalendar.computeFields (2 samples, 1.32%)</title><rect x="437.0" y="259.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="440.0" y="270.0"></text>
</g>
<g>
<title>sun/util/calendar/BaseCalendar.getFixedDate (1 samples, 0.66%)</title><rect x="437.0" y="243.0" width="7.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="440.0" y="254.0"></text>
</g>
<g>
<title>sun/util/calendar/ZoneInfo.getOffsets (1 samples, 0.66%)</title><rect x="444.7" y="243.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="447.7" y="254.0"></text>
</g>
<g>
<title>sun/util/calendar/ZoneInfo.getOffsets (1 samples, 0.66%)</title><rect x="444.7" y="227.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="447.7" y="238.0"></text>
</g>
<g>
<title>sun/util/calendar/ZoneInfo.getTransitionIndex (1 samples, 0.66%)</title><rect x="444.7" y="211.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="447.7" y="222.0"></text>
</g>
<g>
<title>java/util/Date.&lt;init&gt; (1 samples, 0.66%)</title><rect x="452.5" y="355.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="455.5" y="366.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.97%)</title><rect x="460.3" y="371.0" width="23.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="463.3" y="382.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.97%)</title><rect x="460.3" y="355.0" width="23.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="463.3" y="366.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (3 samples, 1.97%)</title><rect x="460.3" y="339.0" width="23.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="463.3" y="350.0">j..</text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.66%)</title><rect x="460.3" y="323.0" width="7.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="463.3" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 1.32%)</title><rect x="468.0" y="323.0" width="15.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="471.0" y="334.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.&lt;init&gt; (3 samples, 1.97%)</title><rect x="483.6" y="515.0" width="23.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="486.6" y="526.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (1 samples, 0.66%)</title><rect x="483.6" y="499.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="486.6" y="510.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.66%)</title><rect x="491.3" y="499.0" width="7.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="494.3" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.66%)</title><rect x="499.1" y="499.0" width="7.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="502.1" y="510.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.66%)</title><rect x="499.1" y="483.0" width="7.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="502.1" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_1 (1 samples, 0.66%)</title><rect x="506.8" y="531.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="509.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.66%)</title><rect x="506.8" y="515.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="509.8" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.66%)</title><rect x="514.6" y="563.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="517.6" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.66%)</title><rect x="514.6" y="547.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="517.6" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.66%)</title><rect x="514.6" y="531.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="517.6" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.66%)</title><rect x="514.6" y="515.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="517.6" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.66%)</title><rect x="514.6" y="499.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="517.6" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.66%)</title><rect x="514.6" y="483.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="517.6" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.66%)</title><rect x="514.6" y="467.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="517.6" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.66%)</title><rect x="514.6" y="451.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="517.6" y="462.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.66%)</title><rect x="514.6" y="435.0" width="7.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="517.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.put (6 samples, 3.95%)</title><rect x="522.4" y="563.0" width="46.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="525.4" y="574.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.upsert (6 samples, 3.95%)</title><rect x="522.4" y="547.0" width="46.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="525.4" y="558.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.upsert (6 samples, 3.95%)</title><rect x="522.4" y="531.0" width="46.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="525.4" y="542.0">ru/m..</text>
</g>
<g>
<title>java/util/TreeMap.put (6 samples, 3.95%)</title><rect x="522.4" y="515.0" width="46.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="525.4" y="526.0">java..</text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.66%)</title><rect x="522.4" y="499.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="525.4" y="510.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.66%)</title><rect x="522.4" y="483.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="525.4" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.66%)</title><rect x="522.4" y="467.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="525.4" y="478.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.66%)</title><rect x="522.4" y="451.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="525.4" y="462.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.66%)</title><rect x="522.4" y="435.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="525.4" y="446.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.66%)</title><rect x="522.4" y="419.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="525.4" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 1.32%)</title><rect x="530.1" y="499.0" width="15.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="533.1" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.66%)</title><rect x="537.9" y="483.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="540.9" y="494.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.66%)</title><rect x="537.9" y="467.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="540.9" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.66%)</title><rect x="545.7" y="499.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="548.7" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (2 samples, 1.32%)</title><rect x="553.4" y="499.0" width="15.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="556.4" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateLeft (1 samples, 0.66%)</title><rect x="553.4" y="483.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="556.4" y="494.0"></text>
</g>
<g>
<title>g1_post_barrier_slow (1 samples, 0.66%)</title><rect x="553.4" y="467.0" width="7.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="556.4" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (1 samples, 0.66%)</title><rect x="561.2" y="483.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="564.2" y="494.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.66%)</title><rect x="568.9" y="595.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="571.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.66%)</title><rect x="568.9" y="579.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="571.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.66%)</title><rect x="568.9" y="563.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="571.9" y="574.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.66%)</title><rect x="568.9" y="547.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="571.9" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.66%)</title><rect x="568.9" y="531.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="571.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 1.32%)</title><rect x="576.7" y="627.0" width="15.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="579.7" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 1.97%)</title><rect x="592.2" y="627.0" width="23.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="595.2" y="638.0">o..</text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 1.97%)</title><rect x="592.2" y="611.0" width="23.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="595.2" y="622.0">j..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 1.32%)</title><rect x="615.5" y="627.0" width="15.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="618.5" y="638.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.66%)</title><rect x="623.3" y="611.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="626.3" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.66%)</title><rect x="623.3" y="595.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="626.3" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (12 samples, 7.89%)</title><rect x="631.1" y="643.0" width="93.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="634.1" y="654.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (11 samples, 7.24%)</title><rect x="638.8" y="627.0" width="85.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="641.8" y="638.0">one/nio/ne..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (6 samples, 3.95%)</title><rect x="654.3" y="611.0" width="46.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="657.3" y="622.0">Java..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.66%)</title><rect x="669.9" y="595.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="672.9" y="606.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.66%)</title><rect x="677.6" y="595.0" width="7.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="680.6" y="606.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 1.32%)</title><rect x="685.4" y="595.0" width="15.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="688.4" y="606.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.66%)</title><rect x="700.9" y="611.0" width="7.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="703.9" y="622.0"></text>
</g>
<g>
<title>__recv (2 samples, 1.32%)</title><rect x="708.7" y="611.0" width="15.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="711.7" y="622.0"></text>
</g>
<g>
<title>start_thread (60 samples, 39.47%)</title><rect x="724.2" y="691.0" width="465.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="727.2" y="702.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (60 samples, 39.47%)</title><rect x="724.2" y="675.0" width="465.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="727.2" y="686.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (60 samples, 39.47%)</title><rect x="724.2" y="659.0" width="465.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="727.2" y="670.0">Thread::call_run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (60 samples, 39.47%)</title><rect x="724.2" y="643.0" width="465.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="727.2" y="654.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (60 samples, 39.47%)</title><rect x="724.2" y="627.0" width="465.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="727.2" y="638.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (60 samples, 39.47%)</title><rect x="724.2" y="611.0" width="465.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="727.2" y="622.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (60 samples, 39.47%)</title><rect x="724.2" y="595.0" width="465.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="727.2" y="606.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (60 samples, 39.47%)</title><rect x="724.2" y="579.0" width="465.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="727.2" y="590.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool..</text>
</g>
<g>
<title>Compile::Code_Gen() (35 samples, 23.03%)</title><rect x="724.2" y="563.0" width="271.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="727.2" y="574.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.66%)</title><rect x="724.2" y="547.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="727.2" y="558.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.66%)</title><rect x="724.2" y="531.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="727.2" y="542.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.66%)</title><rect x="724.2" y="515.0" width="7.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="727.2" y="526.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.66%)</title><rect x="724.2" y="499.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="727.2" y="510.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.32%)</title><rect x="732.0" y="547.0" width="15.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="735.0" y="558.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.66%)</title><rect x="732.0" y="531.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="735.0" y="542.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.66%)</title><rect x="739.7" y="531.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="742.7" y="542.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.66%)</title><rect x="739.7" y="515.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="742.7" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 3.95%)</title><rect x="747.5" y="547.0" width="46.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="750.5" y="558.0">Phas..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 3.95%)</title><rect x="747.5" y="531.0" width="46.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="750.5" y="542.0">Phas..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.66%)</title><rect x="755.3" y="515.0" width="7.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="758.3" y="526.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.66%)</title><rect x="755.3" y="499.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="758.3" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (3 samples, 1.97%)</title><rect x="763.0" y="515.0" width="23.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="766.0" y="526.0">P..</text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (2 samples, 1.32%)</title><rect x="770.8" y="499.0" width="15.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="773.8" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (1 samples, 0.66%)</title><rect x="778.6" y="483.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="781.6" y="494.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.66%)</title><rect x="786.3" y="515.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="789.3" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (25 samples, 16.45%)</title><rect x="794.1" y="547.0" width="194.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="797.1" y="558.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.66%)</title><rect x="794.1" y="531.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="797.1" y="542.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.66%)</title><rect x="801.8" y="531.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="804.8" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.32%)</title><rect x="809.6" y="531.0" width="15.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="812.6" y="542.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.66%)</title><rect x="809.6" y="515.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="812.6" y="526.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.66%)</title><rect x="817.4" y="515.0" width="7.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="820.4" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.32%)</title><rect x="825.1" y="531.0" width="15.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="828.1" y="542.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.66%)</title><rect x="832.9" y="515.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="835.9" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 1.32%)</title><rect x="840.7" y="531.0" width="15.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="843.7" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 1.97%)</title><rect x="856.2" y="531.0" width="23.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="859.2" y="542.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.32%)</title><rect x="856.2" y="515.0" width="15.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="859.2" y="526.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.66%)</title><rect x="863.9" y="499.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="866.9" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.66%)</title><rect x="871.7" y="515.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="874.7" y="526.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.66%)</title><rect x="871.7" y="499.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="874.7" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.66%)</title><rect x="879.5" y="531.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="882.5" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 1.32%)</title><rect x="887.2" y="531.0" width="15.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="890.2" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.66%)</title><rect x="902.8" y="531.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="905.8" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 3.29%)</title><rect x="910.5" y="531.0" width="38.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="913.5" y="542.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.66%)</title><rect x="926.1" y="515.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="929.1" y="526.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (2 samples, 1.32%)</title><rect x="933.8" y="515.0" width="15.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="936.8" y="526.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.66%)</title><rect x="949.3" y="531.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="952.3" y="542.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.66%)</title><rect x="949.3" y="515.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="952.3" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.66%)</title><rect x="949.3" y="499.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="952.3" y="510.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.66%)</title><rect x="957.1" y="531.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="960.1" y="542.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.66%)</title><rect x="957.1" y="515.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="960.1" y="526.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.97%)</title><rect x="964.9" y="531.0" width="23.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="967.9" y="542.0">P..</text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.66%)</title><rect x="988.2" y="547.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="991.2" y="558.0"></text>
</g>
<g>
<title>Compile::Optimize() (17 samples, 11.18%)</title><rect x="995.9" y="563.0" width="132.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="998.9" y="574.0">Compile::Optimiz..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.66%)</title><rect x="995.9" y="547.0" width="7.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="998.9" y="558.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.66%)</title><rect x="995.9" y="531.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="998.9" y="542.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.66%)</title><rect x="995.9" y="515.0" width="7.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="998.9" y="526.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (8 samples, 5.26%)</title><rect x="1003.7" y="547.0" width="62.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1006.7" y="558.0">Compil..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (8 samples, 5.26%)</title><rect x="1003.7" y="531.0" width="62.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1006.7" y="542.0">PhaseI..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.66%)</title><rect x="1003.7" y="515.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1006.7" y="526.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.66%)</title><rect x="1003.7" y="499.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1006.7" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.66%)</title><rect x="1003.7" y="483.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1006.7" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.66%)</title><rect x="1011.4" y="515.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1014.4" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.66%)</title><rect x="1019.2" y="515.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1022.2" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.66%)</title><rect x="1019.2" y="499.0" width="7.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1022.2" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.66%)</title><rect x="1019.2" y="483.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1022.2" y="494.0"></text>
</g>
<g>
<title>Compile::can_alias(TypePtr const*, int) (1 samples, 0.66%)</title><rect x="1019.2" y="467.0" width="7.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1022.2" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.66%)</title><rect x="1027.0" y="515.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1030.0" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.66%)</title><rect x="1027.0" y="499.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1030.0" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 1.97%)</title><rect x="1034.7" y="515.0" width="23.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1037.7" y="526.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (2 samples, 1.32%)</title><rect x="1034.7" y="499.0" width="15.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.7" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::identical_backtoback_ifs(Node*) (1 samples, 0.66%)</title><rect x="1042.5" y="483.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1045.5" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.66%)</title><rect x="1050.3" y="499.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1053.3" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.66%)</title><rect x="1050.3" y="483.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1053.3" y="494.0"></text>
</g>
<g>
<title>IdealLoopTree::is_member(IdealLoopTree const*) const (1 samples, 0.66%)</title><rect x="1050.3" y="467.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1053.3" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.66%)</title><rect x="1058.0" y="515.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.0" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.66%)</title><rect x="1058.0" y="499.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.0" y="510.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.66%)</title><rect x="1058.0" y="483.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.0" y="494.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.66%)</title><rect x="1058.0" y="467.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1061.0" y="478.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 1.97%)</title><rect x="1065.8" y="547.0" width="23.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1068.8" y="558.0">P..</text>
</g>
<g>
<title>LShiftLNode::Value(PhaseGVN*) const (1 samples, 0.66%)</title><rect x="1073.6" y="531.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1076.6" y="542.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.66%)</title><rect x="1081.3" y="531.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.3" y="542.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.66%)</title><rect x="1081.3" y="515.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1084.3" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (4 samples, 2.63%)</title><rect x="1089.1" y="547.0" width="31.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1092.1" y="558.0">Ph..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.66%)</title><rect x="1089.1" y="531.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.1" y="542.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.66%)</title><rect x="1089.1" y="515.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.1" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*&amp;) (1 samples, 0.66%)</title><rect x="1089.1" y="499.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.1" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::lazy_replace(Node*, Node*) (1 samples, 0.66%)</title><rect x="1089.1" y="483.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1092.1" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.66%)</title><rect x="1089.1" y="467.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1092.1" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.66%)</title><rect x="1089.1" y="451.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1092.1" y="462.0"></text>
</g>
<g>
<title>IfNode::pinned() const (1 samples, 0.66%)</title><rect x="1096.8" y="531.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1099.8" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.66%)</title><rect x="1104.6" y="531.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.6" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.66%)</title><rect x="1104.6" y="515.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.6" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.66%)</title><rect x="1104.6" y="499.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.6" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.66%)</title><rect x="1112.4" y="531.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.4" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.66%)</title><rect x="1112.4" y="515.0" width="7.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.4" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.66%)</title><rect x="1112.4" y="499.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.4" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.66%)</title><rect x="1112.4" y="483.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.4" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.66%)</title><rect x="1120.1" y="547.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.1" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.66%)</title><rect x="1120.1" y="531.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.1" y="542.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.66%)</title><rect x="1120.1" y="515.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1123.1" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.66%)</title><rect x="1120.1" y="499.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1123.1" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.66%)</title><rect x="1120.1" y="483.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1123.1" y="494.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.66%)</title><rect x="1120.1" y="467.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.1" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 5.26%)</title><rect x="1127.9" y="563.0" width="62.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.9" y="574.0">ParseG..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 5.26%)</title><rect x="1127.9" y="547.0" width="62.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.9" y="558.0">Parse:..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 5.26%)</title><rect x="1127.9" y="531.0" width="62.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1130.9" y="542.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 5.26%)</title><rect x="1127.9" y="515.0" width="62.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.9" y="526.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 5.26%)</title><rect x="1127.9" y="499.0" width="62.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1130.9" y="510.0">Parse:..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 4.61%)</title><rect x="1127.9" y="483.0" width="54.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.9" y="494.0">Parse..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.95%)</title><rect x="1127.9" y="467.0" width="46.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.9" y="478.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.95%)</title><rect x="1127.9" y="451.0" width="46.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.9" y="462.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.95%)</title><rect x="1127.9" y="435.0" width="46.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.9" y="446.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.95%)</title><rect x="1127.9" y="419.0" width="46.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.9" y="430.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.95%)</title><rect x="1127.9" y="403.0" width="46.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.9" y="414.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.95%)</title><rect x="1127.9" y="387.0" width="46.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.9" y="398.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.66%)</title><rect x="1127.9" y="371.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.9" y="382.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.66%)</title><rect x="1127.9" y="355.0" width="7.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.9" y="366.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.66%)</title><rect x="1127.9" y="339.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.9" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.66%)</title><rect x="1127.9" y="323.0" width="7.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.9" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.66%)</title><rect x="1127.9" y="307.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.9" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.66%)</title><rect x="1127.9" y="291.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.9" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 3.29%)</title><rect x="1135.7" y="371.0" width="38.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.7" y="382.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 3.29%)</title><rect x="1135.7" y="355.0" width="38.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.7" y="366.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 3.29%)</title><rect x="1135.7" y="339.0" width="38.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.7" y="350.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 3.29%)</title><rect x="1135.7" y="323.0" width="38.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.7" y="334.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 3.29%)</title><rect x="1135.7" y="307.0" width="38.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.7" y="318.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.63%)</title><rect x="1135.7" y="291.0" width="31.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.7" y="302.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.63%)</title><rect x="1135.7" y="275.0" width="31.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.7" y="286.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.63%)</title><rect x="1135.7" y="259.0" width="31.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.7" y="270.0">Pa..</text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.66%)</title><rect x="1135.7" y="243.0" width="7.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.7" y="254.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.66%)</title><rect x="1135.7" y="227.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.7" y="238.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.66%)</title><rect x="1135.7" y="211.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.7" y="222.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.66%)</title><rect x="1135.7" y="195.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.7" y="206.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.66%)</title><rect x="1135.7" y="179.0" width="7.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.7" y="190.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.66%)</title><rect x="1135.7" y="163.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.32%)</title><rect x="1143.4" y="243.0" width="15.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.32%)</title><rect x="1143.4" y="227.0" width="15.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.32%)</title><rect x="1143.4" y="211.0" width="15.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 1.32%)</title><rect x="1143.4" y="195.0" width="15.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.66%)</title><rect x="1143.4" y="179.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.4" y="190.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.66%)</title><rect x="1143.4" y="163.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.4" y="174.0"></text>
</g>
<g>
<title>ConLNode::Opcode() const (1 samples, 0.66%)</title><rect x="1143.4" y="147.0" width="7.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.66%)</title><rect x="1151.2" y="179.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.2" y="190.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.66%)</title><rect x="1151.2" y="163.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.2" y="174.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.66%)</title><rect x="1151.2" y="147.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.2" y="158.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.66%)</title><rect x="1151.2" y="131.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.2" y="142.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.66%)</title><rect x="1151.2" y="115.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.2" y="126.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.66%)</title><rect x="1151.2" y="99.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.2" y="110.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.66%)</title><rect x="1158.9" y="243.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.9" y="254.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.66%)</title><rect x="1158.9" y="227.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.9" y="238.0"></text>
</g>
<g>
<title>Type::hash() const (1 samples, 0.66%)</title><rect x="1158.9" y="211.0" width="7.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.66%)</title><rect x="1166.7" y="291.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.7" y="302.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.66%)</title><rect x="1166.7" y="275.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.7" y="286.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.66%)</title><rect x="1166.7" y="259.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.7" y="270.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.66%)</title><rect x="1166.7" y="243.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.7" y="254.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.66%)</title><rect x="1166.7" y="227.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.7" y="238.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.66%)</title><rect x="1166.7" y="211.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.7" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.66%)</title><rect x="1174.5" y="467.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.66%)</title><rect x="1174.5" y="451.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.5" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.66%)</title><rect x="1174.5" y="435.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.66%)</title><rect x="1174.5" y="419.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.66%)</title><rect x="1174.5" y="403.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.66%)</title><rect x="1174.5" y="387.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.66%)</title><rect x="1174.5" y="371.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.5" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.66%)</title><rect x="1174.5" y="355.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.5" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.66%)</title><rect x="1174.5" y="339.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.66%)</title><rect x="1174.5" y="323.0" width="7.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.66%)</title><rect x="1174.5" y="307.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.66%)</title><rect x="1174.5" y="291.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.66%)</title><rect x="1174.5" y="275.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.5" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.66%)</title><rect x="1174.5" y="259.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.5" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.66%)</title><rect x="1174.5" y="243.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.66%)</title><rect x="1174.5" y="227.0" width="7.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.66%)</title><rect x="1174.5" y="211.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.66%)</title><rect x="1174.5" y="195.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.66%)</title><rect x="1174.5" y="179.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.5" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.66%)</title><rect x="1174.5" y="163.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.5" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.66%)</title><rect x="1174.5" y="147.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.66%)</title><rect x="1174.5" y="131.0" width="7.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.66%)</title><rect x="1174.5" y="115.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.66%)</title><rect x="1174.5" y="99.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.5" y="110.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.66%)</title><rect x="1174.5" y="83.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.5" y="94.0"></text>
</g>
<g>
<title>LoadRangeNode::Ideal(PhaseGVN*, bool) (1 samples, 0.66%)</title><rect x="1174.5" y="67.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.5" y="78.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.66%)</title><rect x="1174.5" y="51.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.5" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.66%)</title><rect x="1174.5" y="35.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.66%)</title><rect x="1182.2" y="483.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.66%)</title><rect x="1182.2" y="467.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="478.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.66%)</title><rect x="1182.2" y="451.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="462.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.66%)</title><rect x="1182.2" y="435.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="446.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.66%)</title><rect x="1182.2" y="419.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="430.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.66%)</title><rect x="1182.2" y="403.0" width="7.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.2" y="414.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.66%)</title><rect x="1182.2" y="387.0" width="7.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.2" y="398.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.66%)</title><rect x="1182.2" y="371.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="382.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.66%)</title><rect x="1182.2" y="355.0" width="7.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="366.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.66%)</title><rect x="1182.2" y="339.0" width="7.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.2" y="350.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.66%)</title><rect x="1182.2" y="323.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="334.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.66%)</title><rect x="1182.2" y="307.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="318.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.66%)</title><rect x="1182.2" y="291.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="302.0"></text>
</g>
</g>
</svg>
