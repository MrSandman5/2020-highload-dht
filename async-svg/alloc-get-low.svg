<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1045"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1045"> </text>
<g id="frames">
<g>
<title>all (10,617 samples, 100.00%)</title><rect x="10.0" y="1011.0" width="1180.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="13.0" y="1022.0">all</text>
</g>
<g>
<title>[JMX server connection timeout 35 tid=7200] (17 samples, 0.16%)</title><rect x="10.0" y="995.0" width="1.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.run (17 samples, 0.16%)</title><rect x="10.0" y="979.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin$Timeout.run (17 samples, 0.16%)</title><rect x="10.0" y="963.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin.logtime (17 samples, 0.16%)</title><rect x="10.0" y="947.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1773364394.linkToTargetMethod (17 samples, 0.16%)</title><rect x="10.0" y="931.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1675904620.invoke (17 samples, 0.16%)</title><rect x="10.0" y="915.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (17 samples, 0.16%)</title><rect x="10.0" y="899.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (17 samples, 0.16%)</title><rect x="10.0" y="883.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (17 samples, 0.16%)</title><rect x="10.0" y="867.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>byte[] (17 samples, 0.16%)</title><rect x="10.0" y="851.0" width="1.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=6986] (1,131 samples, 10.65%)</title><rect x="11.9" y="995.0" width="125.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="14.9" y="1006.0">[NIO Selector #..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,131 samples, 10.65%)</title><rect x="11.9" y="979.0" width="125.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.9" y="990.0">one/nio/server/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (14 samples, 0.13%)</title><rect x="11.9" y="963.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="14.9" y="974.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (14 samples, 0.13%)</title><rect x="11.9" y="947.0" width="1.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="14.9" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,117 samples, 10.52%)</title><rect x="13.4" y="963.0" width="124.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="16.4" y="974.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,117 samples, 10.52%)</title><rect x="13.4" y="947.0" width="124.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.4" y="958.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,117 samples, 10.52%)</title><rect x="13.4" y="931.0" width="124.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.4" y="942.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,111 samples, 10.46%)</title><rect x="13.4" y="915.0" width="123.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.4" y="926.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,111 samples, 10.46%)</title><rect x="13.4" y="899.0" width="123.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.4" y="910.0">one/nio/http/Ht..</text>
</g>
<g>
<title>RequestHandler0_response.handleRequest (1,111 samples, 10.46%)</title><rect x="13.4" y="883.0" width="123.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.4" y="894.0">RequestHandler0..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (1,109 samples, 10.45%)</title><rect x="13.7" y="867.0" width="123.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.7" y="878.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (16 samples, 0.15%)</title><rect x="13.7" y="851.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.7" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (16 samples, 0.15%)</title><rect x="13.7" y="835.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.7" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (16 samples, 0.15%)</title><rect x="13.7" y="819.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="16.7" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (16 samples, 0.15%)</title><rect x="13.7" y="803.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.7" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (16 samples, 0.15%)</title><rect x="13.7" y="787.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.7" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (16 samples, 0.15%)</title><rect x="13.7" y="771.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.7" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (16 samples, 0.15%)</title><rect x="13.7" y="755.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.7" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (16 samples, 0.15%)</title><rect x="13.7" y="739.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.7" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (16 samples, 0.15%)</title><rect x="13.7" y="723.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.7" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (14 samples, 0.13%)</title><rect x="13.9" y="707.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="16.9" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (10 samples, 0.09%)</title><rect x="13.9" y="691.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.9" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (10 samples, 0.09%)</title><rect x="13.9" y="675.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.9" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 0.05%)</title><rect x="14.1" y="659.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.1" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.05%)</title><rect x="14.1" y="643.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="17.1" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.05%)</title><rect x="14.1" y="627.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="17.1" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.05%)</title><rect x="14.1" y="611.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.1" y="622.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.05%)</title><rect x="14.1" y="595.0" width="0.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="17.1" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (3 samples, 0.03%)</title><rect x="14.7" y="659.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.7" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.03%)</title><rect x="14.7" y="643.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="17.7" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="14.7" y="627.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.7" y="638.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="14.7" y="611.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="17.7" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.convertToBytes (4 samples, 0.04%)</title><rect x="15.0" y="691.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.0" y="702.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.04%)</title><rect x="15.0" y="675.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.0" y="686.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (4 samples, 0.04%)</title><rect x="15.0" y="659.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.0" y="670.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (4 samples, 0.04%)</title><rect x="15.0" y="643.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.0" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.04%)</title><rect x="15.0" y="627.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.0" y="638.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.04%)</title><rect x="15.0" y="611.0" width="0.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="18.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.get (1,092 samples, 10.29%)</title><rect x="15.6" y="851.0" width="121.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.6" y="862.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,091 samples, 10.28%)</title><rect x="15.7" y="835.0" width="121.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.7" y="846.0">ru/mail/polis/d..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (106 samples, 1.00%)</title><rect x="15.7" y="819.0" width="11.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.7" y="830.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (106 samples, 1.00%)</title><rect x="15.7" y="803.0" width="11.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="18.7" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (106 samples, 1.00%)</title><rect x="15.7" y="787.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.7" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (106 samples, 1.00%)</title><rect x="15.7" y="771.0" width="11.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.7" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (106 samples, 1.00%)</title><rect x="15.7" y="755.0" width="11.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="18.7" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (96 samples, 0.90%)</title><rect x="15.7" y="739.0" width="10.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.7" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (45 samples, 0.42%)</title><rect x="15.7" y="723.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="18.7" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (45 samples, 0.42%)</title><rect x="15.7" y="707.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="18.7" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (45 samples, 0.42%)</title><rect x="15.7" y="691.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.7" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (45 samples, 0.42%)</title><rect x="15.7" y="675.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.7" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (45 samples, 0.42%)</title><rect x="15.7" y="659.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.7" y="670.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (45 samples, 0.42%)</title><rect x="15.7" y="643.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.7" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (45 samples, 0.42%)</title><rect x="15.7" y="627.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.7" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (45 samples, 0.42%)</title><rect x="15.7" y="611.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (45 samples, 0.42%)</title><rect x="15.7" y="595.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.7" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (45 samples, 0.42%)</title><rect x="15.7" y="579.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.7" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (19 samples, 0.18%)</title><rect x="15.7" y="563.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="18.7" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (19 samples, 0.18%)</title><rect x="15.7" y="547.0" width="2.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="18.7" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (26 samples, 0.24%)</title><rect x="17.8" y="563.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.8" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (26 samples, 0.24%)</title><rect x="17.8" y="547.0" width="2.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="20.8" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (51 samples, 0.48%)</title><rect x="20.7" y="723.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.7" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (51 samples, 0.48%)</title><rect x="20.7" y="707.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.7" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (51 samples, 0.48%)</title><rect x="20.7" y="691.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.7" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (51 samples, 0.48%)</title><rect x="20.7" y="675.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.7" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (51 samples, 0.48%)</title><rect x="20.7" y="659.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.7" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (51 samples, 0.48%)</title><rect x="20.7" y="643.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.7" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (40 samples, 0.38%)</title><rect x="20.7" y="627.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.7" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (40 samples, 0.38%)</title><rect x="20.7" y="611.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (40 samples, 0.38%)</title><rect x="20.7" y="595.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.7" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (40 samples, 0.38%)</title><rect x="20.7" y="579.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.7" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (11 samples, 0.10%)</title><rect x="20.7" y="563.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.7" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.10%)</title><rect x="20.7" y="547.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="23.7" y="558.0"></text>
</g>
<g>
<title>byte[] (11 samples, 0.10%)</title><rect x="20.7" y="531.0" width="1.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="23.7" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (24 samples, 0.23%)</title><rect x="21.9" y="563.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.9" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (24 samples, 0.23%)</title><rect x="21.9" y="547.0" width="2.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="24.9" y="558.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (11 samples, 0.10%)</title><rect x="25.1" y="627.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.1" y="638.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (11 samples, 0.10%)</title><rect x="25.1" y="611.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="28.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (11 samples, 0.10%)</title><rect x="25.1" y="595.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (11 samples, 0.10%)</title><rect x="25.1" y="579.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (11 samples, 0.10%)</title><rect x="25.1" y="563.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.1" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="25.1" y="547.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.1" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (4 samples, 0.04%)</title><rect x="25.1" y="531.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="28.1" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (7 samples, 0.07%)</title><rect x="25.6" y="547.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.6" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7 samples, 0.07%)</title><rect x="25.6" y="531.0" width="0.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="28.6" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$117/473479162.apply (10 samples, 0.09%)</title><rect x="26.3" y="739.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.3" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (10 samples, 0.09%)</title><rect x="26.3" y="723.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="29.3" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="26.3" y="707.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.3" y="718.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (4 samples, 0.04%)</title><rect x="26.3" y="691.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="29.3" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6 samples, 0.06%)</title><rect x="26.8" y="707.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.8" y="718.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6 samples, 0.06%)</title><rect x="26.8" y="691.0" width="0.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="29.8" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.iterator (981 samples, 9.24%)</title><rect x="27.9" y="819.0" width="109.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="30.9" y="830.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.cellIterator (980 samples, 9.23%)</title><rect x="28.0" y="803.0" width="108.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.0" y="814.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.freshCellIterators (971 samples, 9.15%)</title><rect x="28.6" y="787.0" width="107.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="31.6" y="798.0">ru/mail/polis..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (265 samples, 2.50%)</title><rect x="28.6" y="771.0" width="29.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="31.6" y="782.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (265 samples, 2.50%)</title><rect x="28.6" y="755.0" width="29.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.6" y="766.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (7 samples, 0.07%)</title><rect x="28.6" y="739.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.6" y="750.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (7 samples, 0.07%)</title><rect x="28.6" y="723.0" width="0.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="31.6" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (255 samples, 2.40%)</title><rect x="29.7" y="739.0" width="28.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.7" y="750.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (255 samples, 2.40%)</title><rect x="29.7" y="723.0" width="28.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="32.7" y="734.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (5 samples, 0.05%)</title><rect x="29.7" y="707.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.7" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.05%)</title><rect x="29.7" y="691.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.7" y="702.0"></text>
</g>
<g>
<title>java.lang.Object[] (5 samples, 0.05%)</title><rect x="29.7" y="675.0" width="0.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="32.7" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (250 samples, 2.35%)</title><rect x="30.2" y="707.0" width="27.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.2" y="718.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (250 samples, 2.35%)</title><rect x="30.2" y="691.0" width="27.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="33.2" y="702.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (250 samples, 2.35%)</title><rect x="30.2" y="675.0" width="27.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.2" y="686.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (250 samples, 2.35%)</title><rect x="30.2" y="659.0" width="27.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.2" y="670.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (188 samples, 1.77%)</title><rect x="30.2" y="643.0" width="20.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="33.2" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (186 samples, 1.75%)</title><rect x="30.5" y="627.0" width="20.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (186 samples, 1.75%)</title><rect x="30.5" y="611.0" width="20.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (186 samples, 1.75%)</title><rect x="30.5" y="595.0" width="20.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.5" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (38 samples, 0.36%)</title><rect x="30.5" y="579.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.5" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (38 samples, 0.36%)</title><rect x="30.5" y="563.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.5" y="574.0"></text>
</g>
<g>
<title>byte[] (38 samples, 0.36%)</title><rect x="30.5" y="547.0" width="4.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="33.5" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (111 samples, 1.05%)</title><rect x="34.7" y="579.0" width="12.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="37.7" y="590.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (111 samples, 1.05%)</title><rect x="34.7" y="563.0" width="12.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="37.7" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Cell (9 samples, 0.08%)</title><rect x="47.0" y="579.0" width="1.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="50.0" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Value (12 samples, 0.11%)</title><rect x="48.0" y="579.0" width="1.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="51.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (16 samples, 0.15%)</title><rect x="49.3" y="579.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.3" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (16 samples, 0.15%)</title><rect x="49.3" y="563.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="52.3" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (16 samples, 0.15%)</title><rect x="49.3" y="547.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="52.3" y="558.0"></text>
</g>
<g>
<title>byte[] (16 samples, 0.15%)</title><rect x="49.3" y="531.0" width="1.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="52.3" y="542.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (62 samples, 0.58%)</title><rect x="51.1" y="643.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.1" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (62 samples, 0.58%)</title><rect x="51.1" y="627.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="54.1" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (62 samples, 0.58%)</title><rect x="51.1" y="611.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="54.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (62 samples, 0.58%)</title><rect x="51.1" y="595.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (62 samples, 0.58%)</title><rect x="51.1" y="579.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="54.1" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (35 samples, 0.33%)</title><rect x="51.1" y="563.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="54.1" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (35 samples, 0.33%)</title><rect x="51.1" y="547.0" width="3.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="54.1" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (22 samples, 0.21%)</title><rect x="55.0" y="563.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="58.0" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (22 samples, 0.21%)</title><rect x="55.0" y="547.0" width="2.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="58.0" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="57.5" y="563.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.5" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (4 samples, 0.04%)</title><rect x="57.5" y="547.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.5" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (4 samples, 0.04%)</title><rect x="57.5" y="531.0" width="0.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="60.5" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (687 samples, 6.47%)</title><rect x="58.0" y="771.0" width="76.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="61.0" y="782.0">java/uti..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (687 samples, 6.47%)</title><rect x="58.0" y="755.0" width="76.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="61.0" y="766.0">java/lan..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$109/352000052.accept (687 samples, 6.47%)</title><rect x="58.0" y="739.0" width="76.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="61.0" y="750.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.lambda$freshCellIterators$6 (687 samples, 6.47%)</title><rect x="58.0" y="723.0" width="76.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.0" y="734.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.iterator (687 samples, 6.47%)</title><rect x="58.0" y="707.0" width="76.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.0" y="718.0">ru/mail/..</text>
</g>
<g>
<title>ru.mail.polis.dao.impl.tables.SSTable$1 (8 samples, 0.08%)</title><rect x="58.0" y="691.0" width="0.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="61.0" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt; (679 samples, 6.40%)</title><rect x="58.9" y="691.0" width="75.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="61.9" y="702.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getPosition (679 samples, 6.40%)</title><rect x="58.9" y="675.0" width="75.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.9" y="686.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.keyAt (679 samples, 6.40%)</title><rect x="58.9" y="659.0" width="75.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.9" y="670.0">ru/mail/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (280 samples, 2.64%)</title><rect x="58.9" y="643.0" width="31.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="61.9" y="654.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (280 samples, 2.64%)</title><rect x="58.9" y="627.0" width="31.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="61.9" y="638.0">ja..</text>
</g>
<g>
<title>byte[] (280 samples, 2.64%)</title><rect x="58.9" y="611.0" width="31.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="61.9" y="622.0">by..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (278 samples, 2.62%)</title><rect x="90.0" y="643.0" width="30.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.0" y="654.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (278 samples, 2.62%)</title><rect x="90.0" y="627.0" width="30.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="93.0" y="638.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (121 samples, 1.14%)</title><rect x="120.9" y="643.0" width="13.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="123.9" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (121 samples, 1.14%)</title><rect x="120.9" y="627.0" width="13.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="123.9" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (121 samples, 1.14%)</title><rect x="120.9" y="611.0" width="13.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="123.9" y="622.0"></text>
</g>
<g>
<title>byte[] (121 samples, 1.14%)</title><rect x="120.9" y="595.0" width="13.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="123.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (19 samples, 0.18%)</title><rect x="134.4" y="771.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="137.4" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (19 samples, 0.18%)</title><rect x="134.4" y="755.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="137.4" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (19 samples, 0.18%)</title><rect x="134.4" y="739.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="137.4" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (14 samples, 0.13%)</title><rect x="134.4" y="723.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="137.4" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (14 samples, 0.13%)</title><rect x="134.4" y="707.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="137.4" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (14 samples, 0.13%)</title><rect x="134.4" y="691.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="137.4" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (14 samples, 0.13%)</title><rect x="134.4" y="675.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="137.4" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (14 samples, 0.13%)</title><rect x="134.4" y="659.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="137.4" y="670.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (14 samples, 0.13%)</title><rect x="134.4" y="643.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="137.4" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (14 samples, 0.13%)</title><rect x="134.4" y="627.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="137.4" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (14 samples, 0.13%)</title><rect x="134.4" y="611.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="137.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (14 samples, 0.13%)</title><rect x="134.4" y="595.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="137.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (14 samples, 0.13%)</title><rect x="134.4" y="579.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="137.4" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6 samples, 0.06%)</title><rect x="134.4" y="563.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="137.4" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (6 samples, 0.06%)</title><rect x="134.4" y="547.0" width="0.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="137.4" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (8 samples, 0.08%)</title><rect x="135.0" y="563.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="138.0" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (8 samples, 0.08%)</title><rect x="135.0" y="547.0" width="0.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="138.0" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (5 samples, 0.05%)</title><rect x="135.9" y="723.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="138.9" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (5 samples, 0.05%)</title><rect x="135.9" y="707.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="138.9" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (5 samples, 0.05%)</title><rect x="135.9" y="691.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="138.9" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (5 samples, 0.05%)</title><rect x="135.9" y="675.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="138.9" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5 samples, 0.05%)</title><rect x="135.9" y="659.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="138.9" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5 samples, 0.05%)</title><rect x="135.9" y="643.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="138.9" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (4 samples, 0.04%)</title><rect x="135.9" y="627.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="138.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (4 samples, 0.04%)</title><rect x="135.9" y="611.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="138.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (4 samples, 0.04%)</title><rect x="135.9" y="595.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="138.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (4 samples, 0.04%)</title><rect x="135.9" y="579.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="138.9" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (3 samples, 0.03%)</title><rect x="136.0" y="563.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="139.0" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.03%)</title><rect x="136.0" y="547.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="139.0" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="136.0" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="139.0" y="542.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="136.0" y="515.0" width="0.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="139.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.iterator (4 samples, 0.04%)</title><rect x="136.5" y="787.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="139.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.04%)</title><rect x="136.9" y="915.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="139.9" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="137.0" y="899.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="140.0" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="137.0" y="883.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="140.0" y="894.0"></text>
</g>
<g>
<title>char[] (3 samples, 0.03%)</title><rect x="137.0" y="867.0" width="0.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="140.0" y="878.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=6987] (1,170 samples, 11.02%)</title><rect x="137.6" y="995.0" width="130.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="140.6" y="1006.0">[NIO Selector #1..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,170 samples, 11.02%)</title><rect x="137.6" y="979.0" width="130.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="140.6" y="990.0">one/nio/server/S..</text>
</g>
<g>
<title>one/nio/net/Session.process (1,170 samples, 11.02%)</title><rect x="137.6" y="963.0" width="130.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="140.6" y="974.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,170 samples, 11.02%)</title><rect x="137.6" y="947.0" width="130.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="140.6" y="958.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,170 samples, 11.02%)</title><rect x="137.6" y="931.0" width="130.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="140.6" y="942.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,157 samples, 10.90%)</title><rect x="137.6" y="915.0" width="128.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="140.6" y="926.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,157 samples, 10.90%)</title><rect x="137.6" y="899.0" width="128.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="140.6" y="910.0">one/nio/http/Htt..</text>
</g>
<g>
<title>RequestHandler0_response.handleRequest (1,157 samples, 10.90%)</title><rect x="137.6" y="883.0" width="128.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="140.6" y="894.0">RequestHandler0_..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3 samples, 0.03%)</title><rect x="137.6" y="867.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="140.6" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (3 samples, 0.03%)</title><rect x="137.6" y="851.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="140.6" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (1,154 samples, 10.87%)</title><rect x="137.9" y="867.0" width="128.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="140.9" y="878.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (12 samples, 0.11%)</title><rect x="137.9" y="851.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="140.9" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (12 samples, 0.11%)</title><rect x="137.9" y="835.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="140.9" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (12 samples, 0.11%)</title><rect x="137.9" y="819.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="140.9" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (11 samples, 0.10%)</title><rect x="138.0" y="803.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="141.0" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (11 samples, 0.10%)</title><rect x="138.0" y="787.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="141.0" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (11 samples, 0.10%)</title><rect x="138.0" y="771.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="141.0" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (11 samples, 0.10%)</title><rect x="138.0" y="755.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="141.0" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (11 samples, 0.10%)</title><rect x="138.0" y="739.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="141.0" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (11 samples, 0.10%)</title><rect x="138.0" y="723.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="141.0" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (9 samples, 0.08%)</title><rect x="138.3" y="707.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.3" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (6 samples, 0.06%)</title><rect x="138.3" y="691.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="141.3" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (6 samples, 0.06%)</title><rect x="138.3" y="675.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="141.3" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.04%)</title><rect x="138.5" y="659.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="141.5" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.04%)</title><rect x="138.5" y="643.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="141.5" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.04%)</title><rect x="138.5" y="627.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="141.5" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.04%)</title><rect x="138.5" y="611.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="141.5" y="622.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.04%)</title><rect x="138.5" y="595.0" width="0.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="141.5" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.convertToBytes (3 samples, 0.03%)</title><rect x="138.9" y="691.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="141.9" y="702.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.03%)</title><rect x="138.9" y="675.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="141.9" y="686.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.03%)</title><rect x="138.9" y="659.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="141.9" y="670.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (3 samples, 0.03%)</title><rect x="138.9" y="643.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="141.9" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="138.9" y="627.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="141.9" y="638.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="138.9" y="611.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="141.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.get (1,140 samples, 10.74%)</title><rect x="139.5" y="851.0" width="126.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="142.5" y="862.0">ru/mail/polis/se..</text>
</g>
<g>
<title>one/nio/http/Response.ok (4 samples, 0.04%)</title><rect x="139.5" y="835.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="142.5" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.03%)</title><rect x="139.6" y="819.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="142.6" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,135 samples, 10.69%)</title><rect x="139.9" y="835.0" width="126.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="142.9" y="846.0">ru/mail/polis/da..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (112 samples, 1.05%)</title><rect x="139.9" y="819.0" width="12.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="142.9" y="830.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (112 samples, 1.05%)</title><rect x="139.9" y="803.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="142.9" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (112 samples, 1.05%)</title><rect x="139.9" y="787.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="142.9" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (112 samples, 1.05%)</title><rect x="139.9" y="771.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="142.9" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (112 samples, 1.05%)</title><rect x="139.9" y="755.0" width="12.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="142.9" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (95 samples, 0.89%)</title><rect x="139.9" y="739.0" width="10.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="142.9" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (54 samples, 0.51%)</title><rect x="139.9" y="723.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="142.9" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (54 samples, 0.51%)</title><rect x="139.9" y="707.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="142.9" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (54 samples, 0.51%)</title><rect x="139.9" y="691.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="142.9" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (54 samples, 0.51%)</title><rect x="139.9" y="675.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="142.9" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (54 samples, 0.51%)</title><rect x="139.9" y="659.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="142.9" y="670.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (54 samples, 0.51%)</title><rect x="139.9" y="643.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="142.9" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (54 samples, 0.51%)</title><rect x="139.9" y="627.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="142.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (54 samples, 0.51%)</title><rect x="139.9" y="611.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="142.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (54 samples, 0.51%)</title><rect x="139.9" y="595.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="142.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (54 samples, 0.51%)</title><rect x="139.9" y="579.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="142.9" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (32 samples, 0.30%)</title><rect x="139.9" y="563.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="142.9" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (32 samples, 0.30%)</title><rect x="139.9" y="547.0" width="3.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="142.9" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (22 samples, 0.21%)</title><rect x="143.5" y="563.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="146.5" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (22 samples, 0.21%)</title><rect x="143.5" y="547.0" width="2.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="146.5" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (41 samples, 0.39%)</title><rect x="145.9" y="723.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="148.9" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (41 samples, 0.39%)</title><rect x="145.9" y="707.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="148.9" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (41 samples, 0.39%)</title><rect x="145.9" y="691.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="148.9" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (41 samples, 0.39%)</title><rect x="145.9" y="675.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="148.9" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (41 samples, 0.39%)</title><rect x="145.9" y="659.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="148.9" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (41 samples, 0.39%)</title><rect x="145.9" y="643.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="148.9" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (26 samples, 0.24%)</title><rect x="145.9" y="627.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (26 samples, 0.24%)</title><rect x="145.9" y="611.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="148.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (26 samples, 0.24%)</title><rect x="145.9" y="595.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="148.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (26 samples, 0.24%)</title><rect x="145.9" y="579.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.9" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (5 samples, 0.05%)</title><rect x="145.9" y="563.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="148.9" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="145.9" y="547.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.9" y="558.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.05%)</title><rect x="145.9" y="531.0" width="0.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="148.9" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (15 samples, 0.14%)</title><rect x="146.5" y="563.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="149.5" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (15 samples, 0.14%)</title><rect x="146.5" y="547.0" width="1.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="149.5" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Value (3 samples, 0.03%)</title><rect x="148.3" y="563.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="151.3" y="574.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (15 samples, 0.14%)</title><rect x="148.8" y="627.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="151.8" y="638.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (15 samples, 0.14%)</title><rect x="148.8" y="611.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="151.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (15 samples, 0.14%)</title><rect x="148.8" y="595.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="151.8" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (15 samples, 0.14%)</title><rect x="148.8" y="579.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="151.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (15 samples, 0.14%)</title><rect x="148.8" y="563.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="151.8" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (8 samples, 0.08%)</title><rect x="148.8" y="547.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="151.8" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (8 samples, 0.08%)</title><rect x="148.8" y="531.0" width="0.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="151.8" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (7 samples, 0.07%)</title><rect x="149.7" y="547.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="152.7" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7 samples, 0.07%)</title><rect x="149.7" y="531.0" width="0.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="152.7" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$117/473479162.apply (17 samples, 0.16%)</title><rect x="150.5" y="739.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (17 samples, 0.16%)</title><rect x="150.5" y="723.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="153.5" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6 samples, 0.06%)</title><rect x="150.5" y="707.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="153.5" y="718.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (6 samples, 0.06%)</title><rect x="150.5" y="691.0" width="0.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="153.5" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (11 samples, 0.10%)</title><rect x="151.2" y="707.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="154.2" y="718.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11 samples, 0.10%)</title><rect x="151.2" y="691.0" width="1.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="154.2" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.iterator (1,023 samples, 9.64%)</title><rect x="152.4" y="819.0" width="113.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="155.4" y="830.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.cellIterator (1,023 samples, 9.64%)</title><rect x="152.4" y="803.0" width="113.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="155.4" y="814.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.freshCellIterators (1,020 samples, 9.61%)</title><rect x="152.6" y="787.0" width="113.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="155.6" y="798.0">ru/mail/polis/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (296 samples, 2.79%)</title><rect x="152.6" y="771.0" width="32.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="155.6" y="782.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (295 samples, 2.78%)</title><rect x="152.7" y="755.0" width="32.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="155.7" y="766.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (10 samples, 0.09%)</title><rect x="152.7" y="739.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="155.7" y="750.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (10 samples, 0.09%)</title><rect x="152.7" y="723.0" width="1.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="155.7" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (281 samples, 2.65%)</title><rect x="154.3" y="739.0" width="31.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="157.3" y="750.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (281 samples, 2.65%)</title><rect x="154.3" y="723.0" width="31.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="157.3" y="734.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (6 samples, 0.06%)</title><rect x="154.3" y="707.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="157.3" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.06%)</title><rect x="154.3" y="691.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="157.3" y="702.0"></text>
</g>
<g>
<title>java.lang.Object[] (6 samples, 0.06%)</title><rect x="154.3" y="675.0" width="0.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="157.3" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (275 samples, 2.59%)</title><rect x="154.9" y="707.0" width="30.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="157.9" y="718.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (275 samples, 2.59%)</title><rect x="154.9" y="691.0" width="30.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="157.9" y="702.0">ja..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (275 samples, 2.59%)</title><rect x="154.9" y="675.0" width="30.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="157.9" y="686.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (275 samples, 2.59%)</title><rect x="154.9" y="659.0" width="30.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="157.9" y="670.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (201 samples, 1.89%)</title><rect x="154.9" y="643.0" width="22.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="157.9" y="654.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (199 samples, 1.87%)</title><rect x="155.2" y="627.0" width="22.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="158.2" y="638.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (199 samples, 1.87%)</title><rect x="155.2" y="611.0" width="22.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="158.2" y="622.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (199 samples, 1.87%)</title><rect x="155.2" y="595.0" width="22.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="158.2" y="606.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (45 samples, 0.42%)</title><rect x="155.2" y="579.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="158.2" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (45 samples, 0.42%)</title><rect x="155.2" y="563.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="158.2" y="574.0"></text>
</g>
<g>
<title>byte[] (45 samples, 0.42%)</title><rect x="155.2" y="547.0" width="5.0" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="158.2" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (116 samples, 1.09%)</title><rect x="160.2" y="579.0" width="12.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="163.2" y="590.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (116 samples, 1.09%)</title><rect x="160.2" y="563.0" width="12.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="163.2" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Cell (14 samples, 0.13%)</title><rect x="173.0" y="579.0" width="1.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="176.0" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Value (9 samples, 0.08%)</title><rect x="174.6" y="579.0" width="1.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="177.6" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (15 samples, 0.14%)</title><rect x="175.6" y="579.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="178.6" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (15 samples, 0.14%)</title><rect x="175.6" y="563.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="178.6" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (15 samples, 0.14%)</title><rect x="175.6" y="547.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="178.6" y="558.0"></text>
</g>
<g>
<title>byte[] (15 samples, 0.14%)</title><rect x="175.6" y="531.0" width="1.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="178.6" y="542.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (74 samples, 0.70%)</title><rect x="177.3" y="643.0" width="8.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="180.3" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (74 samples, 0.70%)</title><rect x="177.3" y="627.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="180.3" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (74 samples, 0.70%)</title><rect x="177.3" y="611.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="180.3" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (74 samples, 0.70%)</title><rect x="177.3" y="595.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="180.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (74 samples, 0.70%)</title><rect x="177.3" y="579.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="180.3" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (31 samples, 0.29%)</title><rect x="177.3" y="563.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="180.3" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (31 samples, 0.29%)</title><rect x="177.3" y="547.0" width="3.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="180.3" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (31 samples, 0.29%)</title><rect x="180.7" y="563.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="183.7" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (31 samples, 0.29%)</title><rect x="180.7" y="547.0" width="3.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="183.7" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (10 samples, 0.09%)</title><rect x="184.2" y="563.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="187.2" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (10 samples, 0.09%)</title><rect x="184.2" y="547.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="187.2" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (10 samples, 0.09%)</title><rect x="184.2" y="531.0" width="1.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="187.2" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.03%)</title><rect x="185.5" y="771.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="188.5" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.03%)</title><rect x="185.5" y="755.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="188.5" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$109/352000052.get$Lambda (3 samples, 0.03%)</title><rect x="185.5" y="739.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="188.5" y="750.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.DAOImpl$$Lambda$109 (3 samples, 0.03%)</title><rect x="185.5" y="723.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="188.5" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (699 samples, 6.58%)</title><rect x="185.8" y="771.0" width="77.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="188.8" y="782.0">java/util..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (699 samples, 6.58%)</title><rect x="185.8" y="755.0" width="77.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="188.8" y="766.0">java/lang..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$109/352000052.accept (698 samples, 6.57%)</title><rect x="185.9" y="739.0" width="77.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="188.9" y="750.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.lambda$freshCellIterators$6 (698 samples, 6.57%)</title><rect x="185.9" y="723.0" width="77.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="188.9" y="734.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.iterator (698 samples, 6.57%)</title><rect x="185.9" y="707.0" width="77.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="188.9" y="718.0">ru/mail/p..</text>
</g>
<g>
<title>ru.mail.polis.dao.impl.tables.SSTable$1 (8 samples, 0.08%)</title><rect x="185.9" y="691.0" width="0.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="188.9" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt; (690 samples, 6.50%)</title><rect x="186.8" y="691.0" width="76.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.8" y="702.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getPosition (690 samples, 6.50%)</title><rect x="186.8" y="675.0" width="76.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.8" y="686.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.keyAt (690 samples, 6.50%)</title><rect x="186.8" y="659.0" width="76.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="189.8" y="670.0">ru/mail/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (294 samples, 2.77%)</title><rect x="186.8" y="643.0" width="32.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.8" y="654.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (294 samples, 2.77%)</title><rect x="186.8" y="627.0" width="32.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="189.8" y="638.0">ja..</text>
</g>
<g>
<title>byte[] (294 samples, 2.77%)</title><rect x="186.8" y="611.0" width="32.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="189.8" y="622.0">by..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (262 samples, 2.47%)</title><rect x="219.5" y="643.0" width="29.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="222.5" y="654.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (262 samples, 2.47%)</title><rect x="219.5" y="627.0" width="29.1" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="222.5" y="638.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (134 samples, 1.26%)</title><rect x="248.6" y="643.0" width="14.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.6" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (134 samples, 1.26%)</title><rect x="248.6" y="627.0" width="14.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.6" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (134 samples, 1.26%)</title><rect x="248.6" y="611.0" width="14.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="251.6" y="622.0"></text>
</g>
<g>
<title>byte[] (134 samples, 1.26%)</title><rect x="248.6" y="595.0" width="14.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="251.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (22 samples, 0.21%)</title><rect x="263.5" y="771.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.5" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (22 samples, 0.21%)</title><rect x="263.5" y="755.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.5" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (22 samples, 0.21%)</title><rect x="263.5" y="739.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.5" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (15 samples, 0.14%)</title><rect x="263.5" y="723.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.5" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (15 samples, 0.14%)</title><rect x="263.5" y="707.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.5" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (15 samples, 0.14%)</title><rect x="263.5" y="691.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="266.5" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (15 samples, 0.14%)</title><rect x="263.5" y="675.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.5" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (15 samples, 0.14%)</title><rect x="263.5" y="659.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="266.5" y="670.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (15 samples, 0.14%)</title><rect x="263.5" y="643.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.5" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (15 samples, 0.14%)</title><rect x="263.5" y="627.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (15 samples, 0.14%)</title><rect x="263.5" y="611.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="266.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (15 samples, 0.14%)</title><rect x="263.5" y="595.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="266.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (15 samples, 0.14%)</title><rect x="263.5" y="579.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="266.5" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6 samples, 0.06%)</title><rect x="263.5" y="563.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="266.5" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (6 samples, 0.06%)</title><rect x="263.5" y="547.0" width="0.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="266.5" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (9 samples, 0.08%)</title><rect x="264.2" y="563.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.2" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (9 samples, 0.08%)</title><rect x="264.2" y="547.0" width="1.0" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="267.2" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (7 samples, 0.07%)</title><rect x="265.2" y="723.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="268.2" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (7 samples, 0.07%)</title><rect x="265.2" y="707.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.2" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (7 samples, 0.07%)</title><rect x="265.2" y="691.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.2" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (7 samples, 0.07%)</title><rect x="265.2" y="675.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.2" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7 samples, 0.07%)</title><rect x="265.2" y="659.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="268.2" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7 samples, 0.07%)</title><rect x="265.2" y="643.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.2" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (7 samples, 0.07%)</title><rect x="265.2" y="627.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="268.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (7 samples, 0.07%)</title><rect x="265.2" y="611.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="268.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (7 samples, 0.07%)</title><rect x="265.2" y="595.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="268.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (7 samples, 0.07%)</title><rect x="265.2" y="579.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.2" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.03%)</title><rect x="265.4" y="563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="268.4" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3 samples, 0.03%)</title><rect x="265.4" y="547.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="268.4" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (13 samples, 0.12%)</title><rect x="266.2" y="915.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="269.2" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.12%)</title><rect x="266.2" y="899.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="269.2" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.12%)</title><rect x="266.2" y="883.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="269.2" y="894.0"></text>
</g>
<g>
<title>char[] (10 samples, 0.09%)</title><rect x="266.2" y="867.0" width="1.1" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="269.2" y="878.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=6988] (1,132 samples, 10.66%)</title><rect x="267.6" y="995.0" width="125.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="270.6" y="1006.0">[NIO Selector #..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,132 samples, 10.66%)</title><rect x="267.6" y="979.0" width="125.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="270.6" y="990.0">one/nio/server/..</text>
</g>
<g>
<title>one/nio/net/Session.process (1,132 samples, 10.66%)</title><rect x="267.6" y="963.0" width="125.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="270.6" y="974.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,132 samples, 10.66%)</title><rect x="267.6" y="947.0" width="125.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.6" y="958.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,132 samples, 10.66%)</title><rect x="267.6" y="931.0" width="125.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="270.6" y="942.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,113 samples, 10.48%)</title><rect x="267.6" y="915.0" width="123.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="270.6" y="926.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,113 samples, 10.48%)</title><rect x="267.6" y="899.0" width="123.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.6" y="910.0">one/nio/http/Ht..</text>
</g>
<g>
<title>RequestHandler0_response.handleRequest (1,113 samples, 10.48%)</title><rect x="267.6" y="883.0" width="123.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="270.6" y="894.0">RequestHandler0..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (1,112 samples, 10.47%)</title><rect x="267.7" y="867.0" width="123.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="270.7" y="878.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (17 samples, 0.16%)</title><rect x="267.7" y="851.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="270.7" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (17 samples, 0.16%)</title><rect x="267.7" y="835.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="270.7" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (17 samples, 0.16%)</title><rect x="267.7" y="819.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="270.7" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (17 samples, 0.16%)</title><rect x="267.7" y="803.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="270.7" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (17 samples, 0.16%)</title><rect x="267.7" y="787.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.7" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (17 samples, 0.16%)</title><rect x="267.7" y="771.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="270.7" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (17 samples, 0.16%)</title><rect x="267.7" y="755.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.7" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (17 samples, 0.16%)</title><rect x="267.7" y="739.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="270.7" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (17 samples, 0.16%)</title><rect x="267.7" y="723.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.7" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.prepareForDeferredProcessing (3 samples, 0.03%)</title><rect x="267.7" y="707.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.7" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.getFormattedMessage (3 samples, 0.03%)</title><rect x="267.7" y="691.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.7" y="702.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (3 samples, 0.03%)</title><rect x="267.7" y="675.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="270.7" y="686.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (3 samples, 0.03%)</title><rect x="267.7" y="659.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="270.7" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="267.7" y="643.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.7" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="267.7" y="627.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.7" y="638.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="267.7" y="611.0" width="0.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="270.7" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (14 samples, 0.13%)</title><rect x="268.1" y="707.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="271.1" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (13 samples, 0.12%)</title><rect x="268.1" y="691.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="271.1" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (13 samples, 0.12%)</title><rect x="268.1" y="675.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="271.1" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 0.06%)</title><rect x="268.4" y="659.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.4" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.06%)</title><rect x="268.4" y="643.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.4" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.06%)</title><rect x="268.4" y="627.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.4" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.06%)</title><rect x="268.4" y="611.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="271.4" y="622.0"></text>
</g>
<g>
<title>byte[] (6 samples, 0.06%)</title><rect x="268.4" y="595.0" width="0.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="271.4" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (4 samples, 0.04%)</title><rect x="269.1" y="659.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.1" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.04%)</title><rect x="269.1" y="643.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.1" y="654.0"></text>
</g>
<g>
<title>java.lang.String (3 samples, 0.03%)</title><rect x="269.1" y="627.0" width="0.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="272.1" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.get (1,095 samples, 10.31%)</title><rect x="269.6" y="851.0" width="121.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.6" y="862.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,094 samples, 10.30%)</title><rect x="269.7" y="835.0" width="121.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.7" y="846.0">ru/mail/polis/d..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (99 samples, 0.93%)</title><rect x="269.7" y="819.0" width="11.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="272.7" y="830.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (99 samples, 0.93%)</title><rect x="269.7" y="803.0" width="11.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="272.7" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (99 samples, 0.93%)</title><rect x="269.7" y="787.0" width="11.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="272.7" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (99 samples, 0.93%)</title><rect x="269.7" y="771.0" width="11.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.7" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (99 samples, 0.93%)</title><rect x="269.7" y="755.0" width="11.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="272.7" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (86 samples, 0.81%)</title><rect x="269.7" y="739.0" width="9.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="272.7" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (45 samples, 0.42%)</title><rect x="269.7" y="723.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="272.7" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (45 samples, 0.42%)</title><rect x="269.7" y="707.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="272.7" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (45 samples, 0.42%)</title><rect x="269.7" y="691.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.7" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (45 samples, 0.42%)</title><rect x="269.7" y="675.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.7" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (45 samples, 0.42%)</title><rect x="269.7" y="659.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.7" y="670.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (45 samples, 0.42%)</title><rect x="269.7" y="643.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.7" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (45 samples, 0.42%)</title><rect x="269.7" y="627.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="272.7" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (45 samples, 0.42%)</title><rect x="269.7" y="611.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (45 samples, 0.42%)</title><rect x="269.7" y="595.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.7" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (45 samples, 0.42%)</title><rect x="269.7" y="579.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="272.7" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (24 samples, 0.23%)</title><rect x="269.7" y="563.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.7" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (24 samples, 0.23%)</title><rect x="269.7" y="547.0" width="2.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="272.7" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (21 samples, 0.20%)</title><rect x="272.4" y="563.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.4" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (21 samples, 0.20%)</title><rect x="272.4" y="547.0" width="2.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="275.4" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (41 samples, 0.39%)</title><rect x="274.7" y="723.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="277.7" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (41 samples, 0.39%)</title><rect x="274.7" y="707.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.7" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (41 samples, 0.39%)</title><rect x="274.7" y="691.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.7" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (41 samples, 0.39%)</title><rect x="274.7" y="675.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="277.7" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (41 samples, 0.39%)</title><rect x="274.7" y="659.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="277.7" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (41 samples, 0.39%)</title><rect x="274.7" y="643.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="277.7" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (37 samples, 0.35%)</title><rect x="274.7" y="627.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.7" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (37 samples, 0.35%)</title><rect x="274.7" y="611.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (37 samples, 0.35%)</title><rect x="274.7" y="595.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.7" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (37 samples, 0.35%)</title><rect x="274.7" y="579.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="277.7" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7 samples, 0.07%)</title><rect x="274.7" y="563.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.7" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="274.7" y="547.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="277.7" y="558.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.07%)</title><rect x="274.7" y="531.0" width="0.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="277.7" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (24 samples, 0.23%)</title><rect x="275.5" y="563.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.5" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (24 samples, 0.23%)</title><rect x="275.5" y="547.0" width="2.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="278.5" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Cell (3 samples, 0.03%)</title><rect x="278.2" y="563.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="281.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (3 samples, 0.03%)</title><rect x="278.5" y="563.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.5" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.03%)</title><rect x="278.5" y="547.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="281.5" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="278.5" y="531.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.5" y="542.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="278.5" y="515.0" width="0.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="281.5" y="526.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (4 samples, 0.04%)</title><rect x="278.9" y="627.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="281.9" y="638.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (4 samples, 0.04%)</title><rect x="278.9" y="611.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (4 samples, 0.04%)</title><rect x="278.9" y="595.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (4 samples, 0.04%)</title><rect x="278.9" y="579.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.9" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (4 samples, 0.04%)</title><rect x="278.9" y="563.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="281.9" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="278.9" y="547.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="281.9" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3 samples, 0.03%)</title><rect x="278.9" y="531.0" width="0.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="281.9" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$117/473479162.apply (13 samples, 0.12%)</title><rect x="279.3" y="739.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.3" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (13 samples, 0.12%)</title><rect x="279.3" y="723.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.3" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (9 samples, 0.08%)</title><rect x="279.3" y="707.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.3" y="718.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (9 samples, 0.08%)</title><rect x="279.3" y="691.0" width="1.0" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="282.3" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.04%)</title><rect x="280.3" y="707.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.3" y="718.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4 samples, 0.04%)</title><rect x="280.3" y="691.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="283.3" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.iterator (991 samples, 9.33%)</title><rect x="281.2" y="819.0" width="110.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="284.2" y="830.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.cellIterator (991 samples, 9.33%)</title><rect x="281.2" y="803.0" width="110.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="284.2" y="814.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.freshCellIterators (981 samples, 9.24%)</title><rect x="281.6" y="787.0" width="109.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.6" y="798.0">ru/mail/polis..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (260 samples, 2.45%)</title><rect x="281.6" y="771.0" width="28.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="284.6" y="782.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (260 samples, 2.45%)</title><rect x="281.6" y="755.0" width="28.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="284.6" y="766.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (10 samples, 0.09%)</title><rect x="281.6" y="739.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="284.6" y="750.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (10 samples, 0.09%)</title><rect x="281.6" y="723.0" width="1.1" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="284.6" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (250 samples, 2.35%)</title><rect x="282.7" y="739.0" width="27.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.7" y="750.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (250 samples, 2.35%)</title><rect x="282.7" y="723.0" width="27.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="285.7" y="734.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (4 samples, 0.04%)</title><rect x="282.7" y="707.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.7" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.04%)</title><rect x="282.7" y="691.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="285.7" y="702.0"></text>
</g>
<g>
<title>java.lang.Object[] (4 samples, 0.04%)</title><rect x="282.7" y="675.0" width="0.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="285.7" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (246 samples, 2.32%)</title><rect x="283.2" y="707.0" width="27.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.2" y="718.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (246 samples, 2.32%)</title><rect x="283.2" y="691.0" width="27.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="286.2" y="702.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (246 samples, 2.32%)</title><rect x="283.2" y="675.0" width="27.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="286.2" y="686.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (246 samples, 2.32%)</title><rect x="283.2" y="659.0" width="27.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.2" y="670.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (184 samples, 1.73%)</title><rect x="283.2" y="643.0" width="20.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="286.2" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (183 samples, 1.72%)</title><rect x="283.3" y="627.0" width="20.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.3" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (183 samples, 1.72%)</title><rect x="283.3" y="611.0" width="20.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="286.3" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (183 samples, 1.72%)</title><rect x="283.3" y="595.0" width="20.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.3" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (47 samples, 0.44%)</title><rect x="283.3" y="579.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.3" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (47 samples, 0.44%)</title><rect x="283.3" y="563.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.3" y="574.0"></text>
</g>
<g>
<title>byte[] (47 samples, 0.44%)</title><rect x="283.3" y="547.0" width="5.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="286.3" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (96 samples, 0.90%)</title><rect x="288.5" y="579.0" width="10.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="291.5" y="590.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (96 samples, 0.90%)</title><rect x="288.5" y="563.0" width="10.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="291.5" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Cell (9 samples, 0.08%)</title><rect x="299.2" y="579.0" width="1.0" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="302.2" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Value (8 samples, 0.08%)</title><rect x="300.2" y="579.0" width="0.9" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="303.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (23 samples, 0.22%)</title><rect x="301.1" y="579.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="304.1" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (23 samples, 0.22%)</title><rect x="301.1" y="563.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="304.1" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (23 samples, 0.22%)</title><rect x="301.1" y="547.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="304.1" y="558.0"></text>
</g>
<g>
<title>byte[] (23 samples, 0.22%)</title><rect x="301.1" y="531.0" width="2.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="304.1" y="542.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (62 samples, 0.58%)</title><rect x="303.6" y="643.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="306.6" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (62 samples, 0.58%)</title><rect x="303.6" y="627.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="306.6" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (62 samples, 0.58%)</title><rect x="303.6" y="611.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="306.6" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (62 samples, 0.58%)</title><rect x="303.6" y="595.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="306.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (62 samples, 0.58%)</title><rect x="303.6" y="579.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="306.6" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (24 samples, 0.23%)</title><rect x="303.6" y="563.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="306.6" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (24 samples, 0.23%)</title><rect x="303.6" y="547.0" width="2.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="306.6" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (31 samples, 0.29%)</title><rect x="306.3" y="563.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="309.3" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (31 samples, 0.29%)</title><rect x="306.3" y="547.0" width="3.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="309.3" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="309.8" y="563.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.8" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (3 samples, 0.03%)</title><rect x="309.8" y="547.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.8" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3 samples, 0.03%)</title><rect x="309.8" y="531.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="312.8" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (4 samples, 0.04%)</title><rect x="310.1" y="563.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="313.1" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (4 samples, 0.04%)</title><rect x="310.1" y="547.0" width="0.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="313.1" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (704 samples, 6.63%)</title><rect x="310.5" y="771.0" width="78.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.5" y="782.0">java/util..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (704 samples, 6.63%)</title><rect x="310.5" y="755.0" width="78.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.5" y="766.0">java/lang..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$109/352000052.accept (702 samples, 6.61%)</title><rect x="310.8" y="739.0" width="78.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="313.8" y="750.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.lambda$freshCellIterators$6 (702 samples, 6.61%)</title><rect x="310.8" y="723.0" width="78.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="313.8" y="734.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.iterator (702 samples, 6.61%)</title><rect x="310.8" y="707.0" width="78.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="313.8" y="718.0">ru/mail/p..</text>
</g>
<g>
<title>ru.mail.polis.dao.impl.tables.SSTable$1 (3 samples, 0.03%)</title><rect x="310.8" y="691.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="313.8" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt; (699 samples, 6.58%)</title><rect x="311.1" y="691.0" width="77.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="314.1" y="702.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getPosition (699 samples, 6.58%)</title><rect x="311.1" y="675.0" width="77.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="314.1" y="686.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.keyAt (699 samples, 6.58%)</title><rect x="311.1" y="659.0" width="77.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.1" y="670.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (278 samples, 2.62%)</title><rect x="311.1" y="643.0" width="30.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="314.1" y="654.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (278 samples, 2.62%)</title><rect x="311.1" y="627.0" width="30.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="314.1" y="638.0">ja..</text>
</g>
<g>
<title>byte[] (278 samples, 2.62%)</title><rect x="311.1" y="611.0" width="30.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="314.1" y="622.0">by..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (275 samples, 2.59%)</title><rect x="342.0" y="643.0" width="30.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="345.0" y="654.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (275 samples, 2.59%)</title><rect x="342.0" y="627.0" width="30.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="345.0" y="638.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (146 samples, 1.38%)</title><rect x="372.5" y="643.0" width="16.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="375.5" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (146 samples, 1.38%)</title><rect x="372.5" y="627.0" width="16.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="375.5" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (146 samples, 1.38%)</title><rect x="372.5" y="611.0" width="16.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="375.5" y="622.0"></text>
</g>
<g>
<title>byte[] (146 samples, 1.38%)</title><rect x="372.5" y="595.0" width="16.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="375.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (16 samples, 0.15%)</title><rect x="388.9" y="771.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="391.9" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (16 samples, 0.15%)</title><rect x="388.9" y="755.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="391.9" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (16 samples, 0.15%)</title><rect x="388.9" y="739.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="391.9" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (11 samples, 0.10%)</title><rect x="388.9" y="723.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="391.9" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (11 samples, 0.10%)</title><rect x="388.9" y="707.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="391.9" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (11 samples, 0.10%)</title><rect x="388.9" y="691.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="391.9" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (11 samples, 0.10%)</title><rect x="388.9" y="675.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="391.9" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (11 samples, 0.10%)</title><rect x="388.9" y="659.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="391.9" y="670.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (11 samples, 0.10%)</title><rect x="388.9" y="643.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="391.9" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (11 samples, 0.10%)</title><rect x="388.9" y="627.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="391.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (11 samples, 0.10%)</title><rect x="388.9" y="611.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="391.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (11 samples, 0.10%)</title><rect x="388.9" y="595.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="391.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (11 samples, 0.10%)</title><rect x="388.9" y="579.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="391.9" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.05%)</title><rect x="388.9" y="563.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="391.9" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (5 samples, 0.05%)</title><rect x="388.9" y="547.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="391.9" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6 samples, 0.06%)</title><rect x="389.4" y="563.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="392.4" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6 samples, 0.06%)</title><rect x="389.4" y="547.0" width="0.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="392.4" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (5 samples, 0.05%)</title><rect x="390.1" y="723.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.1" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (5 samples, 0.05%)</title><rect x="390.1" y="707.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="393.1" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (5 samples, 0.05%)</title><rect x="390.1" y="691.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="393.1" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (5 samples, 0.05%)</title><rect x="390.1" y="675.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="393.1" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5 samples, 0.05%)</title><rect x="390.1" y="659.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="393.1" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5 samples, 0.05%)</title><rect x="390.1" y="643.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="393.1" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (5 samples, 0.05%)</title><rect x="390.1" y="627.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="393.1" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (5 samples, 0.05%)</title><rect x="390.1" y="611.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="393.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (5 samples, 0.05%)</title><rect x="390.1" y="595.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="393.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (5 samples, 0.05%)</title><rect x="390.1" y="579.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="393.1" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.03%)</title><rect x="390.1" y="563.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="393.1" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3 samples, 0.03%)</title><rect x="390.1" y="547.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="393.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.iterator (6 samples, 0.06%)</title><rect x="390.7" y="787.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="393.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (3 samples, 0.03%)</title><rect x="390.7" y="771.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="393.7" y="782.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (3 samples, 0.03%)</title><rect x="390.7" y="755.0" width="0.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="393.7" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (17 samples, 0.16%)</title><rect x="391.3" y="915.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="394.3" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.13%)</title><rect x="391.7" y="899.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="394.7" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.13%)</title><rect x="391.7" y="883.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="394.7" y="894.0"></text>
</g>
<g>
<title>char[] (13 samples, 0.12%)</title><rect x="391.7" y="867.0" width="1.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="394.7" y="878.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=6989] (1,133 samples, 10.67%)</title><rect x="393.4" y="995.0" width="126.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="396.4" y="1006.0">[NIO Selector #..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,133 samples, 10.67%)</title><rect x="393.4" y="979.0" width="126.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="396.4" y="990.0">one/nio/server/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (11 samples, 0.10%)</title><rect x="393.4" y="963.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="396.4" y="974.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (11 samples, 0.10%)</title><rect x="393.4" y="947.0" width="1.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="396.4" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,122 samples, 10.57%)</title><rect x="394.7" y="963.0" width="124.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="397.7" y="974.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,122 samples, 10.57%)</title><rect x="394.7" y="947.0" width="124.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="397.7" y="958.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,122 samples, 10.57%)</title><rect x="394.7" y="931.0" width="124.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="397.7" y="942.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,120 samples, 10.55%)</title><rect x="394.7" y="915.0" width="124.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="397.7" y="926.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,120 samples, 10.55%)</title><rect x="394.7" y="899.0" width="124.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="397.7" y="910.0">one/nio/http/Ht..</text>
</g>
<g>
<title>RequestHandler0_response.handleRequest (1,120 samples, 10.55%)</title><rect x="394.7" y="883.0" width="124.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="397.7" y="894.0">RequestHandler0..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (1,119 samples, 10.54%)</title><rect x="394.8" y="867.0" width="124.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="397.8" y="878.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (14 samples, 0.13%)</title><rect x="394.8" y="851.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="397.8" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (14 samples, 0.13%)</title><rect x="394.8" y="835.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="397.8" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (14 samples, 0.13%)</title><rect x="394.8" y="819.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="397.8" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (13 samples, 0.12%)</title><rect x="394.9" y="803.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="397.9" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (13 samples, 0.12%)</title><rect x="394.9" y="787.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="397.9" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (13 samples, 0.12%)</title><rect x="394.9" y="771.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="397.9" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (13 samples, 0.12%)</title><rect x="394.9" y="755.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="397.9" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (13 samples, 0.12%)</title><rect x="394.9" y="739.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="397.9" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (13 samples, 0.12%)</title><rect x="394.9" y="723.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="397.9" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.prepareForDeferredProcessing (4 samples, 0.04%)</title><rect x="394.9" y="707.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="397.9" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.getFormattedMessage (4 samples, 0.04%)</title><rect x="394.9" y="691.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="397.9" y="702.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (4 samples, 0.04%)</title><rect x="394.9" y="675.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="397.9" y="686.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (4 samples, 0.04%)</title><rect x="394.9" y="659.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="397.9" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (9 samples, 0.08%)</title><rect x="395.3" y="707.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="398.3" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (6 samples, 0.06%)</title><rect x="395.3" y="691.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="398.3" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (6 samples, 0.06%)</title><rect x="395.3" y="675.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="398.3" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.03%)</title><rect x="395.3" y="659.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="398.3" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.03%)</title><rect x="395.3" y="643.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="398.3" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.03%)</title><rect x="395.3" y="627.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="398.3" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="395.3" y="611.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="398.3" y="622.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="395.3" y="595.0" width="0.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="398.3" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (3 samples, 0.03%)</title><rect x="395.7" y="659.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="398.7" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.03%)</title><rect x="395.7" y="643.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="398.7" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.convertToBytes (3 samples, 0.03%)</title><rect x="396.0" y="691.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="399.0" y="702.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.03%)</title><rect x="396.0" y="675.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="399.0" y="686.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.03%)</title><rect x="396.0" y="659.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="399.0" y="670.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (3 samples, 0.03%)</title><rect x="396.0" y="643.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="399.0" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="396.0" y="627.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="399.0" y="638.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="396.0" y="611.0" width="0.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="399.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.get (1,103 samples, 10.39%)</title><rect x="396.6" y="851.0" width="122.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="399.6" y="862.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,101 samples, 10.37%)</title><rect x="396.8" y="835.0" width="122.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="399.8" y="846.0">ru/mail/polis/d..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (95 samples, 0.89%)</title><rect x="396.8" y="819.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="399.8" y="830.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (95 samples, 0.89%)</title><rect x="396.8" y="803.0" width="10.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="399.8" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (95 samples, 0.89%)</title><rect x="396.8" y="787.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="399.8" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (95 samples, 0.89%)</title><rect x="396.8" y="771.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="399.8" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (95 samples, 0.89%)</title><rect x="396.8" y="755.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="399.8" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (84 samples, 0.79%)</title><rect x="396.8" y="739.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="399.8" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (42 samples, 0.40%)</title><rect x="396.8" y="723.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="399.8" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (42 samples, 0.40%)</title><rect x="396.8" y="707.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="399.8" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (42 samples, 0.40%)</title><rect x="396.8" y="691.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="399.8" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (42 samples, 0.40%)</title><rect x="396.8" y="675.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="399.8" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (42 samples, 0.40%)</title><rect x="396.8" y="659.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="399.8" y="670.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (42 samples, 0.40%)</title><rect x="396.8" y="643.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="399.8" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (42 samples, 0.40%)</title><rect x="396.8" y="627.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="399.8" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (42 samples, 0.40%)</title><rect x="396.8" y="611.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="399.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (42 samples, 0.40%)</title><rect x="396.8" y="595.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="399.8" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (42 samples, 0.40%)</title><rect x="396.8" y="579.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="399.8" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (20 samples, 0.19%)</title><rect x="396.8" y="563.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="399.8" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (20 samples, 0.19%)</title><rect x="396.8" y="547.0" width="2.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="399.8" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (22 samples, 0.21%)</title><rect x="399.0" y="563.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="402.0" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (22 samples, 0.21%)</title><rect x="399.0" y="547.0" width="2.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="402.0" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (42 samples, 0.40%)</title><rect x="401.4" y="723.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="404.4" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (42 samples, 0.40%)</title><rect x="401.4" y="707.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="404.4" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (42 samples, 0.40%)</title><rect x="401.4" y="691.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="404.4" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (42 samples, 0.40%)</title><rect x="401.4" y="675.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="404.4" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (42 samples, 0.40%)</title><rect x="401.4" y="659.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="404.4" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (42 samples, 0.40%)</title><rect x="401.4" y="643.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="404.4" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (34 samples, 0.32%)</title><rect x="401.4" y="627.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="404.4" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (34 samples, 0.32%)</title><rect x="401.4" y="611.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="404.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (34 samples, 0.32%)</title><rect x="401.4" y="595.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="404.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (34 samples, 0.32%)</title><rect x="401.4" y="579.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="404.4" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7 samples, 0.07%)</title><rect x="401.4" y="563.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="404.4" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="401.4" y="547.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.4" y="558.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.07%)</title><rect x="401.4" y="531.0" width="0.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="404.4" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (21 samples, 0.20%)</title><rect x="402.2" y="563.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="405.2" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (21 samples, 0.20%)</title><rect x="402.2" y="547.0" width="2.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="405.2" y="558.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (8 samples, 0.08%)</title><rect x="405.2" y="627.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="408.2" y="638.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (8 samples, 0.08%)</title><rect x="405.2" y="611.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="408.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (8 samples, 0.08%)</title><rect x="405.2" y="595.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="408.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (8 samples, 0.08%)</title><rect x="405.2" y="579.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="408.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (8 samples, 0.08%)</title><rect x="405.2" y="563.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="408.2" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.05%)</title><rect x="405.2" y="547.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.2" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (5 samples, 0.05%)</title><rect x="405.2" y="531.0" width="0.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="408.2" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.03%)</title><rect x="405.8" y="547.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="408.8" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3 samples, 0.03%)</title><rect x="405.8" y="531.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="408.8" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$117/473479162.apply (11 samples, 0.10%)</title><rect x="406.1" y="739.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="409.1" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (11 samples, 0.10%)</title><rect x="406.1" y="723.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="409.1" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6 samples, 0.06%)</title><rect x="406.1" y="707.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="409.1" y="718.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (6 samples, 0.06%)</title><rect x="406.1" y="691.0" width="0.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="409.1" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.05%)</title><rect x="406.8" y="707.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="409.8" y="718.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (5 samples, 0.05%)</title><rect x="406.8" y="691.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="409.8" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.iterator (1,003 samples, 9.45%)</title><rect x="407.7" y="819.0" width="111.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="410.7" y="830.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.cellIterator (1,003 samples, 9.45%)</title><rect x="407.7" y="803.0" width="111.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="410.7" y="814.0">ru/mail/polis..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.03%)</title><rect x="407.8" y="787.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="410.8" y="798.0"></text>
</g>
<g>
<title>java.lang.Object[] (3 samples, 0.03%)</title><rect x="407.8" y="771.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="410.8" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.freshCellIterators (996 samples, 9.38%)</title><rect x="408.1" y="787.0" width="110.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="411.1" y="798.0">ru/mail/polis..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (262 samples, 2.47%)</title><rect x="408.1" y="771.0" width="29.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="411.1" y="782.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (262 samples, 2.47%)</title><rect x="408.1" y="755.0" width="29.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="411.1" y="766.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (5 samples, 0.05%)</title><rect x="408.1" y="739.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="411.1" y="750.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (5 samples, 0.05%)</title><rect x="408.1" y="723.0" width="0.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="411.1" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (255 samples, 2.40%)</title><rect x="408.9" y="739.0" width="28.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="411.9" y="750.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (255 samples, 2.40%)</title><rect x="408.9" y="723.0" width="28.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="411.9" y="734.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (5 samples, 0.05%)</title><rect x="408.9" y="707.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="411.9" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.05%)</title><rect x="408.9" y="691.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.9" y="702.0"></text>
</g>
<g>
<title>java.lang.Object[] (5 samples, 0.05%)</title><rect x="408.9" y="675.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="411.9" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (250 samples, 2.35%)</title><rect x="409.4" y="707.0" width="27.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="412.4" y="718.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (250 samples, 2.35%)</title><rect x="409.4" y="691.0" width="27.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="412.4" y="702.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (250 samples, 2.35%)</title><rect x="409.4" y="675.0" width="27.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="412.4" y="686.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (250 samples, 2.35%)</title><rect x="409.4" y="659.0" width="27.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="412.4" y="670.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (183 samples, 1.72%)</title><rect x="409.4" y="643.0" width="20.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="412.4" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (4 samples, 0.04%)</title><rect x="409.4" y="627.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="412.4" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (4 samples, 0.04%)</title><rect x="409.4" y="611.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="412.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable$$Lambda$59/2145435247.apply (4 samples, 0.04%)</title><rect x="409.4" y="595.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="412.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.lambda$iterator$0 (4 samples, 0.04%)</title><rect x="409.4" y="579.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="412.4" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (3 samples, 0.03%)</title><rect x="409.4" y="563.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="412.4" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3 samples, 0.03%)</title><rect x="409.4" y="547.0" width="0.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="412.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (179 samples, 1.69%)</title><rect x="409.9" y="627.0" width="19.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="412.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (179 samples, 1.69%)</title><rect x="409.9" y="611.0" width="19.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="412.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (179 samples, 1.69%)</title><rect x="409.9" y="595.0" width="19.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="412.9" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (47 samples, 0.44%)</title><rect x="409.9" y="579.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="412.9" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (47 samples, 0.44%)</title><rect x="409.9" y="563.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="412.9" y="574.0"></text>
</g>
<g>
<title>byte[] (47 samples, 0.44%)</title><rect x="409.9" y="547.0" width="5.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="412.9" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (102 samples, 0.96%)</title><rect x="415.1" y="579.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="418.1" y="590.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (102 samples, 0.96%)</title><rect x="415.1" y="563.0" width="11.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="418.1" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Cell (12 samples, 0.11%)</title><rect x="426.5" y="579.0" width="1.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="429.5" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Value (8 samples, 0.08%)</title><rect x="427.8" y="579.0" width="0.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="430.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (10 samples, 0.09%)</title><rect x="428.7" y="579.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="431.7" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (10 samples, 0.09%)</title><rect x="428.7" y="563.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="431.7" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.09%)</title><rect x="428.7" y="547.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="431.7" y="558.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.09%)</title><rect x="428.7" y="531.0" width="1.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="431.7" y="542.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (67 samples, 0.63%)</title><rect x="429.8" y="643.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="432.8" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (67 samples, 0.63%)</title><rect x="429.8" y="627.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="432.8" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (67 samples, 0.63%)</title><rect x="429.8" y="611.0" width="7.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="432.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (67 samples, 0.63%)</title><rect x="429.8" y="595.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="432.8" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (67 samples, 0.63%)</title><rect x="429.8" y="579.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="432.8" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (22 samples, 0.21%)</title><rect x="429.8" y="563.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="432.8" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (22 samples, 0.21%)</title><rect x="429.8" y="547.0" width="2.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="432.8" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (35 samples, 0.33%)</title><rect x="432.2" y="563.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="435.2" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (35 samples, 0.33%)</title><rect x="432.2" y="547.0" width="3.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="435.2" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (7 samples, 0.07%)</title><rect x="436.1" y="563.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="439.1" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (7 samples, 0.07%)</title><rect x="436.1" y="547.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="439.1" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (7 samples, 0.07%)</title><rect x="436.1" y="531.0" width="0.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="439.1" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (3 samples, 0.03%)</title><rect x="436.9" y="563.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="439.9" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3 samples, 0.03%)</title><rect x="436.9" y="547.0" width="0.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="439.9" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (717 samples, 6.75%)</title><rect x="437.2" y="771.0" width="79.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="440.2" y="782.0">java/util..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (717 samples, 6.75%)</title><rect x="437.2" y="755.0" width="79.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="440.2" y="766.0">java/lang..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$109/352000052.accept (715 samples, 6.73%)</title><rect x="437.5" y="739.0" width="79.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="440.5" y="750.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.lambda$freshCellIterators$6 (715 samples, 6.73%)</title><rect x="437.5" y="723.0" width="79.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="440.5" y="734.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.iterator (715 samples, 6.73%)</title><rect x="437.5" y="707.0" width="79.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="440.5" y="718.0">ru/mail/p..</text>
</g>
<g>
<title>ru.mail.polis.dao.impl.tables.SSTable$1 (8 samples, 0.08%)</title><rect x="437.5" y="691.0" width="0.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="440.5" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt; (707 samples, 6.66%)</title><rect x="438.3" y="691.0" width="78.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="441.3" y="702.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getPosition (707 samples, 6.66%)</title><rect x="438.3" y="675.0" width="78.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="441.3" y="686.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.keyAt (707 samples, 6.66%)</title><rect x="438.3" y="659.0" width="78.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.3" y="670.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (293 samples, 2.76%)</title><rect x="438.3" y="643.0" width="32.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="441.3" y="654.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (293 samples, 2.76%)</title><rect x="438.3" y="627.0" width="32.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="441.3" y="638.0">ja..</text>
</g>
<g>
<title>byte[] (293 samples, 2.76%)</title><rect x="438.3" y="611.0" width="32.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="441.3" y="622.0">by..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (275 samples, 2.59%)</title><rect x="470.9" y="643.0" width="30.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="473.9" y="654.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (275 samples, 2.59%)</title><rect x="470.9" y="627.0" width="30.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="473.9" y="638.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (139 samples, 1.31%)</title><rect x="501.5" y="643.0" width="15.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="504.5" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (139 samples, 1.31%)</title><rect x="501.5" y="627.0" width="15.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="504.5" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (139 samples, 1.31%)</title><rect x="501.5" y="611.0" width="15.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="504.5" y="622.0"></text>
</g>
<g>
<title>byte[] (139 samples, 1.31%)</title><rect x="501.5" y="595.0" width="15.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="504.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (17 samples, 0.16%)</title><rect x="516.9" y="771.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="519.9" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (17 samples, 0.16%)</title><rect x="516.9" y="755.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="519.9" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (17 samples, 0.16%)</title><rect x="516.9" y="739.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="519.9" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (8 samples, 0.08%)</title><rect x="516.9" y="723.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="519.9" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (8 samples, 0.08%)</title><rect x="516.9" y="707.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="519.9" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (8 samples, 0.08%)</title><rect x="516.9" y="691.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="519.9" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8 samples, 0.08%)</title><rect x="516.9" y="675.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="519.9" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8 samples, 0.08%)</title><rect x="516.9" y="659.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="519.9" y="670.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (8 samples, 0.08%)</title><rect x="516.9" y="643.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="519.9" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (8 samples, 0.08%)</title><rect x="516.9" y="627.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="519.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (8 samples, 0.08%)</title><rect x="516.9" y="611.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="519.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (8 samples, 0.08%)</title><rect x="516.9" y="595.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="519.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (8 samples, 0.08%)</title><rect x="516.9" y="579.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="519.9" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="516.9" y="563.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="519.9" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (4 samples, 0.04%)</title><rect x="516.9" y="547.0" width="0.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="519.9" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.04%)</title><rect x="517.4" y="563.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="520.4" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4 samples, 0.04%)</title><rect x="517.4" y="547.0" width="0.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="520.4" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (9 samples, 0.08%)</title><rect x="517.8" y="723.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="520.8" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (9 samples, 0.08%)</title><rect x="517.8" y="707.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="520.8" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (9 samples, 0.08%)</title><rect x="517.8" y="691.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="520.8" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (9 samples, 0.08%)</title><rect x="517.8" y="675.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="520.8" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.08%)</title><rect x="517.8" y="659.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="520.8" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.08%)</title><rect x="517.8" y="643.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="520.8" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (8 samples, 0.08%)</title><rect x="517.8" y="627.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="520.8" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (8 samples, 0.08%)</title><rect x="517.8" y="611.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="520.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (8 samples, 0.08%)</title><rect x="517.8" y="595.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="520.8" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (8 samples, 0.08%)</title><rect x="517.8" y="579.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="520.8" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.03%)</title><rect x="517.8" y="563.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="520.8" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="517.8" y="547.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="520.8" y="558.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="517.8" y="531.0" width="0.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="520.8" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.04%)</title><rect x="518.1" y="563.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="521.1" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4 samples, 0.04%)</title><rect x="518.1" y="547.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="521.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.iterator (3 samples, 0.03%)</title><rect x="518.8" y="787.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="521.8" y="798.0"></text>
</g>
<g>
<title>[NIO Selector #4 tid=6990] (1,292 samples, 12.17%)</title><rect x="519.4" y="995.0" width="143.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="522.4" y="1006.0">[NIO Selector #4 t..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,292 samples, 12.17%)</title><rect x="519.4" y="979.0" width="143.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="522.4" y="990.0">one/nio/server/Sel..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (5 samples, 0.05%)</title><rect x="519.4" y="963.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="522.4" y="974.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (5 samples, 0.05%)</title><rect x="519.4" y="947.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="522.4" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,287 samples, 12.12%)</title><rect x="519.9" y="963.0" width="143.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="522.9" y="974.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,287 samples, 12.12%)</title><rect x="519.9" y="947.0" width="143.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="522.9" y="958.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,287 samples, 12.12%)</title><rect x="519.9" y="931.0" width="143.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="522.9" y="942.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,276 samples, 12.02%)</title><rect x="519.9" y="915.0" width="141.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="522.9" y="926.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,276 samples, 12.02%)</title><rect x="519.9" y="899.0" width="141.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="522.9" y="910.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>RequestHandler0_response.handleRequest (1,276 samples, 12.02%)</title><rect x="519.9" y="883.0" width="141.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="522.9" y="894.0">RequestHandler0_re..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3 samples, 0.03%)</title><rect x="519.9" y="867.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="522.9" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (3 samples, 0.03%)</title><rect x="519.9" y="851.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="522.9" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (1,273 samples, 11.99%)</title><rect x="520.3" y="867.0" width="141.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="523.3" y="878.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (22 samples, 0.21%)</title><rect x="520.3" y="851.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="523.3" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (22 samples, 0.21%)</title><rect x="520.3" y="835.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="523.3" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (22 samples, 0.21%)</title><rect x="520.3" y="819.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="523.3" y="830.0"></text>
</g>
<g>
<title>ch.qos.logback.classic.spi.LoggingEvent (3 samples, 0.03%)</title><rect x="520.3" y="803.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="523.3" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (19 samples, 0.18%)</title><rect x="520.6" y="803.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="523.6" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (19 samples, 0.18%)</title><rect x="520.6" y="787.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="523.6" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (19 samples, 0.18%)</title><rect x="520.6" y="771.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="523.6" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (19 samples, 0.18%)</title><rect x="520.6" y="755.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="523.6" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (19 samples, 0.18%)</title><rect x="520.6" y="739.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="523.6" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (19 samples, 0.18%)</title><rect x="520.6" y="723.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="523.6" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.prepareForDeferredProcessing (4 samples, 0.04%)</title><rect x="520.6" y="707.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="523.6" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.getFormattedMessage (4 samples, 0.04%)</title><rect x="520.6" y="691.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="523.6" y="702.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (4 samples, 0.04%)</title><rect x="520.6" y="675.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="523.6" y="686.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (4 samples, 0.04%)</title><rect x="520.6" y="659.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="523.6" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="520.6" y="643.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="523.6" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="520.6" y="627.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="523.6" y="638.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="520.6" y="611.0" width="0.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="523.6" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (15 samples, 0.14%)</title><rect x="521.0" y="707.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="524.0" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (13 samples, 0.12%)</title><rect x="521.0" y="691.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="524.0" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (13 samples, 0.12%)</title><rect x="521.0" y="675.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="524.0" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 0.06%)</title><rect x="521.4" y="659.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="524.4" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.06%)</title><rect x="521.4" y="643.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="524.4" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.06%)</title><rect x="521.4" y="627.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="524.4" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.06%)</title><rect x="521.4" y="611.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="524.4" y="622.0"></text>
</g>
<g>
<title>byte[] (6 samples, 0.06%)</title><rect x="521.4" y="595.0" width="0.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="524.4" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (4 samples, 0.04%)</title><rect x="522.0" y="659.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="525.0" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.04%)</title><rect x="522.0" y="643.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="525.0" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.get (1,250 samples, 11.77%)</title><rect x="522.8" y="851.0" width="138.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="525.8" y="862.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>one/nio/http/Response.ok (5 samples, 0.05%)</title><rect x="522.8" y="835.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="525.8" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (4 samples, 0.04%)</title><rect x="522.9" y="819.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="525.9" y="830.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="522.9" y="803.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="525.9" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,245 samples, 11.73%)</title><rect x="523.4" y="835.0" width="138.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="526.4" y="846.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (108 samples, 1.02%)</title><rect x="523.4" y="819.0" width="12.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="526.4" y="830.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (108 samples, 1.02%)</title><rect x="523.4" y="803.0" width="12.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="526.4" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (108 samples, 1.02%)</title><rect x="523.4" y="787.0" width="12.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="526.4" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (108 samples, 1.02%)</title><rect x="523.4" y="771.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="526.4" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (108 samples, 1.02%)</title><rect x="523.4" y="755.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="526.4" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (94 samples, 0.89%)</title><rect x="523.4" y="739.0" width="10.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="526.4" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (38 samples, 0.36%)</title><rect x="523.4" y="723.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="526.4" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (38 samples, 0.36%)</title><rect x="523.4" y="707.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="526.4" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (38 samples, 0.36%)</title><rect x="523.4" y="691.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="526.4" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (38 samples, 0.36%)</title><rect x="523.4" y="675.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="526.4" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (38 samples, 0.36%)</title><rect x="523.4" y="659.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="526.4" y="670.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (38 samples, 0.36%)</title><rect x="523.4" y="643.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="526.4" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (38 samples, 0.36%)</title><rect x="523.4" y="627.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="526.4" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (38 samples, 0.36%)</title><rect x="523.4" y="611.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="526.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (38 samples, 0.36%)</title><rect x="523.4" y="595.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="526.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (38 samples, 0.36%)</title><rect x="523.4" y="579.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="526.4" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (14 samples, 0.13%)</title><rect x="523.4" y="563.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="526.4" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (14 samples, 0.13%)</title><rect x="523.4" y="547.0" width="1.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="526.4" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (24 samples, 0.23%)</title><rect x="524.9" y="563.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="527.9" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (24 samples, 0.23%)</title><rect x="524.9" y="547.0" width="2.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="527.9" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (56 samples, 0.53%)</title><rect x="527.6" y="723.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="530.6" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (56 samples, 0.53%)</title><rect x="527.6" y="707.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="530.6" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (56 samples, 0.53%)</title><rect x="527.6" y="691.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="530.6" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (56 samples, 0.53%)</title><rect x="527.6" y="675.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="530.6" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (56 samples, 0.53%)</title><rect x="527.6" y="659.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="530.6" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (56 samples, 0.53%)</title><rect x="527.6" y="643.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="530.6" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (42 samples, 0.40%)</title><rect x="527.6" y="627.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="530.6" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (42 samples, 0.40%)</title><rect x="527.6" y="611.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="530.6" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (42 samples, 0.40%)</title><rect x="527.6" y="595.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="530.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (42 samples, 0.40%)</title><rect x="527.6" y="579.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="530.6" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7 samples, 0.07%)</title><rect x="527.6" y="563.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="530.6" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="527.6" y="547.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="530.6" y="558.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.07%)</title><rect x="527.6" y="531.0" width="0.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="530.6" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (30 samples, 0.28%)</title><rect x="528.4" y="563.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="531.4" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (30 samples, 0.28%)</title><rect x="528.4" y="547.0" width="3.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="531.4" y="558.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (14 samples, 0.13%)</title><rect x="532.3" y="627.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="535.3" y="638.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (14 samples, 0.13%)</title><rect x="532.3" y="611.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="535.3" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (14 samples, 0.13%)</title><rect x="532.3" y="595.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="535.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (14 samples, 0.13%)</title><rect x="532.3" y="579.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="535.3" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (14 samples, 0.13%)</title><rect x="532.3" y="563.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="535.3" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (11 samples, 0.10%)</title><rect x="532.3" y="547.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="535.3" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (11 samples, 0.10%)</title><rect x="532.3" y="531.0" width="1.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="535.3" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.03%)</title><rect x="533.5" y="547.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="536.5" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3 samples, 0.03%)</title><rect x="533.5" y="531.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="536.5" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$117/473479162.apply (14 samples, 0.13%)</title><rect x="533.8" y="739.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="536.8" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (14 samples, 0.13%)</title><rect x="533.8" y="723.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="536.8" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6 samples, 0.06%)</title><rect x="533.8" y="707.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="536.8" y="718.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (6 samples, 0.06%)</title><rect x="533.8" y="691.0" width="0.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="536.8" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (8 samples, 0.08%)</title><rect x="534.5" y="707.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="537.5" y="718.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (8 samples, 0.08%)</title><rect x="534.5" y="691.0" width="0.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="537.5" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.iterator (1,134 samples, 10.68%)</title><rect x="535.7" y="819.0" width="126.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="538.7" y="830.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.cellIterator (1,132 samples, 10.66%)</title><rect x="535.9" y="803.0" width="125.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="538.9" y="814.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.freshCellIterators (1,127 samples, 10.62%)</title><rect x="536.1" y="787.0" width="125.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="539.1" y="798.0">ru/mail/polis/d..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (290 samples, 2.73%)</title><rect x="536.1" y="771.0" width="32.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="539.1" y="782.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (288 samples, 2.71%)</title><rect x="536.4" y="755.0" width="32.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="539.4" y="766.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (8 samples, 0.08%)</title><rect x="536.4" y="739.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="539.4" y="750.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (8 samples, 0.08%)</title><rect x="536.4" y="723.0" width="0.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="539.4" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (280 samples, 2.64%)</title><rect x="537.3" y="739.0" width="31.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="540.3" y="750.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (280 samples, 2.64%)</title><rect x="537.3" y="723.0" width="31.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="540.3" y="734.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (6 samples, 0.06%)</title><rect x="537.3" y="707.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="540.3" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.06%)</title><rect x="537.3" y="691.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="540.3" y="702.0"></text>
</g>
<g>
<title>java.lang.Object[] (6 samples, 0.06%)</title><rect x="537.3" y="675.0" width="0.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="540.3" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (274 samples, 2.58%)</title><rect x="537.9" y="707.0" width="30.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="540.9" y="718.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (274 samples, 2.58%)</title><rect x="537.9" y="691.0" width="30.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="540.9" y="702.0">ja..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (274 samples, 2.58%)</title><rect x="537.9" y="675.0" width="30.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="540.9" y="686.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (274 samples, 2.58%)</title><rect x="537.9" y="659.0" width="30.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="540.9" y="670.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (197 samples, 1.86%)</title><rect x="537.9" y="643.0" width="21.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="540.9" y="654.0">c..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (3 samples, 0.03%)</title><rect x="537.9" y="627.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="540.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (194 samples, 1.83%)</title><rect x="538.3" y="627.0" width="21.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="541.3" y="638.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (194 samples, 1.83%)</title><rect x="538.3" y="611.0" width="21.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="541.3" y="622.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (194 samples, 1.83%)</title><rect x="538.3" y="595.0" width="21.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="541.3" y="606.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (44 samples, 0.41%)</title><rect x="538.3" y="579.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="541.3" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (44 samples, 0.41%)</title><rect x="538.3" y="563.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="541.3" y="574.0"></text>
</g>
<g>
<title>byte[] (44 samples, 0.41%)</title><rect x="538.3" y="547.0" width="4.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="541.3" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (113 samples, 1.06%)</title><rect x="543.2" y="579.0" width="12.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="546.2" y="590.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (113 samples, 1.06%)</title><rect x="543.2" y="563.0" width="12.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="546.2" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Cell (7 samples, 0.07%)</title><rect x="555.7" y="579.0" width="0.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="558.7" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Value (9 samples, 0.08%)</title><rect x="556.5" y="579.0" width="1.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="559.5" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (21 samples, 0.20%)</title><rect x="557.5" y="579.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="560.5" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (21 samples, 0.20%)</title><rect x="557.5" y="563.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="560.5" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (21 samples, 0.20%)</title><rect x="557.5" y="547.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="560.5" y="558.0"></text>
</g>
<g>
<title>byte[] (21 samples, 0.20%)</title><rect x="557.5" y="531.0" width="2.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="560.5" y="542.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (77 samples, 0.73%)</title><rect x="559.8" y="643.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="562.8" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (77 samples, 0.73%)</title><rect x="559.8" y="627.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="562.8" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (77 samples, 0.73%)</title><rect x="559.8" y="611.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="562.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (77 samples, 0.73%)</title><rect x="559.8" y="595.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="562.8" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (77 samples, 0.73%)</title><rect x="559.8" y="579.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="562.8" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (42 samples, 0.40%)</title><rect x="559.8" y="563.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="562.8" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (42 samples, 0.40%)</title><rect x="559.8" y="547.0" width="4.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="562.8" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (33 samples, 0.31%)</title><rect x="564.5" y="563.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="567.5" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (33 samples, 0.31%)</title><rect x="564.5" y="547.0" width="3.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="567.5" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (818 samples, 7.70%)</title><rect x="568.5" y="771.0" width="90.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="571.5" y="782.0">java/util/..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (818 samples, 7.70%)</title><rect x="568.5" y="755.0" width="90.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="571.5" y="766.0">java/lang/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$109/352000052.accept (817 samples, 7.70%)</title><rect x="568.6" y="739.0" width="90.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="571.6" y="750.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.lambda$freshCellIterators$6 (817 samples, 7.70%)</title><rect x="568.6" y="723.0" width="90.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="571.6" y="734.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.iterator (817 samples, 7.70%)</title><rect x="568.6" y="707.0" width="90.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="571.6" y="718.0">ru/mail/po..</text>
</g>
<g>
<title>ru.mail.polis.dao.impl.tables.SSTable$1 (13 samples, 0.12%)</title><rect x="568.6" y="691.0" width="1.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="571.6" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt; (804 samples, 7.57%)</title><rect x="570.0" y="691.0" width="89.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="573.0" y="702.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getPosition (804 samples, 7.57%)</title><rect x="570.0" y="675.0" width="89.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="573.0" y="686.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.keyAt (804 samples, 7.57%)</title><rect x="570.0" y="659.0" width="89.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="573.0" y="670.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (344 samples, 3.24%)</title><rect x="570.0" y="643.0" width="38.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="573.0" y="654.0">jav..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (344 samples, 3.24%)</title><rect x="570.0" y="627.0" width="38.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="573.0" y="638.0">jav..</text>
</g>
<g>
<title>byte[] (344 samples, 3.24%)</title><rect x="570.0" y="611.0" width="38.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="573.0" y="622.0">byt..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (308 samples, 2.90%)</title><rect x="608.3" y="643.0" width="34.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="611.3" y="654.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (308 samples, 2.90%)</title><rect x="608.3" y="627.0" width="34.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="611.3" y="638.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (152 samples, 1.43%)</title><rect x="642.5" y="643.0" width="16.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="645.5" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (152 samples, 1.43%)</title><rect x="642.5" y="627.0" width="16.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="645.5" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (152 samples, 1.43%)</title><rect x="642.5" y="611.0" width="16.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="645.5" y="622.0"></text>
</g>
<g>
<title>byte[] (152 samples, 1.43%)</title><rect x="642.5" y="595.0" width="16.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="645.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (18 samples, 0.17%)</title><rect x="659.4" y="771.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="662.4" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (18 samples, 0.17%)</title><rect x="659.4" y="755.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="662.4" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (18 samples, 0.17%)</title><rect x="659.4" y="739.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="662.4" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (9 samples, 0.08%)</title><rect x="659.4" y="723.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="662.4" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (9 samples, 0.08%)</title><rect x="659.4" y="707.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="662.4" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (9 samples, 0.08%)</title><rect x="659.4" y="691.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="662.4" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.08%)</title><rect x="659.4" y="675.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="662.4" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.08%)</title><rect x="659.4" y="659.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="662.4" y="670.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (9 samples, 0.08%)</title><rect x="659.4" y="643.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="662.4" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (9 samples, 0.08%)</title><rect x="659.4" y="627.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="662.4" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (9 samples, 0.08%)</title><rect x="659.4" y="611.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="662.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (9 samples, 0.08%)</title><rect x="659.4" y="595.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="662.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (9 samples, 0.08%)</title><rect x="659.4" y="579.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="662.4" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.05%)</title><rect x="659.4" y="563.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="662.4" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (5 samples, 0.05%)</title><rect x="659.4" y="547.0" width="0.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="662.4" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.04%)</title><rect x="660.0" y="563.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="663.0" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4 samples, 0.04%)</title><rect x="660.0" y="547.0" width="0.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="663.0" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (9 samples, 0.08%)</title><rect x="660.4" y="723.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="663.4" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (9 samples, 0.08%)</title><rect x="660.4" y="707.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="663.4" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (9 samples, 0.08%)</title><rect x="660.4" y="691.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="663.4" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (9 samples, 0.08%)</title><rect x="660.4" y="675.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="663.4" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.08%)</title><rect x="660.4" y="659.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="663.4" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.08%)</title><rect x="660.4" y="643.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="663.4" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (7 samples, 0.07%)</title><rect x="660.4" y="627.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="663.4" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (7 samples, 0.07%)</title><rect x="660.4" y="611.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="663.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (7 samples, 0.07%)</title><rect x="660.4" y="595.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="663.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (7 samples, 0.07%)</title><rect x="660.4" y="579.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="663.4" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.03%)</title><rect x="660.4" y="563.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="663.4" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="660.4" y="547.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="663.4" y="558.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="660.4" y="531.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="663.4" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.03%)</title><rect x="660.7" y="563.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="663.7" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3 samples, 0.03%)</title><rect x="660.7" y="547.0" width="0.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="663.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.iterator (3 samples, 0.03%)</title><rect x="661.4" y="787.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="664.4" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.07%)</title><rect x="661.7" y="915.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="664.7" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="662.1" y="899.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="665.1" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="662.1" y="883.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="665.1" y="894.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="662.5" y="915.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="665.5" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="662.5" y="899.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="665.5" y="910.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="662.6" y="883.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="665.6" y="894.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="662.6" y="867.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="665.6" y="878.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3 samples, 0.03%)</title><rect x="662.6" y="851.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="665.6" y="862.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="662.6" y="835.0" width="0.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="665.6" y="846.0"></text>
</g>
<g>
<title>[NIO Selector #5 tid=6991] (1,163 samples, 10.95%)</title><rect x="663.0" y="995.0" width="129.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="666.0" y="1006.0">[NIO Selector #5..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,163 samples, 10.95%)</title><rect x="663.0" y="979.0" width="129.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="666.0" y="990.0">one/nio/server/S..</text>
</g>
<g>
<title>one/nio/net/Session.process (1,163 samples, 10.95%)</title><rect x="663.0" y="963.0" width="129.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="666.0" y="974.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,163 samples, 10.95%)</title><rect x="663.0" y="947.0" width="129.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="666.0" y="958.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,163 samples, 10.95%)</title><rect x="663.0" y="931.0" width="129.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="666.0" y="942.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,144 samples, 10.78%)</title><rect x="663.0" y="915.0" width="127.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="666.0" y="926.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,144 samples, 10.78%)</title><rect x="663.0" y="899.0" width="127.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="666.0" y="910.0">one/nio/http/Htt..</text>
</g>
<g>
<title>RequestHandler0_response.handleRequest (1,143 samples, 10.77%)</title><rect x="663.0" y="883.0" width="127.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="666.0" y="894.0">RequestHandler0_..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (1,140 samples, 10.74%)</title><rect x="663.3" y="867.0" width="126.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="666.3" y="878.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (7 samples, 0.07%)</title><rect x="663.3" y="851.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="666.3" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (7 samples, 0.07%)</title><rect x="663.3" y="835.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="666.3" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (7 samples, 0.07%)</title><rect x="663.3" y="819.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="666.3" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (7 samples, 0.07%)</title><rect x="663.3" y="803.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="666.3" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (7 samples, 0.07%)</title><rect x="663.3" y="787.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.3" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (7 samples, 0.07%)</title><rect x="663.3" y="771.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="666.3" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (7 samples, 0.07%)</title><rect x="663.3" y="755.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="666.3" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (7 samples, 0.07%)</title><rect x="663.3" y="739.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="666.3" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (7 samples, 0.07%)</title><rect x="663.3" y="723.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="666.3" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (6 samples, 0.06%)</title><rect x="663.4" y="707.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="666.4" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (5 samples, 0.05%)</title><rect x="663.4" y="691.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="666.4" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (5 samples, 0.05%)</title><rect x="663.4" y="675.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="666.4" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.04%)</title><rect x="663.5" y="659.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="666.5" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.04%)</title><rect x="663.5" y="643.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="666.5" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.04%)</title><rect x="663.5" y="627.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="666.5" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.04%)</title><rect x="663.5" y="611.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="666.5" y="622.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.04%)</title><rect x="663.5" y="595.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="666.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.get (1,132 samples, 10.66%)</title><rect x="664.2" y="851.0" width="125.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="667.2" y="862.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,128 samples, 10.62%)</title><rect x="664.4" y="835.0" width="125.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="667.4" y="846.0">ru/mail/polis/d..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (107 samples, 1.01%)</title><rect x="664.4" y="819.0" width="11.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="667.4" y="830.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (107 samples, 1.01%)</title><rect x="664.4" y="803.0" width="11.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="667.4" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (107 samples, 1.01%)</title><rect x="664.4" y="787.0" width="11.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="667.4" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (107 samples, 1.01%)</title><rect x="664.4" y="771.0" width="11.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="667.4" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (107 samples, 1.01%)</title><rect x="664.4" y="755.0" width="11.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="667.4" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (90 samples, 0.85%)</title><rect x="664.4" y="739.0" width="10.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="667.4" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (51 samples, 0.48%)</title><rect x="664.4" y="723.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="667.4" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (51 samples, 0.48%)</title><rect x="664.4" y="707.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="667.4" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (51 samples, 0.48%)</title><rect x="664.4" y="691.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="667.4" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (51 samples, 0.48%)</title><rect x="664.4" y="675.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="667.4" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (51 samples, 0.48%)</title><rect x="664.4" y="659.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="667.4" y="670.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (51 samples, 0.48%)</title><rect x="664.4" y="643.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="667.4" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (51 samples, 0.48%)</title><rect x="664.4" y="627.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="667.4" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (51 samples, 0.48%)</title><rect x="664.4" y="611.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="667.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (51 samples, 0.48%)</title><rect x="664.4" y="595.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="667.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (51 samples, 0.48%)</title><rect x="664.4" y="579.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="667.4" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (20 samples, 0.19%)</title><rect x="664.4" y="563.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="667.4" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (20 samples, 0.19%)</title><rect x="664.4" y="547.0" width="2.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="667.4" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (31 samples, 0.29%)</title><rect x="666.6" y="563.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="669.6" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (31 samples, 0.29%)</title><rect x="666.6" y="547.0" width="3.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="669.6" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (39 samples, 0.37%)</title><rect x="670.1" y="723.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="673.1" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (39 samples, 0.37%)</title><rect x="670.1" y="707.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="673.1" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (39 samples, 0.37%)</title><rect x="670.1" y="691.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="673.1" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (39 samples, 0.37%)</title><rect x="670.1" y="675.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="673.1" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (39 samples, 0.37%)</title><rect x="670.1" y="659.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="673.1" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (39 samples, 0.37%)</title><rect x="670.1" y="643.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="673.1" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (32 samples, 0.30%)</title><rect x="670.1" y="627.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="673.1" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (32 samples, 0.30%)</title><rect x="670.1" y="611.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="673.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (32 samples, 0.30%)</title><rect x="670.1" y="595.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="673.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (32 samples, 0.30%)</title><rect x="670.1" y="579.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="673.1" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7 samples, 0.07%)</title><rect x="670.1" y="563.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="673.1" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="670.1" y="547.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="673.1" y="558.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.07%)</title><rect x="670.1" y="531.0" width="0.8" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="673.1" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (20 samples, 0.19%)</title><rect x="670.9" y="563.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="673.9" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (20 samples, 0.19%)</title><rect x="670.9" y="547.0" width="2.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="673.9" y="558.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (7 samples, 0.07%)</title><rect x="673.6" y="627.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="676.6" y="638.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (7 samples, 0.07%)</title><rect x="673.6" y="611.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="676.6" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (7 samples, 0.07%)</title><rect x="673.6" y="595.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="676.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (7 samples, 0.07%)</title><rect x="673.6" y="579.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="676.6" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (7 samples, 0.07%)</title><rect x="673.6" y="563.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="676.6" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="673.6" y="547.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="676.6" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3 samples, 0.03%)</title><rect x="673.6" y="531.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="676.6" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.04%)</title><rect x="674.0" y="547.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="677.0" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4 samples, 0.04%)</title><rect x="674.0" y="531.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="677.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$117/473479162.apply (17 samples, 0.16%)</title><rect x="674.4" y="739.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="677.4" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (17 samples, 0.16%)</title><rect x="674.4" y="723.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="677.4" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (10 samples, 0.09%)</title><rect x="674.4" y="707.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="677.4" y="718.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (10 samples, 0.09%)</title><rect x="674.4" y="691.0" width="1.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="677.4" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (7 samples, 0.07%)</title><rect x="675.5" y="707.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="678.5" y="718.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7 samples, 0.07%)</title><rect x="675.5" y="691.0" width="0.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="678.5" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.iterator (1,017 samples, 9.58%)</title><rect x="676.7" y="819.0" width="113.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="679.7" y="830.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.cellIterator (1,017 samples, 9.58%)</title><rect x="676.7" y="803.0" width="113.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="679.7" y="814.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.freshCellIterators (1,012 samples, 9.53%)</title><rect x="677.0" y="787.0" width="112.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="680.0" y="798.0">ru/mail/polis/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (264 samples, 2.49%)</title><rect x="677.0" y="771.0" width="29.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="680.0" y="782.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (264 samples, 2.49%)</title><rect x="677.0" y="755.0" width="29.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="680.0" y="766.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (7 samples, 0.07%)</title><rect x="677.2" y="739.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="680.2" y="750.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (7 samples, 0.07%)</title><rect x="677.2" y="723.0" width="0.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="680.2" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (254 samples, 2.39%)</title><rect x="678.1" y="739.0" width="28.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="681.1" y="750.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (254 samples, 2.39%)</title><rect x="678.1" y="723.0" width="28.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="681.1" y="734.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (8 samples, 0.08%)</title><rect x="678.1" y="707.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="681.1" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.08%)</title><rect x="678.1" y="691.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="681.1" y="702.0"></text>
</g>
<g>
<title>java.lang.Object[] (8 samples, 0.08%)</title><rect x="678.1" y="675.0" width="0.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="681.1" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (246 samples, 2.32%)</title><rect x="679.0" y="707.0" width="27.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="682.0" y="718.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (246 samples, 2.32%)</title><rect x="679.0" y="691.0" width="27.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="682.0" y="702.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (246 samples, 2.32%)</title><rect x="679.0" y="675.0" width="27.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="682.0" y="686.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (246 samples, 2.32%)</title><rect x="679.0" y="659.0" width="27.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="682.0" y="670.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (183 samples, 1.72%)</title><rect x="679.0" y="643.0" width="20.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="682.0" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (182 samples, 1.71%)</title><rect x="679.1" y="627.0" width="20.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="682.1" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (182 samples, 1.71%)</title><rect x="679.1" y="611.0" width="20.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="682.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (182 samples, 1.71%)</title><rect x="679.1" y="595.0" width="20.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="682.1" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (38 samples, 0.36%)</title><rect x="679.1" y="579.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="682.1" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (38 samples, 0.36%)</title><rect x="679.1" y="563.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="682.1" y="574.0"></text>
</g>
<g>
<title>byte[] (38 samples, 0.36%)</title><rect x="679.1" y="547.0" width="4.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="682.1" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (109 samples, 1.03%)</title><rect x="683.3" y="579.0" width="12.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="686.3" y="590.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (109 samples, 1.03%)</title><rect x="683.3" y="563.0" width="12.1" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="686.3" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Cell (4 samples, 0.04%)</title><rect x="695.4" y="579.0" width="0.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="698.4" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Value (11 samples, 0.10%)</title><rect x="695.9" y="579.0" width="1.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="698.9" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (20 samples, 0.19%)</title><rect x="697.1" y="579.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="700.1" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (20 samples, 0.19%)</title><rect x="697.1" y="563.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="700.1" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (20 samples, 0.19%)</title><rect x="697.1" y="547.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="700.1" y="558.0"></text>
</g>
<g>
<title>byte[] (20 samples, 0.19%)</title><rect x="697.1" y="531.0" width="2.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="700.1" y="542.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (63 samples, 0.59%)</title><rect x="699.3" y="643.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="702.3" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (63 samples, 0.59%)</title><rect x="699.3" y="627.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="702.3" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (63 samples, 0.59%)</title><rect x="699.3" y="611.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="702.3" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (63 samples, 0.59%)</title><rect x="699.3" y="595.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="702.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (63 samples, 0.59%)</title><rect x="699.3" y="579.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="702.3" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (28 samples, 0.26%)</title><rect x="699.3" y="563.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="702.3" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (28 samples, 0.26%)</title><rect x="699.3" y="547.0" width="3.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="702.3" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (26 samples, 0.24%)</title><rect x="702.4" y="563.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="705.4" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (26 samples, 0.24%)</title><rect x="702.4" y="547.0" width="2.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="705.4" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="705.3" y="563.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="708.3" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (4 samples, 0.04%)</title><rect x="705.3" y="547.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="708.3" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (4 samples, 0.04%)</title><rect x="705.3" y="531.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="708.3" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (5 samples, 0.05%)</title><rect x="705.8" y="563.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="708.8" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (5 samples, 0.05%)</title><rect x="705.8" y="547.0" width="0.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="708.8" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (725 samples, 6.83%)</title><rect x="706.4" y="771.0" width="80.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="709.4" y="782.0">java/util..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (725 samples, 6.83%)</title><rect x="706.4" y="755.0" width="80.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="709.4" y="766.0">java/lang..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$109/352000052.accept (724 samples, 6.82%)</title><rect x="706.5" y="739.0" width="80.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="709.5" y="750.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.lambda$freshCellIterators$6 (724 samples, 6.82%)</title><rect x="706.5" y="723.0" width="80.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="709.5" y="734.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.iterator (724 samples, 6.82%)</title><rect x="706.5" y="707.0" width="80.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="709.5" y="718.0">ru/mail/p..</text>
</g>
<g>
<title>ru.mail.polis.dao.impl.tables.SSTable$1 (9 samples, 0.08%)</title><rect x="706.5" y="691.0" width="1.0" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="709.5" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt; (715 samples, 6.73%)</title><rect x="707.5" y="691.0" width="79.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="710.5" y="702.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getPosition (715 samples, 6.73%)</title><rect x="707.5" y="675.0" width="79.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="710.5" y="686.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.keyAt (715 samples, 6.73%)</title><rect x="707.5" y="659.0" width="79.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="710.5" y="670.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (336 samples, 3.16%)</title><rect x="707.5" y="643.0" width="37.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="710.5" y="654.0">jav..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (336 samples, 3.16%)</title><rect x="707.5" y="627.0" width="37.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="710.5" y="638.0">jav..</text>
</g>
<g>
<title>byte[] (336 samples, 3.16%)</title><rect x="707.5" y="611.0" width="37.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="710.5" y="622.0">byt..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (266 samples, 2.51%)</title><rect x="744.9" y="643.0" width="29.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="747.9" y="654.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (266 samples, 2.51%)</title><rect x="744.9" y="627.0" width="29.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="747.9" y="638.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (113 samples, 1.06%)</title><rect x="774.4" y="643.0" width="12.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="777.4" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (113 samples, 1.06%)</title><rect x="774.4" y="627.0" width="12.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="777.4" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (113 samples, 1.06%)</title><rect x="774.4" y="611.0" width="12.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="777.4" y="622.0"></text>
</g>
<g>
<title>byte[] (113 samples, 1.06%)</title><rect x="774.4" y="595.0" width="12.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="777.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (22 samples, 0.21%)</title><rect x="787.0" y="771.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="790.0" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (22 samples, 0.21%)</title><rect x="787.0" y="755.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="790.0" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (22 samples, 0.21%)</title><rect x="787.0" y="739.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="790.0" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (14 samples, 0.13%)</title><rect x="787.0" y="723.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="790.0" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (14 samples, 0.13%)</title><rect x="787.0" y="707.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="790.0" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (14 samples, 0.13%)</title><rect x="787.0" y="691.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="790.0" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (14 samples, 0.13%)</title><rect x="787.0" y="675.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="790.0" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (14 samples, 0.13%)</title><rect x="787.0" y="659.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="790.0" y="670.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (14 samples, 0.13%)</title><rect x="787.0" y="643.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="790.0" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (14 samples, 0.13%)</title><rect x="787.0" y="627.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="790.0" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (14 samples, 0.13%)</title><rect x="787.0" y="611.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="790.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (14 samples, 0.13%)</title><rect x="787.0" y="595.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="790.0" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (14 samples, 0.13%)</title><rect x="787.0" y="579.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="790.0" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (7 samples, 0.07%)</title><rect x="787.0" y="563.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="790.0" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (7 samples, 0.07%)</title><rect x="787.0" y="547.0" width="0.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="790.0" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (7 samples, 0.07%)</title><rect x="787.8" y="563.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="790.8" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7 samples, 0.07%)</title><rect x="787.8" y="547.0" width="0.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="790.8" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (8 samples, 0.08%)</title><rect x="788.6" y="723.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="791.6" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (8 samples, 0.08%)</title><rect x="788.6" y="707.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="791.6" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (8 samples, 0.08%)</title><rect x="788.6" y="691.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="791.6" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (8 samples, 0.08%)</title><rect x="788.6" y="675.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="791.6" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8 samples, 0.08%)</title><rect x="788.6" y="659.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="791.6" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8 samples, 0.08%)</title><rect x="788.6" y="643.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="791.6" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (7 samples, 0.07%)</title><rect x="788.6" y="627.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="791.6" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (7 samples, 0.07%)</title><rect x="788.6" y="611.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="791.6" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (7 samples, 0.07%)</title><rect x="788.6" y="595.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="791.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (7 samples, 0.07%)</title><rect x="788.6" y="579.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="791.6" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.05%)</title><rect x="788.8" y="563.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="791.8" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (5 samples, 0.05%)</title><rect x="788.8" y="547.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="791.8" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.iterator (3 samples, 0.03%)</title><rect x="789.4" y="787.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="792.4" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (15 samples, 0.14%)</title><rect x="790.1" y="915.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="793.1" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.13%)</title><rect x="790.2" y="899.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="793.2" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.13%)</title><rect x="790.2" y="883.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="793.2" y="894.0"></text>
</g>
<g>
<title>char[] (11 samples, 0.10%)</title><rect x="790.2" y="867.0" width="1.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="793.2" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="791.8" y="915.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="794.8" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="791.8" y="899.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="794.8" y="910.0"></text>
</g>
<g>
<title>char[] (3 samples, 0.03%)</title><rect x="791.8" y="883.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="794.8" y="894.0"></text>
</g>
<g>
<title>[NIO Selector #6 tid=6992] (1,220 samples, 11.49%)</title><rect x="792.2" y="995.0" width="135.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="795.2" y="1006.0">[NIO Selector #6 ..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,220 samples, 11.49%)</title><rect x="792.2" y="979.0" width="135.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="795.2" y="990.0">one/nio/server/Se..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (5 samples, 0.05%)</title><rect x="792.2" y="963.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="795.2" y="974.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (5 samples, 0.05%)</title><rect x="792.2" y="947.0" width="0.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="795.2" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,215 samples, 11.44%)</title><rect x="792.8" y="963.0" width="135.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="795.8" y="974.0">one/nio/net/Sessi..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,215 samples, 11.44%)</title><rect x="792.8" y="947.0" width="135.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="795.8" y="958.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,215 samples, 11.44%)</title><rect x="792.8" y="931.0" width="135.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="795.8" y="942.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,209 samples, 11.39%)</title><rect x="792.8" y="915.0" width="134.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="795.8" y="926.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,209 samples, 11.39%)</title><rect x="792.8" y="899.0" width="134.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="795.8" y="910.0">one/nio/http/Http..</text>
</g>
<g>
<title>RequestHandler0_response.handleRequest (1,208 samples, 11.38%)</title><rect x="792.8" y="883.0" width="134.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="795.8" y="894.0">RequestHandler0_r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (5 samples, 0.05%)</title><rect x="792.8" y="867.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="795.8" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (5 samples, 0.05%)</title><rect x="792.8" y="851.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="795.8" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.03%)</title><rect x="792.8" y="835.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="795.8" y="846.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="792.8" y="819.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="795.8" y="830.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="792.8" y="803.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="795.8" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (1,203 samples, 11.33%)</title><rect x="793.3" y="867.0" width="133.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="796.3" y="878.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (9 samples, 0.08%)</title><rect x="793.3" y="851.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="796.3" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (9 samples, 0.08%)</title><rect x="793.3" y="835.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.3" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (9 samples, 0.08%)</title><rect x="793.3" y="819.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="796.3" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (8 samples, 0.08%)</title><rect x="793.4" y="803.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="796.4" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (8 samples, 0.08%)</title><rect x="793.4" y="787.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="796.4" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (8 samples, 0.08%)</title><rect x="793.4" y="771.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="796.4" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (8 samples, 0.08%)</title><rect x="793.4" y="755.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="796.4" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (8 samples, 0.08%)</title><rect x="793.4" y="739.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="796.4" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (8 samples, 0.08%)</title><rect x="793.4" y="723.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="796.4" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (6 samples, 0.06%)</title><rect x="793.7" y="707.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="796.7" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (4 samples, 0.04%)</title><rect x="793.7" y="691.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="796.7" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (4 samples, 0.04%)</title><rect x="793.7" y="675.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="796.7" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/core/util/CachingDateFormatter.format (3 samples, 0.03%)</title><rect x="793.7" y="659.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="796.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.get (1,193 samples, 11.24%)</title><rect x="794.4" y="851.0" width="132.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="797.4" y="862.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,191 samples, 11.22%)</title><rect x="794.6" y="835.0" width="132.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="797.6" y="846.0">ru/mail/polis/da..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (100 samples, 0.94%)</title><rect x="794.6" y="819.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="797.6" y="830.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (100 samples, 0.94%)</title><rect x="794.6" y="803.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="797.6" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (100 samples, 0.94%)</title><rect x="794.6" y="787.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="797.6" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (100 samples, 0.94%)</title><rect x="794.6" y="771.0" width="11.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="797.6" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (100 samples, 0.94%)</title><rect x="794.6" y="755.0" width="11.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="797.6" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (84 samples, 0.79%)</title><rect x="794.6" y="739.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="797.6" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (46 samples, 0.43%)</title><rect x="794.6" y="723.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="797.6" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (46 samples, 0.43%)</title><rect x="794.6" y="707.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="797.6" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (46 samples, 0.43%)</title><rect x="794.6" y="691.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="797.6" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (46 samples, 0.43%)</title><rect x="794.6" y="675.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="797.6" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (46 samples, 0.43%)</title><rect x="794.6" y="659.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="797.6" y="670.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (46 samples, 0.43%)</title><rect x="794.6" y="643.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="797.6" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (46 samples, 0.43%)</title><rect x="794.6" y="627.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="797.6" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (46 samples, 0.43%)</title><rect x="794.6" y="611.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="797.6" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (46 samples, 0.43%)</title><rect x="794.6" y="595.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="797.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (46 samples, 0.43%)</title><rect x="794.6" y="579.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="797.6" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (20 samples, 0.19%)</title><rect x="794.6" y="563.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="797.6" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (20 samples, 0.19%)</title><rect x="794.6" y="547.0" width="2.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="797.6" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (26 samples, 0.24%)</title><rect x="796.8" y="563.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="799.8" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (26 samples, 0.24%)</title><rect x="796.8" y="547.0" width="2.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="799.8" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (38 samples, 0.36%)</title><rect x="799.7" y="723.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="802.7" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (38 samples, 0.36%)</title><rect x="799.7" y="707.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="802.7" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (38 samples, 0.36%)</title><rect x="799.7" y="691.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="802.7" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (38 samples, 0.36%)</title><rect x="799.7" y="675.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="802.7" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (38 samples, 0.36%)</title><rect x="799.7" y="659.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="802.7" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (38 samples, 0.36%)</title><rect x="799.7" y="643.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="802.7" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (30 samples, 0.28%)</title><rect x="799.7" y="627.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="802.7" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (30 samples, 0.28%)</title><rect x="799.7" y="611.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="802.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (30 samples, 0.28%)</title><rect x="799.7" y="595.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="802.7" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (30 samples, 0.28%)</title><rect x="799.7" y="579.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="802.7" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (6 samples, 0.06%)</title><rect x="799.7" y="563.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="802.7" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="799.7" y="547.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="802.7" y="558.0"></text>
</g>
<g>
<title>byte[] (6 samples, 0.06%)</title><rect x="799.7" y="531.0" width="0.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="802.7" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (21 samples, 0.20%)</title><rect x="800.3" y="563.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="803.3" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (21 samples, 0.20%)</title><rect x="800.3" y="547.0" width="2.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="803.3" y="558.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (8 samples, 0.08%)</title><rect x="803.0" y="627.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="806.0" y="638.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (8 samples, 0.08%)</title><rect x="803.0" y="611.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="806.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (8 samples, 0.08%)</title><rect x="803.0" y="595.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="806.0" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (8 samples, 0.08%)</title><rect x="803.0" y="579.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="806.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (8 samples, 0.08%)</title><rect x="803.0" y="563.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="806.0" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6 samples, 0.06%)</title><rect x="803.0" y="547.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="806.0" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (6 samples, 0.06%)</title><rect x="803.0" y="531.0" width="0.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="806.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$117/473479162.apply (16 samples, 0.15%)</title><rect x="803.9" y="739.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="806.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (16 samples, 0.15%)</title><rect x="803.9" y="723.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="806.9" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6 samples, 0.06%)</title><rect x="803.9" y="707.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="806.9" y="718.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (6 samples, 0.06%)</title><rect x="803.9" y="691.0" width="0.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="806.9" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (10 samples, 0.09%)</title><rect x="804.6" y="707.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="807.6" y="718.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (10 samples, 0.09%)</title><rect x="804.6" y="691.0" width="1.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="807.6" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.iterator (1,089 samples, 10.26%)</title><rect x="805.9" y="819.0" width="121.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="808.9" y="830.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.cellIterator (1,089 samples, 10.26%)</title><rect x="805.9" y="803.0" width="121.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="808.9" y="814.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.freshCellIterators (1,084 samples, 10.21%)</title><rect x="806.0" y="787.0" width="120.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="809.0" y="798.0">ru/mail/polis/d..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (297 samples, 2.80%)</title><rect x="806.0" y="771.0" width="33.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="809.0" y="782.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (297 samples, 2.80%)</title><rect x="806.0" y="755.0" width="33.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="809.0" y="766.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (8 samples, 0.08%)</title><rect x="806.0" y="739.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="809.0" y="750.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (8 samples, 0.08%)</title><rect x="806.0" y="723.0" width="0.9" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="809.0" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (289 samples, 2.72%)</title><rect x="806.9" y="739.0" width="32.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="809.9" y="750.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (289 samples, 2.72%)</title><rect x="806.9" y="723.0" width="32.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="809.9" y="734.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (6 samples, 0.06%)</title><rect x="806.9" y="707.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="809.9" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.06%)</title><rect x="806.9" y="691.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="809.9" y="702.0"></text>
</g>
<g>
<title>java.lang.Object[] (6 samples, 0.06%)</title><rect x="806.9" y="675.0" width="0.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="809.9" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (283 samples, 2.67%)</title><rect x="807.6" y="707.0" width="31.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="810.6" y="718.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (283 samples, 2.67%)</title><rect x="807.6" y="691.0" width="31.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="810.6" y="702.0">ja..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (283 samples, 2.67%)</title><rect x="807.6" y="675.0" width="31.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="810.6" y="686.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (283 samples, 2.67%)</title><rect x="807.6" y="659.0" width="31.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="810.6" y="670.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (199 samples, 1.87%)</title><rect x="807.6" y="643.0" width="22.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="810.6" y="654.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (198 samples, 1.86%)</title><rect x="807.7" y="627.0" width="22.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="810.7" y="638.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (198 samples, 1.86%)</title><rect x="807.7" y="611.0" width="22.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="810.7" y="622.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (198 samples, 1.86%)</title><rect x="807.7" y="595.0" width="22.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="810.7" y="606.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (38 samples, 0.36%)</title><rect x="807.7" y="579.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="810.7" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (38 samples, 0.36%)</title><rect x="807.7" y="563.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="810.7" y="574.0"></text>
</g>
<g>
<title>byte[] (38 samples, 0.36%)</title><rect x="807.7" y="547.0" width="4.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="810.7" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (119 samples, 1.12%)</title><rect x="811.9" y="579.0" width="13.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="814.9" y="590.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (119 samples, 1.12%)</title><rect x="811.9" y="563.0" width="13.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="814.9" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Cell (11 samples, 0.10%)</title><rect x="825.1" y="579.0" width="1.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="828.1" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Value (10 samples, 0.09%)</title><rect x="826.3" y="579.0" width="1.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="829.3" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (20 samples, 0.19%)</title><rect x="827.5" y="579.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="830.5" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (20 samples, 0.19%)</title><rect x="827.5" y="563.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="830.5" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (20 samples, 0.19%)</title><rect x="827.5" y="547.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="830.5" y="558.0"></text>
</g>
<g>
<title>byte[] (20 samples, 0.19%)</title><rect x="827.5" y="531.0" width="2.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="830.5" y="542.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (84 samples, 0.79%)</title><rect x="829.7" y="643.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="832.7" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (84 samples, 0.79%)</title><rect x="829.7" y="627.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="832.7" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (84 samples, 0.79%)</title><rect x="829.7" y="611.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="832.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (84 samples, 0.79%)</title><rect x="829.7" y="595.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="832.7" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (84 samples, 0.79%)</title><rect x="829.7" y="579.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="832.7" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (31 samples, 0.29%)</title><rect x="829.7" y="563.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="832.7" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (31 samples, 0.29%)</title><rect x="829.7" y="547.0" width="3.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="832.7" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (42 samples, 0.40%)</title><rect x="833.1" y="563.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="836.1" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (42 samples, 0.40%)</title><rect x="833.1" y="547.0" width="4.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="836.1" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="837.8" y="563.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="840.8" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (4 samples, 0.04%)</title><rect x="837.8" y="547.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="840.8" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (4 samples, 0.04%)</title><rect x="837.8" y="531.0" width="0.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="840.8" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (7 samples, 0.07%)</title><rect x="838.2" y="563.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="841.2" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (7 samples, 0.07%)</title><rect x="838.2" y="547.0" width="0.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="841.2" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (758 samples, 7.14%)</title><rect x="839.0" y="771.0" width="84.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="842.0" y="782.0">java/util/..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (758 samples, 7.14%)</title><rect x="839.0" y="755.0" width="84.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="842.0" y="766.0">java/lang/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$109/352000052.accept (758 samples, 7.14%)</title><rect x="839.0" y="739.0" width="84.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="842.0" y="750.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.lambda$freshCellIterators$6 (758 samples, 7.14%)</title><rect x="839.0" y="723.0" width="84.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="842.0" y="734.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.iterator (758 samples, 7.14%)</title><rect x="839.0" y="707.0" width="84.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="842.0" y="718.0">ru/mail/po..</text>
</g>
<g>
<title>ru.mail.polis.dao.impl.tables.SSTable$1 (15 samples, 0.14%)</title><rect x="839.0" y="691.0" width="1.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="842.0" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt; (743 samples, 7.00%)</title><rect x="840.7" y="691.0" width="82.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="843.7" y="702.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getPosition (743 samples, 7.00%)</title><rect x="840.7" y="675.0" width="82.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="843.7" y="686.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.keyAt (743 samples, 7.00%)</title><rect x="840.7" y="659.0" width="82.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="843.7" y="670.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (327 samples, 3.08%)</title><rect x="840.7" y="643.0" width="36.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="843.7" y="654.0">jav..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (327 samples, 3.08%)</title><rect x="840.7" y="627.0" width="36.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="843.7" y="638.0">jav..</text>
</g>
<g>
<title>byte[] (327 samples, 3.08%)</title><rect x="840.7" y="611.0" width="36.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="843.7" y="622.0">byt..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (286 samples, 2.69%)</title><rect x="877.0" y="643.0" width="31.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="880.0" y="654.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (286 samples, 2.69%)</title><rect x="877.0" y="627.0" width="31.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="880.0" y="638.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (130 samples, 1.22%)</title><rect x="908.8" y="643.0" width="14.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="911.8" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (130 samples, 1.22%)</title><rect x="908.8" y="627.0" width="14.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="911.8" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (130 samples, 1.22%)</title><rect x="908.8" y="611.0" width="14.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="911.8" y="622.0"></text>
</g>
<g>
<title>byte[] (130 samples, 1.22%)</title><rect x="908.8" y="595.0" width="14.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="911.8" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (29 samples, 0.27%)</title><rect x="923.3" y="771.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="926.3" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (28 samples, 0.26%)</title><rect x="923.4" y="755.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="926.4" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (28 samples, 0.26%)</title><rect x="923.4" y="739.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="926.4" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (15 samples, 0.14%)</title><rect x="923.4" y="723.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="926.4" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (15 samples, 0.14%)</title><rect x="923.4" y="707.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="926.4" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (15 samples, 0.14%)</title><rect x="923.4" y="691.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="926.4" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (15 samples, 0.14%)</title><rect x="923.4" y="675.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="926.4" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (15 samples, 0.14%)</title><rect x="923.4" y="659.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="926.4" y="670.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (15 samples, 0.14%)</title><rect x="923.4" y="643.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="926.4" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (15 samples, 0.14%)</title><rect x="923.4" y="627.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="926.4" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (15 samples, 0.14%)</title><rect x="923.4" y="611.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="926.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (15 samples, 0.14%)</title><rect x="923.4" y="595.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="926.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (15 samples, 0.14%)</title><rect x="923.4" y="579.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="926.4" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (9 samples, 0.08%)</title><rect x="923.4" y="563.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="926.4" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (9 samples, 0.08%)</title><rect x="923.4" y="547.0" width="1.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="926.4" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6 samples, 0.06%)</title><rect x="924.4" y="563.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="927.4" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6 samples, 0.06%)</title><rect x="924.4" y="547.0" width="0.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="927.4" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (13 samples, 0.12%)</title><rect x="925.0" y="723.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="928.0" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (13 samples, 0.12%)</title><rect x="925.0" y="707.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="928.0" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (13 samples, 0.12%)</title><rect x="925.0" y="691.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="928.0" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (13 samples, 0.12%)</title><rect x="925.0" y="675.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="928.0" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 0.12%)</title><rect x="925.0" y="659.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="928.0" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 0.12%)</title><rect x="925.0" y="643.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="928.0" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (13 samples, 0.12%)</title><rect x="925.0" y="627.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="928.0" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (13 samples, 0.12%)</title><rect x="925.0" y="611.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="928.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (13 samples, 0.12%)</title><rect x="925.0" y="595.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="928.0" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (13 samples, 0.12%)</title><rect x="925.0" y="579.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="928.0" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.03%)</title><rect x="925.0" y="563.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="928.0" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="925.0" y="547.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="928.0" y="558.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="925.0" y="531.0" width="0.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="928.0" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (7 samples, 0.07%)</title><rect x="925.4" y="563.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="928.4" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7 samples, 0.07%)</title><rect x="925.4" y="547.0" width="0.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="928.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.iterator (4 samples, 0.04%)</title><rect x="926.5" y="787.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="929.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.04%)</title><rect x="927.1" y="915.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="930.1" y="926.0"></text>
</g>
<g>
<title>[NIO Selector #7 tid=6993] (1,174 samples, 11.06%)</title><rect x="927.8" y="995.0" width="130.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="930.8" y="1006.0">[NIO Selector #7..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,174 samples, 11.06%)</title><rect x="927.8" y="979.0" width="130.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="930.8" y="990.0">one/nio/server/S..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (11 samples, 0.10%)</title><rect x="927.8" y="963.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="930.8" y="974.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (11 samples, 0.10%)</title><rect x="927.8" y="947.0" width="1.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="930.8" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,163 samples, 10.95%)</title><rect x="929.0" y="963.0" width="129.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="932.0" y="974.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,163 samples, 10.95%)</title><rect x="929.0" y="947.0" width="129.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="932.0" y="958.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,163 samples, 10.95%)</title><rect x="929.0" y="931.0" width="129.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="932.0" y="942.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,157 samples, 10.90%)</title><rect x="929.0" y="915.0" width="128.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="932.0" y="926.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,157 samples, 10.90%)</title><rect x="929.0" y="899.0" width="128.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="932.0" y="910.0">one/nio/http/Htt..</text>
</g>
<g>
<title>RequestHandler0_response.handleRequest (1,157 samples, 10.90%)</title><rect x="929.0" y="883.0" width="128.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="932.0" y="894.0">RequestHandler0_..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (4 samples, 0.04%)</title><rect x="929.0" y="867.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="932.0" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (4 samples, 0.04%)</title><rect x="929.0" y="851.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="932.0" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (1,151 samples, 10.84%)</title><rect x="929.7" y="867.0" width="127.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="932.7" y="878.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (13 samples, 0.12%)</title><rect x="929.7" y="851.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="932.7" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (13 samples, 0.12%)</title><rect x="929.7" y="835.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="932.7" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (13 samples, 0.12%)</title><rect x="929.7" y="819.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="932.7" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (13 samples, 0.12%)</title><rect x="929.7" y="803.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="932.7" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (13 samples, 0.12%)</title><rect x="929.7" y="787.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="932.7" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (13 samples, 0.12%)</title><rect x="929.7" y="771.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="932.7" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (13 samples, 0.12%)</title><rect x="929.7" y="755.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="932.7" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (13 samples, 0.12%)</title><rect x="929.7" y="739.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="932.7" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (13 samples, 0.12%)</title><rect x="929.7" y="723.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="932.7" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.prepareForDeferredProcessing (4 samples, 0.04%)</title><rect x="929.7" y="707.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="932.7" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.getFormattedMessage (4 samples, 0.04%)</title><rect x="929.7" y="691.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="932.7" y="702.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (4 samples, 0.04%)</title><rect x="929.7" y="675.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="932.7" y="686.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (4 samples, 0.04%)</title><rect x="929.7" y="659.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="932.7" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (9 samples, 0.08%)</title><rect x="930.1" y="707.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="933.1" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (8 samples, 0.08%)</title><rect x="930.1" y="691.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="933.1" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (8 samples, 0.08%)</title><rect x="930.1" y="675.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="933.1" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.04%)</title><rect x="930.5" y="659.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="933.5" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.04%)</title><rect x="930.5" y="643.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="933.5" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.04%)</title><rect x="930.5" y="627.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="933.5" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.04%)</title><rect x="930.5" y="611.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="933.5" y="622.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.04%)</title><rect x="930.5" y="595.0" width="0.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="933.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.get (1,136 samples, 10.70%)</title><rect x="931.4" y="851.0" width="126.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="934.4" y="862.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,136 samples, 10.70%)</title><rect x="931.4" y="835.0" width="126.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="934.4" y="846.0">ru/mail/polis/da..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (111 samples, 1.05%)</title><rect x="931.4" y="819.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="934.4" y="830.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (111 samples, 1.05%)</title><rect x="931.4" y="803.0" width="12.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="934.4" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (111 samples, 1.05%)</title><rect x="931.4" y="787.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="934.4" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (111 samples, 1.05%)</title><rect x="931.4" y="771.0" width="12.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="934.4" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (111 samples, 1.05%)</title><rect x="931.4" y="755.0" width="12.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="934.4" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (99 samples, 0.93%)</title><rect x="931.4" y="739.0" width="11.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="934.4" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (38 samples, 0.36%)</title><rect x="931.4" y="723.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="934.4" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (38 samples, 0.36%)</title><rect x="931.4" y="707.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="934.4" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (38 samples, 0.36%)</title><rect x="931.4" y="691.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="934.4" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (38 samples, 0.36%)</title><rect x="931.4" y="675.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="934.4" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (38 samples, 0.36%)</title><rect x="931.4" y="659.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="934.4" y="670.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (38 samples, 0.36%)</title><rect x="931.4" y="643.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="934.4" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (38 samples, 0.36%)</title><rect x="931.4" y="627.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="934.4" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (38 samples, 0.36%)</title><rect x="931.4" y="611.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="934.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (38 samples, 0.36%)</title><rect x="931.4" y="595.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="934.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (38 samples, 0.36%)</title><rect x="931.4" y="579.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="934.4" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (17 samples, 0.16%)</title><rect x="931.4" y="563.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="934.4" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (17 samples, 0.16%)</title><rect x="931.4" y="547.0" width="1.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="934.4" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (21 samples, 0.20%)</title><rect x="933.3" y="563.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="936.3" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (21 samples, 0.20%)</title><rect x="933.3" y="547.0" width="2.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="936.3" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (61 samples, 0.57%)</title><rect x="935.6" y="723.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="938.6" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (61 samples, 0.57%)</title><rect x="935.6" y="707.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="938.6" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (61 samples, 0.57%)</title><rect x="935.6" y="691.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="938.6" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (61 samples, 0.57%)</title><rect x="935.6" y="675.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="938.6" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (61 samples, 0.57%)</title><rect x="935.6" y="659.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="938.6" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (61 samples, 0.57%)</title><rect x="935.6" y="643.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="938.6" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (47 samples, 0.44%)</title><rect x="935.6" y="627.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="938.6" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (47 samples, 0.44%)</title><rect x="935.6" y="611.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="938.6" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (47 samples, 0.44%)</title><rect x="935.6" y="595.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="938.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (47 samples, 0.44%)</title><rect x="935.6" y="579.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="938.6" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (4 samples, 0.04%)</title><rect x="935.6" y="563.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="938.6" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="935.6" y="547.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="938.6" y="558.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.04%)</title><rect x="935.6" y="531.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="938.6" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (38 samples, 0.36%)</title><rect x="936.0" y="563.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="939.0" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (38 samples, 0.36%)</title><rect x="936.0" y="547.0" width="4.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="939.0" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Cell (3 samples, 0.03%)</title><rect x="940.3" y="563.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="943.3" y="574.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (14 samples, 0.13%)</title><rect x="940.8" y="627.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="943.8" y="638.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (14 samples, 0.13%)</title><rect x="940.8" y="611.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="943.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (14 samples, 0.13%)</title><rect x="940.8" y="595.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="943.8" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (14 samples, 0.13%)</title><rect x="940.8" y="579.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="943.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (14 samples, 0.13%)</title><rect x="940.8" y="563.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="943.8" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (8 samples, 0.08%)</title><rect x="940.8" y="547.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="943.8" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (8 samples, 0.08%)</title><rect x="940.8" y="531.0" width="0.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="943.8" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6 samples, 0.06%)</title><rect x="941.7" y="547.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="944.7" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6 samples, 0.06%)</title><rect x="941.7" y="531.0" width="0.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="944.7" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$117/473479162.apply (12 samples, 0.11%)</title><rect x="942.4" y="739.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="945.4" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (12 samples, 0.11%)</title><rect x="942.4" y="723.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="945.4" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6 samples, 0.06%)</title><rect x="942.4" y="707.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="945.4" y="718.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (6 samples, 0.06%)</title><rect x="942.4" y="691.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="945.4" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6 samples, 0.06%)</title><rect x="943.0" y="707.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="946.0" y="718.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6 samples, 0.06%)</title><rect x="943.0" y="691.0" width="0.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="946.0" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.iterator (1,024 samples, 9.64%)</title><rect x="943.8" y="819.0" width="113.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="946.8" y="830.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.cellIterator (1,023 samples, 9.64%)</title><rect x="943.9" y="803.0" width="113.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="946.9" y="814.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.freshCellIterators (1,016 samples, 9.57%)</title><rect x="944.4" y="787.0" width="112.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="947.4" y="798.0">ru/mail/polis/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (259 samples, 2.44%)</title><rect x="944.4" y="771.0" width="28.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="947.4" y="782.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (259 samples, 2.44%)</title><rect x="944.4" y="755.0" width="28.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="947.4" y="766.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (13 samples, 0.12%)</title><rect x="944.5" y="739.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="947.5" y="750.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (13 samples, 0.12%)</title><rect x="944.5" y="723.0" width="1.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="947.5" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (243 samples, 2.29%)</title><rect x="946.2" y="739.0" width="27.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="949.2" y="750.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (243 samples, 2.29%)</title><rect x="946.2" y="723.0" width="27.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="949.2" y="734.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (242 samples, 2.28%)</title><rect x="946.3" y="707.0" width="26.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="949.3" y="718.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (242 samples, 2.28%)</title><rect x="946.3" y="691.0" width="26.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="949.3" y="702.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (242 samples, 2.28%)</title><rect x="946.3" y="675.0" width="26.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="949.3" y="686.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (242 samples, 2.28%)</title><rect x="946.3" y="659.0" width="26.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="949.3" y="670.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (169 samples, 1.59%)</title><rect x="946.3" y="643.0" width="18.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="949.3" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (167 samples, 1.57%)</title><rect x="946.5" y="627.0" width="18.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="949.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (167 samples, 1.57%)</title><rect x="946.5" y="611.0" width="18.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="949.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (167 samples, 1.57%)</title><rect x="946.5" y="595.0" width="18.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="949.5" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (35 samples, 0.33%)</title><rect x="946.5" y="579.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="949.5" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (35 samples, 0.33%)</title><rect x="946.5" y="563.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="949.5" y="574.0"></text>
</g>
<g>
<title>byte[] (35 samples, 0.33%)</title><rect x="946.5" y="547.0" width="3.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="949.5" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (94 samples, 0.89%)</title><rect x="950.4" y="579.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="953.4" y="590.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (94 samples, 0.89%)</title><rect x="950.4" y="563.0" width="10.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="953.4" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Cell (9 samples, 0.08%)</title><rect x="960.8" y="579.0" width="1.0" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="963.8" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Value (10 samples, 0.09%)</title><rect x="961.8" y="579.0" width="1.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="964.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (19 samples, 0.18%)</title><rect x="962.9" y="579.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="965.9" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (19 samples, 0.18%)</title><rect x="962.9" y="563.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="965.9" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (19 samples, 0.18%)</title><rect x="962.9" y="547.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="965.9" y="558.0"></text>
</g>
<g>
<title>byte[] (19 samples, 0.18%)</title><rect x="962.9" y="531.0" width="2.1" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="965.9" y="542.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (73 samples, 0.69%)</title><rect x="965.0" y="643.0" width="8.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="968.0" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (73 samples, 0.69%)</title><rect x="965.0" y="627.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="968.0" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (73 samples, 0.69%)</title><rect x="965.0" y="611.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="968.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (73 samples, 0.69%)</title><rect x="965.0" y="595.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="968.0" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (73 samples, 0.69%)</title><rect x="965.0" y="579.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="968.0" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (35 samples, 0.33%)</title><rect x="965.0" y="563.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="968.0" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (35 samples, 0.33%)</title><rect x="965.0" y="547.0" width="3.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="968.0" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (31 samples, 0.29%)</title><rect x="968.9" y="563.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="971.9" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (31 samples, 0.29%)</title><rect x="968.9" y="547.0" width="3.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="971.9" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (5 samples, 0.05%)</title><rect x="972.4" y="563.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="975.4" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (5 samples, 0.05%)</title><rect x="972.4" y="547.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="975.4" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (5 samples, 0.05%)</title><rect x="972.4" y="531.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="975.4" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (728 samples, 6.86%)</title><rect x="973.3" y="771.0" width="80.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="976.3" y="782.0">java/util..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (728 samples, 6.86%)</title><rect x="973.3" y="755.0" width="80.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="976.3" y="766.0">java/lang..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$109/352000052.accept (727 samples, 6.85%)</title><rect x="973.4" y="739.0" width="80.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="976.4" y="750.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.lambda$freshCellIterators$6 (727 samples, 6.85%)</title><rect x="973.4" y="723.0" width="80.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="976.4" y="734.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.iterator (727 samples, 6.85%)</title><rect x="973.4" y="707.0" width="80.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="976.4" y="718.0">ru/mail/p..</text>
</g>
<g>
<title>ru.mail.polis.dao.impl.tables.SSTable$1 (6 samples, 0.06%)</title><rect x="973.4" y="691.0" width="0.7" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="976.4" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt; (721 samples, 6.79%)</title><rect x="974.1" y="691.0" width="80.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="977.1" y="702.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getPosition (721 samples, 6.79%)</title><rect x="974.1" y="675.0" width="80.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="977.1" y="686.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.keyAt (721 samples, 6.79%)</title><rect x="974.1" y="659.0" width="80.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="977.1" y="670.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (298 samples, 2.81%)</title><rect x="974.1" y="643.0" width="33.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="977.1" y="654.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (298 samples, 2.81%)</title><rect x="974.1" y="627.0" width="33.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="977.1" y="638.0">ja..</text>
</g>
<g>
<title>byte[] (298 samples, 2.81%)</title><rect x="974.1" y="611.0" width="33.1" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="977.1" y="622.0">by..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (276 samples, 2.60%)</title><rect x="1007.2" y="643.0" width="30.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1010.2" y="654.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (276 samples, 2.60%)</title><rect x="1007.2" y="627.0" width="30.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1010.2" y="638.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (147 samples, 1.38%)</title><rect x="1037.8" y="643.0" width="16.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1040.8" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (147 samples, 1.38%)</title><rect x="1037.8" y="627.0" width="16.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1040.8" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (147 samples, 1.38%)</title><rect x="1037.8" y="611.0" width="16.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1040.8" y="622.0"></text>
</g>
<g>
<title>byte[] (147 samples, 1.38%)</title><rect x="1037.8" y="595.0" width="16.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1040.8" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (28 samples, 0.26%)</title><rect x="1054.2" y="771.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1057.2" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (27 samples, 0.25%)</title><rect x="1054.3" y="755.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1057.3" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (27 samples, 0.25%)</title><rect x="1054.3" y="739.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1057.3" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (14 samples, 0.13%)</title><rect x="1054.3" y="723.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1057.3" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (14 samples, 0.13%)</title><rect x="1054.3" y="707.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1057.3" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (14 samples, 0.13%)</title><rect x="1054.3" y="691.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1057.3" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (14 samples, 0.13%)</title><rect x="1054.3" y="675.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1057.3" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (14 samples, 0.13%)</title><rect x="1054.3" y="659.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1057.3" y="670.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (14 samples, 0.13%)</title><rect x="1054.3" y="643.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1057.3" y="654.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (14 samples, 0.13%)</title><rect x="1054.3" y="627.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1057.3" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (14 samples, 0.13%)</title><rect x="1054.3" y="611.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1057.3" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (14 samples, 0.13%)</title><rect x="1054.3" y="595.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1057.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (14 samples, 0.13%)</title><rect x="1054.3" y="579.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1057.3" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (7 samples, 0.07%)</title><rect x="1054.3" y="563.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1057.3" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (7 samples, 0.07%)</title><rect x="1054.3" y="547.0" width="0.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1057.3" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (7 samples, 0.07%)</title><rect x="1055.1" y="563.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1058.1" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7 samples, 0.07%)</title><rect x="1055.1" y="547.0" width="0.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1058.1" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (13 samples, 0.12%)</title><rect x="1055.9" y="723.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1058.9" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (13 samples, 0.12%)</title><rect x="1055.9" y="707.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1058.9" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (13 samples, 0.12%)</title><rect x="1055.9" y="691.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1058.9" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (13 samples, 0.12%)</title><rect x="1055.9" y="675.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1058.9" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 0.12%)</title><rect x="1055.9" y="659.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1058.9" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 0.12%)</title><rect x="1055.9" y="643.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1058.9" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (13 samples, 0.12%)</title><rect x="1055.9" y="627.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1058.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (13 samples, 0.12%)</title><rect x="1055.9" y="611.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1058.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (13 samples, 0.12%)</title><rect x="1055.9" y="595.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1058.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (13 samples, 0.12%)</title><rect x="1055.9" y="579.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1058.9" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.03%)</title><rect x="1055.9" y="563.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1058.9" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1055.9" y="547.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1058.9" y="558.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="1055.9" y="531.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1058.9" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6 samples, 0.06%)</title><rect x="1056.2" y="563.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1059.2" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6 samples, 0.06%)</title><rect x="1056.2" y="547.0" width="0.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1059.2" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.iterator (3 samples, 0.03%)</title><rect x="1057.3" y="787.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1060.3" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.03%)</title><rect x="1057.6" y="915.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1060.6" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="1058.0" y="915.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1061.0" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="1058.0" y="899.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1061.0" y="910.0"></text>
</g>
<g>
<title>[RMI TCP Connection(4)-127.0.0.1 tid=8426] (1,185 samples, 11.16%)</title><rect x="1058.3" y="995.0" width="131.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1061.3" y="1006.0">[RMI TCP Connect..</text>
</g>
<g>
<title>java/lang/Thread.run (1,185 samples, 11.16%)</title><rect x="1058.3" y="979.0" width="131.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1061.3" y="990.0">java/lang/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,185 samples, 11.16%)</title><rect x="1058.3" y="963.0" width="131.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1061.3" y="974.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,185 samples, 11.16%)</title><rect x="1058.3" y="947.0" width="131.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1061.3" y="958.0">java/util/concur..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (1,185 samples, 11.16%)</title><rect x="1058.3" y="931.0" width="131.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1061.3" y="942.0">sun/rmi/transpor..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1,185 samples, 11.16%)</title><rect x="1058.3" y="915.0" width="131.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1061.3" y="926.0">java/security/Ac..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$93/1386574298.run (1,185 samples, 11.16%)</title><rect x="1058.3" y="899.0" width="131.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1061.3" y="910.0">sun/rmi/transpor..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (1,185 samples, 11.16%)</title><rect x="1058.3" y="883.0" width="131.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1061.3" y="894.0">sun/rmi/transpor..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (1,185 samples, 11.16%)</title><rect x="1058.3" y="867.0" width="131.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1061.3" y="878.0">sun/rmi/transpor..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (1,185 samples, 11.16%)</title><rect x="1058.3" y="851.0" width="131.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1061.3" y="862.0">sun/rmi/transpor..</text>
</g>
<g>
<title>java.io.DataOutputStream (18 samples, 0.17%)</title><rect x="1058.3" y="835.0" width="2.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1061.3" y="846.0"></text>
</g>
<g>
<title>sun.rmi.transport.StreamRemoteCall (5 samples, 0.05%)</title><rect x="1060.5" y="835.0" width="0.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1063.5" y="846.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (1,160 samples, 10.93%)</title><rect x="1061.1" y="835.0" width="128.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1064.1" y="846.0">sun/rmi/transpor..</text>
</g>
<g>
<title>java/rmi/server/ObjID.read (3 samples, 0.03%)</title><rect x="1061.1" y="819.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1064.1" y="830.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1,018 samples, 9.59%)</title><rect x="1061.4" y="819.0" width="113.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1064.4" y="830.0">java/security/..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (1,018 samples, 9.59%)</title><rect x="1061.4" y="803.0" width="113.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1064.4" y="814.0">sun/rmi/transp..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (1,018 samples, 9.59%)</title><rect x="1061.4" y="787.0" width="113.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1064.4" y="798.0">sun/rmi/transp..</text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (1,018 samples, 9.59%)</title><rect x="1061.4" y="771.0" width="113.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1064.4" y="782.0">sun/rmi/server..</text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.05%)</title><rect x="1061.6" y="755.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1064.6" y="766.0"></text>
</g>
<g>
<title>java.lang.Long (5 samples, 0.05%)</title><rect x="1061.6" y="739.0" width="0.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1064.6" y="750.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (554 samples, 5.22%)</title><rect x="1062.3" y="755.0" width="61.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1065.3" y="766.0">java/l..</text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (554 samples, 5.22%)</title><rect x="1062.3" y="739.0" width="61.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1065.3" y="750.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor33.invoke (14 samples, 0.13%)</title><rect x="1062.3" y="723.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1065.3" y="734.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getAttribute (14 samples, 0.13%)</title><rect x="1062.3" y="707.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1065.3" y="718.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (14 samples, 0.13%)</title><rect x="1062.3" y="691.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1065.3" y="702.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (12 samples, 0.11%)</title><rect x="1062.5" y="675.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1065.5" y="686.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (12 samples, 0.11%)</title><rect x="1062.5" y="659.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1065.5" y="670.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.getAttribute (12 samples, 0.11%)</title><rect x="1062.5" y="643.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1065.5" y="654.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.getAttribute (12 samples, 0.11%)</title><rect x="1062.5" y="627.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1065.5" y="638.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.getMBean (5 samples, 0.05%)</title><rect x="1062.5" y="611.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1065.5" y="622.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/Repository.retrieve (5 samples, 0.05%)</title><rect x="1062.5" y="595.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1065.5" y="606.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/Repository.retrieveNamedObject (5 samples, 0.05%)</title><rect x="1062.5" y="579.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1065.5" y="590.0"></text>
</g>
<g>
<title>javax/management/ObjectName.getDomain (4 samples, 0.04%)</title><rect x="1062.6" y="563.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1065.6" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.04%)</title><rect x="1062.6" y="547.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1065.6" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.04%)</title><rect x="1062.6" y="531.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1065.6" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="1062.7" y="515.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1065.7" y="526.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="1062.7" y="499.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1065.7" y="510.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.nonDefaultDomain (5 samples, 0.05%)</title><rect x="1063.1" y="611.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1066.1" y="622.0"></text>
</g>
<g>
<title>javax/management/ObjectName.getDomain (5 samples, 0.05%)</title><rect x="1063.1" y="595.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1066.1" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.05%)</title><rect x="1063.1" y="579.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1066.1" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.05%)</title><rect x="1063.1" y="563.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1066.1" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="1063.3" y="547.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1066.3" y="558.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="1063.3" y="531.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1066.3" y="542.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (536 samples, 5.05%)</title><rect x="1063.9" y="723.0" width="59.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1066.9" y="734.0">jdk/in..</text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (536 samples, 5.05%)</title><rect x="1063.9" y="707.0" width="59.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1066.9" y="718.0">javax/..</text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (456 samples, 4.29%)</title><rect x="1063.9" y="691.0" width="50.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1066.9" y="702.0">javax..</text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (456 samples, 4.29%)</title><rect x="1063.9" y="675.0" width="50.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1066.9" y="686.0">javax..</text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (456 samples, 4.29%)</title><rect x="1063.9" y="659.0" width="50.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1066.9" y="670.0">javax..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (456 samples, 4.29%)</title><rect x="1063.9" y="643.0" width="50.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1066.9" y="654.0">com/s..</text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (456 samples, 4.29%)</title><rect x="1063.9" y="627.0" width="50.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1066.9" y="638.0">com/s..</text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (456 samples, 4.29%)</title><rect x="1063.9" y="611.0" width="50.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1066.9" y="622.0">javax..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (456 samples, 4.29%)</title><rect x="1063.9" y="595.0" width="50.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1066.9" y="606.0">com/s..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (456 samples, 4.29%)</title><rect x="1063.9" y="579.0" width="50.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1066.9" y="590.0">com/s..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (456 samples, 4.29%)</title><rect x="1063.9" y="563.0" width="50.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1066.9" y="574.0">com/s..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (456 samples, 4.29%)</title><rect x="1063.9" y="547.0" width="50.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1066.9" y="558.0">com/s..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (456 samples, 4.29%)</title><rect x="1063.9" y="531.0" width="50.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1066.9" y="542.0">com/s..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (456 samples, 4.29%)</title><rect x="1063.9" y="515.0" width="50.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1066.9" y="526.0">com/s..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (456 samples, 4.29%)</title><rect x="1063.9" y="499.0" width="50.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1066.9" y="510.0">com/s..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (410 samples, 3.86%)</title><rect x="1063.9" y="483.0" width="45.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1066.9" y="494.0">com/..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (410 samples, 3.86%)</title><rect x="1063.9" y="467.0" width="45.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1066.9" y="478.0">com/..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (409 samples, 3.85%)</title><rect x="1063.9" y="451.0" width="45.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1066.9" y="462.0">com/..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (409 samples, 3.85%)</title><rect x="1063.9" y="435.0" width="45.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1066.9" y="446.0">com/..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (142 samples, 1.34%)</title><rect x="1063.9" y="419.0" width="15.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1066.9" y="430.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (120 samples, 1.13%)</title><rect x="1063.9" y="403.0" width="13.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1066.9" y="414.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (113 samples, 1.06%)</title><rect x="1063.9" y="387.0" width="12.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1066.9" y="398.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (113 samples, 1.06%)</title><rect x="1063.9" y="371.0" width="12.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1066.9" y="382.0"></text>
</g>
<g>
<title>java.lang.Object[] (11 samples, 0.10%)</title><rect x="1063.9" y="355.0" width="1.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1066.9" y="366.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (63 samples, 0.59%)</title><rect x="1065.3" y="355.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1068.3" y="366.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (12 samples, 0.11%)</title><rect x="1065.3" y="339.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1068.3" y="350.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (3 samples, 0.03%)</title><rect x="1065.3" y="323.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1068.3" y="334.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1065.3" y="307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1068.3" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (3 samples, 0.03%)</title><rect x="1065.3" y="291.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1068.3" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (3 samples, 0.03%)</title><rect x="1065.3" y="275.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1068.3" y="286.0"></text>
</g>
<g>
<title>java.util.TreeMap$KeyIterator (3 samples, 0.03%)</title><rect x="1065.3" y="259.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1068.3" y="270.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableSet.equals (4 samples, 0.04%)</title><rect x="1065.6" y="323.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1068.6" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (4 samples, 0.04%)</title><rect x="1065.6" y="307.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1068.6" y="318.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.containsAll (4 samples, 0.04%)</title><rect x="1065.6" y="291.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1068.6" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (4 samples, 0.04%)</title><rect x="1065.6" y="275.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1068.6" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (4 samples, 0.04%)</title><rect x="1065.6" y="259.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1068.6" y="270.0"></text>
</g>
<g>
<title>java.util.TreeMap$KeyIterator (4 samples, 0.04%)</title><rect x="1065.6" y="243.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1068.6" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.keySet (5 samples, 0.05%)</title><rect x="1066.1" y="323.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1069.1" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.navigableKeySet (5 samples, 0.05%)</title><rect x="1066.1" y="307.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1069.1" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$KeySet (5 samples, 0.05%)</title><rect x="1066.1" y="291.0" width="0.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1069.1" y="302.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (51 samples, 0.48%)</title><rect x="1066.6" y="339.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1069.6" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (49 samples, 0.46%)</title><rect x="1066.9" y="323.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1069.9" y="334.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (49 samples, 0.46%)</title><rect x="1066.9" y="307.0" width="5.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1069.9" y="318.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (37 samples, 0.35%)</title><rect x="1072.3" y="355.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1075.3" y="366.0"></text>
</g>
<g>
<title>java.lang.Object[] (37 samples, 0.35%)</title><rect x="1072.3" y="339.0" width="4.1" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1075.3" y="350.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newInstance (7 samples, 0.07%)</title><rect x="1076.4" y="387.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1079.4" y="398.0"></text>
</g>
<g>
<title>javax.management.openmbean.CompositeData[] (7 samples, 0.07%)</title><rect x="1076.4" y="371.0" width="0.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1079.4" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (22 samples, 0.21%)</title><rect x="1077.2" y="403.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1080.2" y="414.0"></text>
</g>
<g>
<title>java.lang.Object[] (3 samples, 0.03%)</title><rect x="1077.2" y="387.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1080.2" y="398.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (12 samples, 0.11%)</title><rect x="1077.5" y="387.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1080.5" y="398.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1077.5" y="371.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1080.5" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (4 samples, 0.04%)</title><rect x="1077.5" y="355.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1080.5" y="366.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1077.5" y="339.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1080.5" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (4 samples, 0.04%)</title><rect x="1077.5" y="323.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1080.5" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (4 samples, 0.04%)</title><rect x="1077.5" y="307.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1080.5" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$KeyIterator (4 samples, 0.04%)</title><rect x="1077.5" y="291.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1080.5" y="302.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (8 samples, 0.08%)</title><rect x="1078.0" y="371.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1081.0" y="382.0"></text>
</g>
<g>
<title>java.util.TreeMap (4 samples, 0.04%)</title><rect x="1078.0" y="355.0" width="0.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1081.0" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (4 samples, 0.04%)</title><rect x="1078.4" y="355.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1081.4" y="366.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (4 samples, 0.04%)</title><rect x="1078.4" y="339.0" width="0.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1081.4" y="350.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (7 samples, 0.07%)</title><rect x="1078.9" y="387.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1081.9" y="398.0"></text>
</g>
<g>
<title>java.lang.Object[] (6 samples, 0.06%)</title><rect x="1078.9" y="371.0" width="0.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1081.9" y="382.0"></text>
</g>
<g>
<title>java.lang.Object[] (7 samples, 0.07%)</title><rect x="1079.9" y="419.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1082.9" y="430.0"></text>
</g>
<g>
<title>javax.management.openmbean.CompositeDataSupport (5 samples, 0.05%)</title><rect x="1080.6" y="419.0" width="0.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1083.6" y="430.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (147 samples, 1.38%)</title><rect x="1081.2" y="419.0" width="16.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1084.2" y="430.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (16 samples, 0.15%)</title><rect x="1081.2" y="403.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1084.2" y="414.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (7 samples, 0.07%)</title><rect x="1081.2" y="387.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1084.2" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1081.2" y="371.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1084.2" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (7 samples, 0.07%)</title><rect x="1081.2" y="355.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1084.2" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (7 samples, 0.07%)</title><rect x="1081.2" y="339.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1084.2" y="350.0"></text>
</g>
<g>
<title>java.util.TreeMap$KeyIterator (7 samples, 0.07%)</title><rect x="1081.2" y="323.0" width="0.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1084.2" y="334.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableSet.equals (5 samples, 0.05%)</title><rect x="1082.0" y="387.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1085.0" y="398.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (5 samples, 0.05%)</title><rect x="1082.0" y="371.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1085.0" y="382.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.containsAll (5 samples, 0.05%)</title><rect x="1082.0" y="355.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1085.0" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (5 samples, 0.05%)</title><rect x="1082.0" y="339.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1085.0" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (5 samples, 0.05%)</title><rect x="1082.0" y="323.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1085.0" y="334.0"></text>
</g>
<g>
<title>java.util.TreeMap$KeyIterator (5 samples, 0.05%)</title><rect x="1082.0" y="307.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1085.0" y="318.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (131 samples, 1.23%)</title><rect x="1083.0" y="403.0" width="14.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1086.0" y="414.0"></text>
</g>
<g>
<title>java.util.TreeMap (11 samples, 0.10%)</title><rect x="1083.0" y="387.0" width="1.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1086.0" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (120 samples, 1.13%)</title><rect x="1084.2" y="387.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1087.2" y="398.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (120 samples, 1.13%)</title><rect x="1084.2" y="371.0" width="13.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1087.2" y="382.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (106 samples, 1.00%)</title><rect x="1097.5" y="419.0" width="11.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1100.5" y="430.0"></text>
</g>
<g>
<title>java.lang.Object[] (98 samples, 0.92%)</title><rect x="1097.5" y="403.0" width="10.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1100.5" y="414.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (8 samples, 0.08%)</title><rect x="1108.4" y="403.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1111.4" y="414.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (8 samples, 0.08%)</title><rect x="1108.4" y="387.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1111.4" y="398.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (8 samples, 0.08%)</title><rect x="1108.4" y="371.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1111.4" y="382.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (8 samples, 0.08%)</title><rect x="1108.4" y="355.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1111.4" y="366.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (8 samples, 0.08%)</title><rect x="1108.4" y="339.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1111.4" y="350.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (8 samples, 0.08%)</title><rect x="1108.4" y="323.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1111.4" y="334.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor15.invoke (3 samples, 0.03%)</title><rect x="1108.8" y="307.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1111.8" y="318.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.getStackTrace (3 samples, 0.03%)</title><rect x="1108.8" y="291.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1111.8" y="302.0"></text>
</g>
<g>
<title>java.lang.StackTraceElement[] (3 samples, 0.03%)</title><rect x="1108.8" y="275.0" width="0.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1111.8" y="286.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (46 samples, 0.43%)</title><rect x="1109.4" y="483.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1112.4" y="494.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (46 samples, 0.43%)</title><rect x="1109.4" y="467.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1112.4" y="478.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (46 samples, 0.43%)</title><rect x="1109.4" y="451.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1112.4" y="462.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (46 samples, 0.43%)</title><rect x="1109.4" y="435.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1112.4" y="446.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (46 samples, 0.43%)</title><rect x="1109.4" y="419.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1112.4" y="430.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (46 samples, 0.43%)</title><rect x="1109.4" y="403.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1112.4" y="414.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (46 samples, 0.43%)</title><rect x="1109.4" y="387.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1112.4" y="398.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor45.invoke (46 samples, 0.43%)</title><rect x="1109.4" y="371.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1112.4" y="382.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (46 samples, 0.43%)</title><rect x="1109.4" y="355.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1112.4" y="366.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (46 samples, 0.43%)</title><rect x="1109.4" y="339.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1112.4" y="350.0"></text>
</g>
<g>
<title>java.lang.StackTraceElement[] (3 samples, 0.03%)</title><rect x="1109.4" y="323.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1112.4" y="334.0"></text>
</g>
<g>
<title>java.lang.StackTraceElement (9 samples, 0.08%)</title><rect x="1109.8" y="323.0" width="1.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1112.8" y="334.0"></text>
</g>
<g>
<title>java.lang.management.ThreadInfo (7 samples, 0.07%)</title><rect x="1110.8" y="323.0" width="0.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1113.8" y="334.0"></text>
</g>
<g>
<title>java.lang.management.ThreadInfo (11 samples, 0.10%)</title><rect x="1111.5" y="323.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1114.5" y="334.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.&lt;init&gt; (16 samples, 0.15%)</title><rect x="1112.8" y="323.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1115.8" y="334.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.initialize (16 samples, 0.15%)</title><rect x="1112.8" y="307.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1115.8" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (13 samples, 0.12%)</title><rect x="1113.1" y="291.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1116.1" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle$Holder.reinvoke_L (13 samples, 0.12%)</title><rect x="1113.1" y="275.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1116.1" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1030228826.invoke (13 samples, 0.12%)</title><rect x="1113.1" y="259.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1116.1" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (13 samples, 0.12%)</title><rect x="1113.1" y="243.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1116.1" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (12 samples, 0.11%)</title><rect x="1113.2" y="227.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1116.2" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (12 samples, 0.11%)</title><rect x="1113.2" y="211.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1116.2" y="222.0"></text>
</g>
<g>
<title>byte[] (12 samples, 0.11%)</title><rect x="1113.2" y="195.0" width="1.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1116.2" y="206.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getClassLoaderFor (8 samples, 0.08%)</title><rect x="1114.5" y="691.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1117.5" y="702.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.withPermissions (6 samples, 0.06%)</title><rect x="1114.8" y="675.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1117.8" y="686.0"></text>
</g>
<g>
<title>java.security.ProtectionDomain (4 samples, 0.04%)</title><rect x="1114.8" y="659.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1117.8" y="670.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (72 samples, 0.68%)</title><rect x="1115.4" y="691.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1118.4" y="702.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (19 samples, 0.18%)</title><rect x="1115.4" y="675.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1118.4" y="686.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$7.run (19 samples, 0.18%)</title><rect x="1115.4" y="659.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1118.4" y="670.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$7.run (19 samples, 0.18%)</title><rect x="1115.4" y="643.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1118.4" y="654.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/util/OrderClassLoaders.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1115.5" y="627.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1118.5" y="638.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1115.5" y="611.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1118.5" y="622.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1115.5" y="595.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1118.5" y="606.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$CombinedClassLoader.&lt;init&gt; (15 samples, 0.14%)</title><rect x="1115.9" y="627.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1118.9" y="638.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (12 samples, 0.11%)</title><rect x="1115.9" y="611.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1118.9" y="622.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (12 samples, 0.11%)</title><rect x="1115.9" y="595.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1118.9" y="606.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentHashMap (3 samples, 0.03%)</title><rect x="1116.2" y="579.0" width="0.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1119.2" y="590.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.nameAndId (4 samples, 0.04%)</title><rect x="1116.5" y="579.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1119.5" y="590.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (3 samples, 0.03%)</title><rect x="1116.6" y="563.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1119.6" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.03%)</title><rect x="1116.6" y="547.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1119.6" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="1116.6" y="531.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1119.6" y="542.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="1116.6" y="515.0" width="0.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1119.6" y="526.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$CombinedClassLoader$ClassLoaderWrapper.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1117.2" y="611.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1120.2" y="622.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1117.2" y="595.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1120.2" y="606.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1117.2" y="579.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1120.2" y="590.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (53 samples, 0.50%)</title><rect x="1117.5" y="675.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1120.5" y="686.0"></text>
</g>
<g>
<title>java/rmi/MarshalledObject.get (53 samples, 0.50%)</title><rect x="1117.5" y="659.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1120.5" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (15 samples, 0.14%)</title><rect x="1117.6" y="643.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1120.6" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (15 samples, 0.14%)</title><rect x="1117.6" y="627.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1120.6" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (15 samples, 0.14%)</title><rect x="1117.6" y="611.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1120.6" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (15 samples, 0.14%)</title><rect x="1117.6" y="595.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1120.6" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (15 samples, 0.14%)</title><rect x="1117.6" y="579.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1120.6" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (15 samples, 0.14%)</title><rect x="1117.6" y="563.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1120.6" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (12 samples, 0.11%)</title><rect x="1117.6" y="547.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1120.6" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (12 samples, 0.11%)</title><rect x="1117.6" y="531.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1120.6" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (10 samples, 0.09%)</title><rect x="1117.6" y="515.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1120.6" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (10 samples, 0.09%)</title><rect x="1117.6" y="499.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1120.6" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDescriptor (8 samples, 0.08%)</title><rect x="1117.8" y="483.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1120.8" y="494.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass (3 samples, 0.03%)</title><rect x="1117.8" y="467.0" width="0.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1120.8" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.readNonProxy (5 samples, 0.05%)</title><rect x="1118.1" y="467.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1121.1" y="478.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.03%)</title><rect x="1118.3" y="451.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1121.3" y="462.0"></text>
</g>
<g>
<title>java.lang.Long (3 samples, 0.03%)</title><rect x="1118.3" y="435.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1121.3" y="446.0"></text>
</g>
<g>
<title>java/rmi/MarshalledObject$MarshalledObjectInputStream.&lt;init&gt; (37 samples, 0.35%)</title><rect x="1119.3" y="643.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1122.3" y="654.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (37 samples, 0.35%)</title><rect x="1119.3" y="627.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1122.3" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (36 samples, 0.34%)</title><rect x="1119.4" y="611.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1122.4" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.&lt;init&gt; (26 samples, 0.24%)</title><rect x="1119.5" y="595.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1122.5" y="606.0"></text>
</g>
<g>
<title>byte[] (11 samples, 0.10%)</title><rect x="1119.5" y="579.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1122.5" y="590.0"></text>
</g>
<g>
<title>char[] (4 samples, 0.04%)</title><rect x="1120.8" y="579.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1123.8" y="590.0"></text>
</g>
<g>
<title>java/io/DataInputStream.&lt;init&gt; (10 samples, 0.09%)</title><rect x="1121.3" y="579.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1124.3" y="590.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.04%)</title><rect x="1121.3" y="563.0" width="0.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1124.3" y="574.0"></text>
</g>
<g>
<title>char[] (5 samples, 0.05%)</title><rect x="1121.9" y="563.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1124.9" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$HandleTable.&lt;init&gt; (9 samples, 0.08%)</title><rect x="1122.4" y="595.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1125.4" y="606.0"></text>
</g>
<g>
<title>java.io.ObjectInputStream$HandleTable$HandleList[] (3 samples, 0.03%)</title><rect x="1122.4" y="579.0" width="0.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1125.4" y="590.0"></text>
</g>
<g>
<title>java.lang.Object[] (5 samples, 0.05%)</title><rect x="1122.8" y="579.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1125.8" y="590.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor38.invoke (3 samples, 0.03%)</title><rect x="1123.4" y="723.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1126.4" y="734.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getAttributes (3 samples, 0.03%)</title><rect x="1123.4" y="707.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1126.4" y="718.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (234 samples, 2.20%)</title><rect x="1123.9" y="755.0" width="26.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1126.9" y="766.0">s..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (234 samples, 2.20%)</title><rect x="1123.9" y="739.0" width="26.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1126.9" y="750.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (234 samples, 2.20%)</title><rect x="1123.9" y="723.0" width="26.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1126.9" y="734.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (232 samples, 2.19%)</title><rect x="1123.9" y="707.0" width="25.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1126.9" y="718.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (232 samples, 2.19%)</title><rect x="1123.9" y="691.0" width="25.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1126.9" y="702.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (227 samples, 2.14%)</title><rect x="1123.9" y="675.0" width="25.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1126.9" y="686.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (19 samples, 0.18%)</title><rect x="1123.9" y="659.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1126.9" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (16 samples, 0.15%)</title><rect x="1123.9" y="643.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1126.9" y="654.0"></text>
</g>
<g>
<title>int[] (8 samples, 0.08%)</title><rect x="1123.9" y="627.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1126.9" y="638.0"></text>
</g>
<g>
<title>java.lang.Object[] (8 samples, 0.08%)</title><rect x="1124.8" y="627.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1127.8" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growSpine (3 samples, 0.03%)</title><rect x="1125.6" y="643.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1128.6" y="654.0"></text>
</g>
<g>
<title>int[] (3 samples, 0.03%)</title><rect x="1125.6" y="627.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1128.6" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (208 samples, 1.96%)</title><rect x="1126.0" y="659.0" width="23.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1129.0" y="670.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (208 samples, 1.96%)</title><rect x="1126.0" y="643.0" width="23.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1129.0" y="654.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (207 samples, 1.95%)</title><rect x="1126.1" y="627.0" width="23.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1129.1" y="638.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (201 samples, 1.89%)</title><rect x="1126.1" y="611.0" width="22.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1129.1" y="622.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (201 samples, 1.89%)</title><rect x="1126.1" y="595.0" width="22.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1129.1" y="606.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (36 samples, 0.34%)</title><rect x="1126.3" y="579.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1129.3" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (36 samples, 0.34%)</title><rect x="1126.3" y="563.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1129.3" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (36 samples, 0.34%)</title><rect x="1126.3" y="547.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1129.3" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (36 samples, 0.34%)</title><rect x="1126.3" y="531.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1129.3" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (36 samples, 0.34%)</title><rect x="1126.3" y="515.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1129.3" y="526.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (36 samples, 0.34%)</title><rect x="1126.3" y="499.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1129.3" y="510.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (36 samples, 0.34%)</title><rect x="1126.3" y="483.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1129.3" y="494.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (36 samples, 0.34%)</title><rect x="1126.3" y="467.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1129.3" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (36 samples, 0.34%)</title><rect x="1126.3" y="451.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1129.3" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (36 samples, 0.34%)</title><rect x="1126.3" y="435.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1129.3" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (36 samples, 0.34%)</title><rect x="1126.3" y="419.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1129.3" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (26 samples, 0.24%)</title><rect x="1126.3" y="403.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1129.3" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (26 samples, 0.24%)</title><rect x="1126.3" y="387.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1129.3" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (26 samples, 0.24%)</title><rect x="1126.3" y="371.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1129.3" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (24 samples, 0.23%)</title><rect x="1126.5" y="355.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1129.5" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (18 samples, 0.17%)</title><rect x="1126.5" y="339.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1129.5" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (18 samples, 0.17%)</title><rect x="1126.5" y="323.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1129.5" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (10 samples, 0.09%)</title><rect x="1126.5" y="307.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1129.5" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (9 samples, 0.08%)</title><rect x="1126.6" y="291.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1129.6" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (8 samples, 0.08%)</title><rect x="1126.6" y="275.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1129.6" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (6 samples, 0.06%)</title><rect x="1126.9" y="259.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1129.9" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (6 samples, 0.06%)</title><rect x="1126.9" y="243.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1129.9" y="254.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (6 samples, 0.06%)</title><rect x="1126.9" y="227.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1129.9" y="238.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (6 samples, 0.06%)</title><rect x="1126.9" y="211.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1129.9" y="222.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (6 samples, 0.06%)</title><rect x="1126.9" y="195.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1129.9" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (6 samples, 0.06%)</title><rect x="1126.9" y="179.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1129.9" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (6 samples, 0.06%)</title><rect x="1126.9" y="163.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1129.9" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (6 samples, 0.06%)</title><rect x="1126.9" y="147.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1129.9" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (5 samples, 0.05%)</title><rect x="1126.9" y="131.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1129.9" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (5 samples, 0.05%)</title><rect x="1126.9" y="115.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1129.9" y="126.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (5 samples, 0.05%)</title><rect x="1126.9" y="99.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1129.9" y="110.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (5 samples, 0.05%)</title><rect x="1126.9" y="83.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1129.9" y="94.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (4 samples, 0.04%)</title><rect x="1126.9" y="67.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1129.9" y="78.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (4 samples, 0.04%)</title><rect x="1126.9" y="51.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1129.9" y="62.0"></text>
</g>
<g>
<title>java.io.SerialCallbackContext (3 samples, 0.03%)</title><rect x="1126.9" y="35.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1129.9" y="46.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (8 samples, 0.08%)</title><rect x="1127.6" y="307.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1130.6" y="318.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (8 samples, 0.08%)</title><rect x="1127.6" y="291.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1130.6" y="302.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (8 samples, 0.08%)</title><rect x="1127.6" y="275.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1130.6" y="286.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (8 samples, 0.08%)</title><rect x="1127.6" y="259.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1130.6" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (8 samples, 0.08%)</title><rect x="1127.6" y="243.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1130.6" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (6 samples, 0.06%)</title><rect x="1127.9" y="227.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1130.9" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (6 samples, 0.06%)</title><rect x="1127.9" y="211.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1130.9" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeString (5 samples, 0.05%)</title><rect x="1128.0" y="195.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1131.0" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (5 samples, 0.05%)</title><rect x="1128.0" y="179.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1131.0" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (5 samples, 0.05%)</title><rect x="1128.0" y="163.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1131.0" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (6 samples, 0.06%)</title><rect x="1128.5" y="339.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1131.5" y="350.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (6 samples, 0.06%)</title><rect x="1128.5" y="323.0" width="0.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1131.5" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeString (5 samples, 0.05%)</title><rect x="1129.2" y="403.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1132.2" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (5 samples, 0.05%)</title><rect x="1129.2" y="387.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1132.2" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (4 samples, 0.04%)</title><rect x="1129.2" y="371.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1132.2" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (5 samples, 0.05%)</title><rect x="1129.8" y="403.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1132.8" y="414.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (5 samples, 0.05%)</title><rect x="1129.8" y="387.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1132.8" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (163 samples, 1.54%)</title><rect x="1130.3" y="579.0" width="18.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1133.3" y="590.0"></text>
</g>
<g>
<title>java.lang.Object[] (3 samples, 0.03%)</title><rect x="1130.3" y="563.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1133.3" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (160 samples, 1.51%)</title><rect x="1130.6" y="563.0" width="17.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1133.6" y="574.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (160 samples, 1.51%)</title><rect x="1130.6" y="547.0" width="17.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1133.6" y="558.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (160 samples, 1.51%)</title><rect x="1130.6" y="531.0" width="17.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1133.6" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (160 samples, 1.51%)</title><rect x="1130.6" y="515.0" width="17.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1133.6" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (158 samples, 1.49%)</title><rect x="1130.8" y="499.0" width="17.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1133.8" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (158 samples, 1.49%)</title><rect x="1130.8" y="483.0" width="17.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1133.8" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (91 samples, 0.86%)</title><rect x="1130.8" y="467.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1133.8" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (90 samples, 0.85%)</title><rect x="1130.9" y="451.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1133.9" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (80 samples, 0.75%)</title><rect x="1130.9" y="435.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1133.9" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (6 samples, 0.06%)</title><rect x="1130.9" y="419.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1133.9" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (6 samples, 0.06%)</title><rect x="1130.9" y="403.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1133.9" y="414.0"></text>
</g>
<g>
<title>int[] (3 samples, 0.03%)</title><rect x="1130.9" y="387.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1133.9" y="398.0"></text>
</g>
<g>
<title>java.lang.Object[] (3 samples, 0.03%)</title><rect x="1131.2" y="387.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1134.2" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (74 samples, 0.70%)</title><rect x="1131.5" y="419.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1134.5" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (74 samples, 0.70%)</title><rect x="1131.5" y="403.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1134.5" y="414.0"></text>
</g>
<g>
<title>java.lang.Object[] (10 samples, 0.09%)</title><rect x="1131.5" y="387.0" width="1.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1134.5" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (64 samples, 0.60%)</title><rect x="1132.7" y="387.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1135.7" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (60 samples, 0.57%)</title><rect x="1132.7" y="371.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1135.7" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (8 samples, 0.08%)</title><rect x="1132.7" y="355.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1135.7" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (6 samples, 0.06%)</title><rect x="1132.7" y="339.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1135.7" y="350.0"></text>
</g>
<g>
<title>int[] (3 samples, 0.03%)</title><rect x="1132.7" y="323.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1135.7" y="334.0"></text>
</g>
<g>
<title>java.lang.Object[] (3 samples, 0.03%)</title><rect x="1133.0" y="323.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1136.0" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (52 samples, 0.49%)</title><rect x="1133.5" y="355.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1136.5" y="366.0"></text>
</g>
<g>
<title>java.io.SerialCallbackContext (5 samples, 0.05%)</title><rect x="1133.5" y="339.0" width="0.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1136.5" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (47 samples, 0.44%)</title><rect x="1134.1" y="339.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1137.1" y="350.0"></text>
</g>
<g>
<title>java.lang.Object[] (5 samples, 0.05%)</title><rect x="1134.1" y="323.0" width="0.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1137.1" y="334.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (42 samples, 0.40%)</title><rect x="1134.7" y="323.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1137.7" y="334.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (42 samples, 0.40%)</title><rect x="1134.7" y="307.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1137.7" y="318.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (42 samples, 0.40%)</title><rect x="1134.7" y="291.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1137.7" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (42 samples, 0.40%)</title><rect x="1134.7" y="275.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1137.7" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteObject (5 samples, 0.05%)</title><rect x="1134.7" y="259.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1137.7" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (5 samples, 0.05%)</title><rect x="1134.7" y="243.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1137.7" y="254.0"></text>
</g>
<g>
<title>java.lang.Object[] (5 samples, 0.05%)</title><rect x="1134.7" y="227.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1137.7" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (34 samples, 0.32%)</title><rect x="1135.2" y="259.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1138.2" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (34 samples, 0.32%)</title><rect x="1135.2" y="243.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1138.2" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeString (24 samples, 0.23%)</title><rect x="1135.2" y="227.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1138.2" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (24 samples, 0.23%)</title><rect x="1135.2" y="211.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1138.2" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (24 samples, 0.23%)</title><rect x="1135.2" y="195.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1138.2" y="206.0"></text>
</g>
<g>
<title>int[] (9 samples, 0.08%)</title><rect x="1135.2" y="179.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1138.2" y="190.0"></text>
</g>
<g>
<title>java.lang.Object[] (15 samples, 0.14%)</title><rect x="1136.2" y="179.0" width="1.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1139.2" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (10 samples, 0.09%)</title><rect x="1137.9" y="227.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1140.9" y="238.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (10 samples, 0.09%)</title><rect x="1137.9" y="211.0" width="1.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1140.9" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.entrySet (3 samples, 0.03%)</title><rect x="1139.0" y="259.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1142.0" y="270.0"></text>
</g>
<g>
<title>java.util.TreeMap$EntrySet (3 samples, 0.03%)</title><rect x="1139.0" y="243.0" width="0.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1142.0" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (4 samples, 0.04%)</title><rect x="1139.3" y="371.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1142.3" y="382.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (4 samples, 0.04%)</title><rect x="1139.3" y="355.0" width="0.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1142.3" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (10 samples, 0.09%)</title><rect x="1139.8" y="435.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1142.8" y="446.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (10 samples, 0.09%)</title><rect x="1139.8" y="419.0" width="1.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1142.8" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (26 samples, 0.24%)</title><rect x="1140.9" y="467.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1143.9" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (14 samples, 0.13%)</title><rect x="1140.9" y="451.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1143.9" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (14 samples, 0.13%)</title><rect x="1140.9" y="435.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1143.9" y="446.0"></text>
</g>
<g>
<title>int[] (6 samples, 0.06%)</title><rect x="1140.9" y="419.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1143.9" y="430.0"></text>
</g>
<g>
<title>java.lang.Object[] (8 samples, 0.08%)</title><rect x="1141.5" y="419.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1144.5" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (12 samples, 0.11%)</title><rect x="1142.4" y="451.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1145.4" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (12 samples, 0.11%)</title><rect x="1142.4" y="435.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1145.4" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (12 samples, 0.11%)</title><rect x="1142.4" y="419.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1145.4" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (9 samples, 0.08%)</title><rect x="1142.4" y="403.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1145.4" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (9 samples, 0.08%)</title><rect x="1142.4" y="387.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1145.4" y="398.0"></text>
</g>
<g>
<title>java.io.SerialCallbackContext (4 samples, 0.04%)</title><rect x="1142.4" y="371.0" width="0.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1145.4" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (5 samples, 0.05%)</title><rect x="1142.9" y="371.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1145.9" y="382.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (5 samples, 0.05%)</title><rect x="1142.9" y="355.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1145.9" y="366.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (5 samples, 0.05%)</title><rect x="1142.9" y="339.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1145.9" y="350.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (5 samples, 0.05%)</title><rect x="1142.9" y="323.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1145.9" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (5 samples, 0.05%)</title><rect x="1142.9" y="307.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1145.9" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (3 samples, 0.03%)</title><rect x="1143.0" y="291.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1146.0" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (3 samples, 0.03%)</title><rect x="1143.0" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1146.0" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (3 samples, 0.03%)</title><rect x="1143.0" y="259.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1146.0" y="270.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (3 samples, 0.03%)</title><rect x="1143.0" y="243.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1146.0" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (3 samples, 0.03%)</title><rect x="1143.4" y="403.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1146.4" y="414.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (3 samples, 0.03%)</title><rect x="1143.4" y="387.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1146.4" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (39 samples, 0.37%)</title><rect x="1144.0" y="467.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1147.0" y="478.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (39 samples, 0.37%)</title><rect x="1144.0" y="451.0" width="4.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1147.0" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (6 samples, 0.06%)</title><rect x="1148.4" y="611.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1151.4" y="622.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (6 samples, 0.06%)</title><rect x="1148.4" y="595.0" width="0.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1151.4" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (5 samples, 0.05%)</title><rect x="1149.1" y="675.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1152.1" y="686.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (5 samples, 0.05%)</title><rect x="1149.1" y="659.0" width="0.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1152.1" y="670.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (74 samples, 0.70%)</title><rect x="1149.9" y="755.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1152.9" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$$Lambda$98/1376599281.readString (5 samples, 0.05%)</title><rect x="1149.9" y="739.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1152.9" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readString (5 samples, 0.05%)</title><rect x="1149.9" y="723.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1152.9" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (5 samples, 0.05%)</title><rect x="1149.9" y="707.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1152.9" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (5 samples, 0.05%)</title><rect x="1149.9" y="691.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1152.9" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readString (5 samples, 0.05%)</title><rect x="1149.9" y="675.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1152.9" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTF (5 samples, 0.05%)</title><rect x="1149.9" y="659.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1152.9" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTFBody (5 samples, 0.05%)</title><rect x="1149.9" y="643.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1152.9" y="654.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (4 samples, 0.04%)</title><rect x="1150.0" y="627.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1153.0" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.04%)</title><rect x="1150.0" y="611.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1153.0" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (69 samples, 0.65%)</title><rect x="1150.4" y="739.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1153.4" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (69 samples, 0.65%)</title><rect x="1150.4" y="723.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1153.4" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (69 samples, 0.65%)</title><rect x="1150.4" y="707.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1153.4" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (24 samples, 0.23%)</title><rect x="1150.4" y="691.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1153.4" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (17 samples, 0.16%)</title><rect x="1150.7" y="675.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1153.7" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (17 samples, 0.16%)</title><rect x="1150.7" y="659.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1153.7" y="670.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass (3 samples, 0.03%)</title><rect x="1150.7" y="643.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1153.7" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDescriptor (7 samples, 0.07%)</title><rect x="1151.0" y="643.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1154.0" y="654.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass (5 samples, 0.05%)</title><rect x="1151.0" y="627.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1154.0" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.initNonProxy (7 samples, 0.07%)</title><rect x="1151.8" y="643.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1154.8" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getReflector (7 samples, 0.07%)</title><rect x="1151.8" y="627.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1154.8" y="638.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$FieldReflectorKey (7 samples, 0.07%)</title><rect x="1151.8" y="611.0" width="0.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1154.8" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (5 samples, 0.05%)</title><rect x="1152.5" y="675.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1155.5" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readString (5 samples, 0.05%)</title><rect x="1152.5" y="659.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1155.5" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTF (5 samples, 0.05%)</title><rect x="1152.5" y="643.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1155.5" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTFBody (5 samples, 0.05%)</title><rect x="1152.5" y="627.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1155.5" y="638.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (4 samples, 0.04%)</title><rect x="1152.7" y="611.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1155.7" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.04%)</title><rect x="1152.7" y="595.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1155.7" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="1152.8" y="579.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1155.8" y="590.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="1152.8" y="563.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1155.8" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (45 samples, 0.42%)</title><rect x="1153.1" y="691.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1156.1" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (12 samples, 0.11%)</title><rect x="1153.1" y="675.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1156.1" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (12 samples, 0.11%)</title><rect x="1153.1" y="659.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1156.1" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDescriptor (9 samples, 0.08%)</title><rect x="1153.3" y="643.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1156.3" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.readNonProxy (8 samples, 0.08%)</title><rect x="1153.4" y="627.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1156.4" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readUTF (6 samples, 0.06%)</title><rect x="1153.5" y="611.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1156.5" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTF (6 samples, 0.06%)</title><rect x="1153.5" y="595.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1156.5" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTFBody (6 samples, 0.06%)</title><rect x="1153.5" y="579.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1156.5" y="590.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (5 samples, 0.05%)</title><rect x="1153.7" y="563.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1156.7" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.05%)</title><rect x="1153.7" y="547.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1156.7" y="558.0"></text>
</g>
<g>
<title>java.lang.String (4 samples, 0.04%)</title><rect x="1153.7" y="531.0" width="0.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1156.7" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (33 samples, 0.31%)</title><rect x="1154.4" y="675.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1157.4" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (32 samples, 0.30%)</title><rect x="1154.5" y="659.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1157.5" y="670.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (32 samples, 0.30%)</title><rect x="1154.5" y="643.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1157.5" y="654.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (32 samples, 0.30%)</title><rect x="1154.5" y="627.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1157.5" y="638.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor2.invoke (26 samples, 0.24%)</title><rect x="1154.5" y="611.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1157.5" y="622.0"></text>
</g>
<g>
<title>javax/management/ObjectName.readObject (26 samples, 0.24%)</title><rect x="1154.5" y="595.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1157.5" y="606.0"></text>
</g>
<g>
<title>javax/management/ObjectName.construct (25 samples, 0.24%)</title><rect x="1154.7" y="579.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1157.7" y="590.0"></text>
</g>
<g>
<title>char[] (3 samples, 0.03%)</title><rect x="1154.7" y="563.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1157.7" y="574.0"></text>
</g>
<g>
<title>java.lang.String[] (4 samples, 0.04%)</title><rect x="1155.0" y="563.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1158.0" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="1155.4" y="563.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1158.4" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.03%)</title><rect x="1155.4" y="547.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1158.4" y="558.0"></text>
</g>
<g>
<title>javax.management.ObjectName$Property[] (3 samples, 0.03%)</title><rect x="1155.9" y="563.0" width="0.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1158.9" y="574.0"></text>
</g>
<g>
<title>javax/management/ObjectName.setCanonicalName (8 samples, 0.08%)</title><rect x="1156.5" y="563.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1159.5" y="574.0"></text>
</g>
<g>
<title>java.lang.String (3 samples, 0.03%)</title><rect x="1156.7" y="547.0" width="0.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1159.7" y="558.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor36.invoke (6 samples, 0.06%)</title><rect x="1157.4" y="611.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1160.4" y="622.0"></text>
</g>
<g>
<title>java/rmi/MarshalledObject.readObject (6 samples, 0.06%)</title><rect x="1157.4" y="595.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1160.4" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.defaultReadObject (6 samples, 0.06%)</title><rect x="1157.4" y="579.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1160.4" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.defaultReadFields (6 samples, 0.06%)</title><rect x="1157.4" y="563.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1160.4" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (6 samples, 0.06%)</title><rect x="1157.4" y="547.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1160.4" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (6 samples, 0.06%)</title><rect x="1157.4" y="531.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1160.4" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (4 samples, 0.04%)</title><rect x="1157.4" y="515.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1160.4" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (4 samples, 0.04%)</title><rect x="1157.4" y="499.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1160.4" y="510.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (148 samples, 1.39%)</title><rect x="1158.1" y="755.0" width="16.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1161.1" y="766.0"></text>
</g>
<g>
<title>java/io/DataOutputStream.&lt;init&gt; (6 samples, 0.06%)</title><rect x="1158.1" y="739.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1161.1" y="750.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.04%)</title><rect x="1158.1" y="723.0" width="0.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1161.1" y="734.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (142 samples, 1.34%)</title><rect x="1158.8" y="739.0" width="15.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1161.8" y="750.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (140 samples, 1.32%)</title><rect x="1159.0" y="723.0" width="15.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1162.0" y="734.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (138 samples, 1.30%)</title><rect x="1159.2" y="707.0" width="15.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1162.2" y="718.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (138 samples, 1.30%)</title><rect x="1159.2" y="691.0" width="15.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1162.2" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.&lt;init&gt; (137 samples, 1.29%)</title><rect x="1159.2" y="675.0" width="15.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1162.2" y="686.0"></text>
</g>
<g>
<title>java.io.ObjectOutputStream$HandleTable (5 samples, 0.05%)</title><rect x="1159.2" y="659.0" width="0.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1162.2" y="670.0"></text>
</g>
<g>
<title>java.io.ObjectOutputStream$ReplaceTable (8 samples, 0.08%)</title><rect x="1159.8" y="659.0" width="0.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1162.8" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.&lt;init&gt; (77 samples, 0.73%)</title><rect x="1160.7" y="659.0" width="8.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1163.7" y="670.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.04%)</title><rect x="1160.7" y="643.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1163.7" y="654.0"></text>
</g>
<g>
<title>byte[] (25 samples, 0.24%)</title><rect x="1161.1" y="643.0" width="2.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1164.1" y="654.0"></text>
</g>
<g>
<title>char[] (6 samples, 0.06%)</title><rect x="1163.9" y="643.0" width="0.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1166.9" y="654.0"></text>
</g>
<g>
<title>char[] (37 samples, 0.35%)</title><rect x="1164.5" y="643.0" width="4.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1167.5" y="654.0"></text>
</g>
<g>
<title>java/io/DataOutputStream.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1168.8" y="643.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1171.8" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.&lt;init&gt; (19 samples, 0.18%)</title><rect x="1169.2" y="659.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1172.2" y="670.0"></text>
</g>
<g>
<title>int[] (13 samples, 0.12%)</title><rect x="1169.2" y="643.0" width="1.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1172.2" y="654.0"></text>
</g>
<g>
<title>java.lang.Object[] (5 samples, 0.05%)</title><rect x="1170.7" y="643.0" width="0.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1173.7" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$ReplaceTable.&lt;init&gt; (28 samples, 0.26%)</title><rect x="1171.3" y="659.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1174.3" y="670.0"></text>
</g>
<g>
<title>java.io.ObjectOutputStream$HandleTable (3 samples, 0.03%)</title><rect x="1171.3" y="643.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1174.3" y="654.0"></text>
</g>
<g>
<title>java.lang.Object[] (4 samples, 0.04%)</title><rect x="1171.7" y="643.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1174.7" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.&lt;init&gt; (21 samples, 0.20%)</title><rect x="1172.1" y="643.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1175.1" y="654.0"></text>
</g>
<g>
<title>int[] (15 samples, 0.14%)</title><rect x="1172.1" y="627.0" width="1.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1175.1" y="638.0"></text>
</g>
<g>
<title>java.lang.Object[] (6 samples, 0.06%)</title><rect x="1173.8" y="627.0" width="0.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1176.8" y="638.0"></text>
</g>
<g>
<title>sun.rmi.transport.Transport$1 (4 samples, 0.04%)</title><rect x="1174.6" y="819.0" width="0.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1177.6" y="830.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getInputStream (135 samples, 1.27%)</title><rect x="1175.0" y="819.0" width="15.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1178.0" y="830.0"></text>
</g>
<g>
<title>sun.rmi.transport.ConnectionInputStream (4 samples, 0.04%)</title><rect x="1175.0" y="803.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1178.0" y="814.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionInputStream.&lt;init&gt; (131 samples, 1.23%)</title><rect x="1175.4" y="803.0" width="14.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1178.4" y="814.0"></text>
</g>
<g>
<title>java.util.HashMap (5 samples, 0.05%)</title><rect x="1175.4" y="787.0" width="0.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1178.4" y="798.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (126 samples, 1.19%)</title><rect x="1176.0" y="787.0" width="14.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1179.0" y="798.0"></text>
</g>
<g>
<title>java.util.HashMap (4 samples, 0.04%)</title><rect x="1176.0" y="771.0" width="0.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1179.0" y="782.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (122 samples, 1.15%)</title><rect x="1176.4" y="771.0" width="13.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1179.4" y="782.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.&lt;init&gt; (83 samples, 0.78%)</title><rect x="1176.6" y="755.0" width="9.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1179.6" y="766.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.08%)</title><rect x="1176.8" y="739.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1179.8" y="750.0"></text>
</g>
<g>
<title>char[] (3 samples, 0.03%)</title><rect x="1177.7" y="739.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1180.7" y="750.0"></text>
</g>
<g>
<title>char[] (23 samples, 0.22%)</title><rect x="1178.0" y="739.0" width="2.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1181.0" y="750.0"></text>
</g>
<g>
<title>java.io.ObjectInputStream$PeekInputStream (3 samples, 0.03%)</title><rect x="1180.8" y="739.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1183.8" y="750.0"></text>
</g>
<g>
<title>java/io/DataInputStream.&lt;init&gt; (42 samples, 0.40%)</title><rect x="1181.1" y="739.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1184.1" y="750.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.07%)</title><rect x="1181.1" y="723.0" width="0.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1184.1" y="734.0"></text>
</g>
<g>
<title>char[] (8 samples, 0.08%)</title><rect x="1182.1" y="723.0" width="0.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1185.1" y="734.0"></text>
</g>
<g>
<title>char[] (25 samples, 0.24%)</title><rect x="1183.0" y="723.0" width="2.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1186.0" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$HandleTable.&lt;init&gt; (38 samples, 0.36%)</title><rect x="1185.8" y="755.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1188.8" y="766.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.09%)</title><rect x="1185.8" y="739.0" width="1.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1188.8" y="750.0"></text>
</g>
<g>
<title>java.io.ObjectInputStream$HandleTable$HandleList[] (11 samples, 0.10%)</title><rect x="1186.9" y="739.0" width="1.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1189.9" y="750.0"></text>
</g>
<g>
<title>java.lang.Object[] (17 samples, 0.16%)</title><rect x="1188.1" y="739.0" width="1.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1191.1" y="750.0"></text>
</g>
</g>
</svg>
