<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="773"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="773"> </text>
<g id="frames">
<g>
<title>all (168 samples, 100.00%)</title><rect x="10.0" y="739.0" width="1180.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="13.0" y="750.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (3 samples, 1.79%)</title><rect x="10.0" y="723.0" width="21.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="734.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3 samples, 1.79%)</title><rect x="10.0" y="707.0" width="21.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3 samples, 1.79%)</title><rect x="10.0" y="691.0" width="21.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="702.0">j..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (3 samples, 1.79%)</title><rect x="10.0" y="675.0" width="21.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="686.0">s..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (3 samples, 1.79%)</title><rect x="10.0" y="659.0" width="21.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="670.0">j..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$91/1780139009.run (3 samples, 1.79%)</title><rect x="10.0" y="643.0" width="21.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="654.0">s..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (3 samples, 1.79%)</title><rect x="10.0" y="627.0" width="21.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="638.0">s..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (3 samples, 1.79%)</title><rect x="10.0" y="611.0" width="21.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="622.0">s..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (3 samples, 1.79%)</title><rect x="10.0" y="595.0" width="21.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="606.0">s..</text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (3 samples, 1.79%)</title><rect x="10.0" y="579.0" width="21.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="590.0">s..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (3 samples, 1.79%)</title><rect x="10.0" y="563.0" width="21.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="574.0">j..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (3 samples, 1.79%)</title><rect x="10.0" y="547.0" width="21.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="558.0">s..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (3 samples, 1.79%)</title><rect x="10.0" y="531.0" width="21.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="542.0">s..</text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (3 samples, 1.79%)</title><rect x="10.0" y="515.0" width="21.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="526.0">s..</text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (2 samples, 1.19%)</title><rect x="10.0" y="499.0" width="14.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (2 samples, 1.19%)</title><rect x="10.0" y="483.0" width="14.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 1.19%)</title><rect x="10.0" y="467.0" width="14.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (2 samples, 1.19%)</title><rect x="10.0" y="451.0" width="14.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 1.19%)</title><rect x="10.0" y="435.0" width="14.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 1.19%)</title><rect x="10.0" y="419.0" width="14.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 1.19%)</title><rect x="10.0" y="403.0" width="14.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2 samples, 1.19%)</title><rect x="10.0" y="387.0" width="14.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 1.19%)</title><rect x="10.0" y="371.0" width="14.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 1.19%)</title><rect x="10.0" y="355.0" width="14.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 1.19%)</title><rect x="10.0" y="339.0" width="14.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (2 samples, 1.19%)</title><rect x="10.0" y="323.0" width="14.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2 samples, 1.19%)</title><rect x="10.0" y="307.0" width="14.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2 samples, 1.19%)</title><rect x="10.0" y="291.0" width="14.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (2 samples, 1.19%)</title><rect x="10.0" y="275.0" width="14.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (2 samples, 1.19%)</title><rect x="10.0" y="259.0" width="14.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (2 samples, 1.19%)</title><rect x="10.0" y="243.0" width="14.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 1.19%)</title><rect x="10.0" y="227.0" width="14.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.lookup (2 samples, 1.19%)</title><rect x="10.0" y="211.0" width="14.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.60%)</title><rect x="10.0" y="195.0" width="7.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.60%)</title><rect x="17.0" y="195.0" width="7.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="20.0" y="206.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.releaseOutputStream (1 samples, 0.60%)</title><rect x="24.0" y="499.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="27.0" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.flush (1 samples, 0.60%)</title><rect x="24.0" y="483.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.0" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.flush (1 samples, 0.60%)</title><rect x="24.0" y="467.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="27.0" y="478.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (1 samples, 0.60%)</title><rect x="24.0" y="451.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="27.0" y="462.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (1 samples, 0.60%)</title><rect x="24.0" y="435.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.0" y="446.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.write (1 samples, 0.60%)</title><rect x="24.0" y="419.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="27.0" y="430.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite (1 samples, 0.60%)</title><rect x="24.0" y="403.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="27.0" y="414.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite0 (1 samples, 0.60%)</title><rect x="24.0" y="387.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.0" y="398.0"></text>
</g>
<g>
<title>Java_java_net_SocketOutputStream_socketWrite0 (1 samples, 0.60%)</title><rect x="24.0" y="371.0" width="7.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="27.0" y="382.0"></text>
</g>
<g>
<title>__errno_location (1 samples, 0.60%)</title><rect x="24.0" y="355.0" width="7.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="27.0" y="366.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (103 samples, 61.31%)</title><rect x="31.1" y="723.0" width="723.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="34.1" y="734.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 1.79%)</title><rect x="122.4" y="707.0" width="21.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="125.4" y="718.0">I..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (12 samples, 7.14%)</title><rect x="143.5" y="707.0" width="84.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="146.5" y="718.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (1 samples, 0.60%)</title><rect x="150.5" y="691.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="153.5" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (10 samples, 5.95%)</title><rect x="157.5" y="691.0" width="70.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="160.5" y="702.0">one/nio/..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.19%)</title><rect x="164.5" y="675.0" width="14.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="167.5" y="686.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.60%)</title><rect x="178.6" y="675.0" width="7.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="181.6" y="686.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.60%)</title><rect x="185.6" y="675.0" width="7.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="188.6" y="686.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.60%)</title><rect x="192.6" y="675.0" width="7.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="195.6" y="686.0"></text>
</g>
<g>
<title>epoll_wait (4 samples, 2.38%)</title><rect x="199.6" y="675.0" width="28.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="202.6" y="686.0">ep..</text>
</g>
<g>
<title>one/nio/net/Session.process (75 samples, 44.64%)</title><rect x="227.7" y="707.0" width="526.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.7" y="718.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (75 samples, 44.64%)</title><rect x="227.7" y="691.0" width="526.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.7" y="702.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (69 samples, 41.07%)</title><rect x="227.7" y="675.0" width="484.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="230.7" y="686.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (63 samples, 37.50%)</title><rect x="227.7" y="659.0" width="442.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.7" y="670.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (63 samples, 37.50%)</title><rect x="227.7" y="643.0" width="442.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="230.7" y="654.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_response.handleRequest (63 samples, 37.50%)</title><rect x="227.7" y="627.0" width="442.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="230.7" y="638.0">RequestHandler1_response.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (7 samples, 4.17%)</title><rect x="227.7" y="611.0" width="49.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.7" y="622.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (6 samples, 3.57%)</title><rect x="227.7" y="595.0" width="42.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.7" y="606.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 1.79%)</title><rect x="227.7" y="579.0" width="21.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.7" y="590.0">o..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 1.19%)</title><rect x="234.8" y="563.0" width="14.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.8" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.60%)</title><rect x="234.8" y="547.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.8" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.60%)</title><rect x="241.8" y="547.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.8" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.60%)</title><rect x="241.8" y="531.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="244.8" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.60%)</title><rect x="241.8" y="515.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="244.8" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (3 samples, 1.79%)</title><rect x="248.8" y="579.0" width="21.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="251.8" y="590.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (3 samples, 1.79%)</title><rect x="248.8" y="563.0" width="21.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="251.8" y="574.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (3 samples, 1.79%)</title><rect x="248.8" y="547.0" width="21.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.8" y="558.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (3 samples, 1.79%)</title><rect x="248.8" y="531.0" width="21.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.8" y="542.0">o..</text>
</g>
<g>
<title>__libc_send (1 samples, 0.60%)</title><rect x="262.9" y="515.0" width="7.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="265.9" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.60%)</title><rect x="269.9" y="595.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.9" y="606.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.60%)</title><rect x="269.9" y="579.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="272.9" y="590.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.60%)</title><rect x="269.9" y="563.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="272.9" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (2 samples, 1.19%)</title><rect x="276.9" y="611.0" width="14.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="279.9" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 1.19%)</title><rect x="276.9" y="595.0" width="14.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.9" y="606.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.60%)</title><rect x="276.9" y="579.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.9" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.60%)</title><rect x="276.9" y="563.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="279.9" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.60%)</title><rect x="276.9" y="547.0" width="7.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="279.9" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.60%)</title><rect x="283.9" y="579.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.9" y="590.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.60%)</title><rect x="283.9" y="563.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.9" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (54 samples, 32.14%)</title><rect x="291.0" y="611.0" width="379.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="294.0" y="622.0">ru/mail/polis/service/mrsandman5/ServiceImpl.response</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (33 samples, 19.64%)</title><rect x="291.0" y="595.0" width="231.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="294.0" y="606.0">ch/qos/logback/classic/Logger.d..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (33 samples, 19.64%)</title><rect x="291.0" y="579.0" width="231.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.0" y="590.0">ch/qos/logback/classic/Logger.f..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (33 samples, 19.64%)</title><rect x="291.0" y="563.0" width="231.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.0" y="574.0">ch/qos/logback/classic/Logger.b..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (31 samples, 18.45%)</title><rect x="291.0" y="547.0" width="217.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="294.0" y="558.0">ch/qos/logback/classic/Logger..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (31 samples, 18.45%)</title><rect x="291.0" y="531.0" width="217.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.0" y="542.0">ch/qos/logback/classic/Logger..</text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (31 samples, 18.45%)</title><rect x="291.0" y="515.0" width="217.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.0" y="526.0">ch/qos/logback/core/spi/Appen..</text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (31 samples, 18.45%)</title><rect x="291.0" y="499.0" width="217.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="294.0" y="510.0">ch/qos/logback/core/Unsynchro..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (27 samples, 16.07%)</title><rect x="291.0" y="483.0" width="189.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.0" y="494.0">ch/qos/logback/core/Outpu..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (27 samples, 16.07%)</title><rect x="291.0" y="467.0" width="189.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="294.0" y="478.0">ch/qos/logback/core/Outpu..</text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.prepareForDeferredProcessing (2 samples, 1.19%)</title><rect x="291.0" y="451.0" width="14.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="294.0" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.getFormattedMessage (2 samples, 1.19%)</title><rect x="291.0" y="435.0" width="14.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.0" y="446.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (2 samples, 1.19%)</title><rect x="291.0" y="419.0" width="14.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.0" y="430.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (1 samples, 0.60%)</title><rect x="291.0" y="403.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="294.0" y="414.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.60%)</title><rect x="291.0" y="387.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="294.0" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.60%)</title><rect x="291.0" y="371.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.0" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.60%)</title><rect x="291.0" y="355.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="294.0" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.60%)</title><rect x="291.0" y="339.0" width="7.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="294.0" y="350.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.getThrowableCandidate (1 samples, 0.60%)</title><rect x="298.0" y="403.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.0" y="414.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.writeBytes (13 samples, 7.74%)</title><rect x="305.0" y="451.0" width="91.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="308.0" y="462.0">ch/qos/logb..</text>
</g>
<g>
<title>ch/qos/logback/core/joran/spi/ConsoleTarget$1.flush (1 samples, 0.60%)</title><rect x="305.0" y="435.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.0" y="446.0"></text>
</g>
<g>
<title>java/io/PrintStream.flush (1 samples, 0.60%)</title><rect x="305.0" y="419.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.0" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/core/joran/spi/ConsoleTarget$1.write (9 samples, 5.36%)</title><rect x="312.0" y="435.0" width="63.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="315.0" y="446.0">ch/qos/..</text>
</g>
<g>
<title>java/io/FilterOutputStream.write (9 samples, 5.36%)</title><rect x="312.0" y="419.0" width="63.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="315.0" y="430.0">java/io..</text>
</g>
<g>
<title>java/io/PrintStream.write (9 samples, 5.36%)</title><rect x="312.0" y="403.0" width="63.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.0" y="414.0">java/io..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (9 samples, 5.36%)</title><rect x="312.0" y="387.0" width="63.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="315.0" y="398.0">java/io..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (9 samples, 5.36%)</title><rect x="312.0" y="371.0" width="63.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="315.0" y="382.0">java/io..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (9 samples, 5.36%)</title><rect x="312.0" y="355.0" width="63.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="315.0" y="366.0">java/io..</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (9 samples, 5.36%)</title><rect x="312.0" y="339.0" width="63.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="315.0" y="350.0">java/io..</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (8 samples, 4.76%)</title><rect x="319.0" y="323.0" width="56.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="322.0" y="334.0">Java_j..</text>
</g>
<g>
<title>jni_ExceptionOccurred (1 samples, 0.60%)</title><rect x="326.1" y="307.0" width="7.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="329.1" y="318.0"></text>
</g>
<g>
<title>writeBytes (6 samples, 3.57%)</title><rect x="333.1" y="307.0" width="42.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="336.1" y="318.0">writ..</text>
</g>
<g>
<title>__libc_write (2 samples, 1.19%)</title><rect x="333.1" y="291.0" width="14.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="336.1" y="302.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.60%)</title><rect x="347.1" y="291.0" width="7.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="350.1" y="302.0"></text>
</g>
<g>
<title>jni_GetObjectField (3 samples, 1.79%)</title><rect x="354.2" y="291.0" width="21.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="357.2" y="302.0">j..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;802934ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 802934ul&gt;::oop_access_barrier(oopDesc*, long) (2 samples, 1.19%)</title><rect x="361.2" y="275.0" width="14.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="364.2" y="286.0"></text>
</g>
<g>
<title>java_lang_ref_Reference::is_referent_field(oopDesc*, long) (2 samples, 1.19%)</title><rect x="361.2" y="259.0" width="14.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="364.2" y="270.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.60%)</title><rect x="375.2" y="435.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="378.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 1.19%)</title><rect x="382.3" y="435.0" width="14.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="385.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.19%)</title><rect x="382.3" y="419.0" width="14.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="385.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 1.19%)</title><rect x="382.3" y="403.0" width="14.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="385.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 1.19%)</title><rect x="382.3" y="387.0" width="14.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="385.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 1.19%)</title><rect x="382.3" y="371.0" width="14.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="385.3" y="382.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (1 samples, 0.60%)</title><rect x="389.3" y="355.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="392.3" y="366.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (12 samples, 7.14%)</title><rect x="396.3" y="451.0" width="84.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="399.3" y="462.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (11 samples, 6.55%)</title><rect x="396.3" y="435.0" width="77.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="399.3" y="446.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (11 samples, 6.55%)</title><rect x="396.3" y="419.0" width="77.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="399.3" y="430.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/core/util/CachingDateFormatter.format (4 samples, 2.38%)</title><rect x="403.3" y="403.0" width="28.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="406.3" y="414.0">ch..</text>
</g>
<g>
<title>java/text/DateFormat.format (4 samples, 2.38%)</title><rect x="403.3" y="387.0" width="28.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="406.3" y="398.0">ja..</text>
</g>
<g>
<title>java/lang/StringBuffer.toString (1 samples, 0.60%)</title><rect x="403.3" y="371.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="406.3" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.isLatin1 (1 samples, 0.60%)</title><rect x="403.3" y="355.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.3" y="366.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (3 samples, 1.79%)</title><rect x="410.4" y="371.0" width="21.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="413.4" y="382.0">j..</text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (3 samples, 1.79%)</title><rect x="410.4" y="355.0" width="21.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="413.4" y="366.0">j..</text>
</g>
<g>
<title>java/text/SimpleDateFormat.subFormat (2 samples, 1.19%)</title><rect x="410.4" y="339.0" width="14.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="413.4" y="350.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.zeroPaddingNumber (1 samples, 0.60%)</title><rect x="417.4" y="323.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="420.4" y="334.0"></text>
</g>
<g>
<title>java/text/DecimalFormat.format (1 samples, 0.60%)</title><rect x="417.4" y="307.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="420.4" y="318.0"></text>
</g>
<g>
<title>java/text/DecimalFormat.format (1 samples, 0.60%)</title><rect x="417.4" y="291.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="420.4" y="302.0"></text>
</g>
<g>
<title>java/text/DecimalFormat.subformat (1 samples, 0.60%)</title><rect x="417.4" y="275.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="420.4" y="286.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (1 samples, 0.60%)</title><rect x="417.4" y="259.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="420.4" y="270.0"></text>
</g>
<g>
<title>java/util/Calendar.setTime (1 samples, 0.60%)</title><rect x="424.4" y="339.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="427.4" y="350.0"></text>
</g>
<g>
<title>java/util/Calendar.setTimeInMillis (1 samples, 0.60%)</title><rect x="424.4" y="323.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="427.4" y="334.0"></text>
</g>
<g>
<title>java/util/GregorianCalendar.computeFields (1 samples, 0.60%)</title><rect x="424.4" y="307.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="427.4" y="318.0"></text>
</g>
<g>
<title>java/util/GregorianCalendar.computeFields (1 samples, 0.60%)</title><rect x="424.4" y="291.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="427.4" y="302.0"></text>
</g>
<g>
<title>java/util/Calendar.internalSet (1 samples, 0.60%)</title><rect x="424.4" y="275.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="427.4" y="286.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.98%)</title><rect x="431.4" y="403.0" width="35.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="434.4" y="414.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 2.98%)</title><rect x="431.4" y="387.0" width="35.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="434.4" y="398.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.79%)</title><rect x="431.4" y="371.0" width="21.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="434.4" y="382.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.79%)</title><rect x="431.4" y="355.0" width="21.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="434.4" y="366.0">j..</text>
</g>
<g>
<title>java/lang/String.length (2 samples, 1.19%)</title><rect x="452.5" y="371.0" width="14.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="455.5" y="382.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.60%)</title><rect x="466.5" y="403.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="469.5" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.60%)</title><rect x="466.5" y="387.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="469.5" y="398.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.60%)</title><rect x="466.5" y="371.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="469.5" y="382.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.60%)</title><rect x="466.5" y="355.0" width="7.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="469.5" y="366.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.convertToBytes (1 samples, 0.60%)</title><rect x="473.6" y="435.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="476.6" y="446.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.60%)</title><rect x="473.6" y="419.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="476.6" y="430.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.60%)</title><rect x="473.6" y="403.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="476.6" y="414.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.60%)</title><rect x="473.6" y="387.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="476.6" y="398.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.60%)</title><rect x="473.6" y="371.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="476.6" y="382.0"></text>
</g>
<g>
<title>java/lang/Boolean.equals (1 samples, 0.60%)</title><rect x="480.6" y="483.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="483.6" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.79%)</title><rect x="487.6" y="483.0" width="21.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="490.6" y="494.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.79%)</title><rect x="487.6" y="467.0" width="21.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="490.6" y="478.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (2 samples, 1.19%)</title><rect x="494.6" y="451.0" width="14.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="497.6" y="462.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.60%)</title><rect x="501.7" y="435.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="504.7" y="446.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.60%)</title><rect x="501.7" y="419.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="504.7" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.&lt;init&gt; (2 samples, 1.19%)</title><rect x="508.7" y="547.0" width="14.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="511.7" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (1 samples, 0.60%)</title><rect x="508.7" y="531.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="511.7" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.60%)</title><rect x="515.7" y="531.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="518.7" y="542.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.60%)</title><rect x="515.7" y="515.0" width="7.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="518.7" y="526.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.60%)</title><rect x="522.7" y="595.0" width="7.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="525.7" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.delete (20 samples, 11.90%)</title><rect x="529.8" y="595.0" width="140.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="532.8" y="606.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.60%)</title><rect x="529.8" y="579.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="532.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.remove (19 samples, 11.31%)</title><rect x="536.8" y="579.0" width="133.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="539.8" y="590.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.remove (19 samples, 11.31%)</title><rect x="536.8" y="563.0" width="133.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="539.8" y="574.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>java/util/TreeMap.containsKey (12 samples, 7.14%)</title><rect x="536.8" y="547.0" width="84.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="539.8" y="558.0">java/util/..</text>
</g>
<g>
<title>java/util/TreeMap.getEntry (12 samples, 7.14%)</title><rect x="536.8" y="531.0" width="84.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="539.8" y="542.0">java/util/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 5.36%)</title><rect x="557.9" y="515.0" width="63.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="560.9" y="526.0">java/ni..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 3.57%)</title><rect x="578.9" y="499.0" width="42.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="581.9" y="510.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.60%)</title><rect x="578.9" y="483.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="581.9" y="494.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 2.98%)</title><rect x="586.0" y="483.0" width="35.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="589.0" y="494.0">jav..</text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 1.19%)</title><rect x="607.0" y="467.0" width="14.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="610.0" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (7 samples, 4.17%)</title><rect x="621.1" y="547.0" width="49.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="624.1" y="558.0">java/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 3.57%)</title><rect x="621.1" y="531.0" width="42.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="624.1" y="542.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 3.57%)</title><rect x="621.1" y="515.0" width="42.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="624.1" y="526.0">java..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 3.57%)</title><rect x="621.1" y="499.0" width="42.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="624.1" y="510.0">java..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 1.19%)</title><rect x="649.2" y="483.0" width="14.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="652.2" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.60%)</title><rect x="656.2" y="467.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="659.2" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.60%)</title><rect x="663.2" y="531.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="666.2" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (1 samples, 0.60%)</title><rect x="663.2" y="515.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="666.2" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateLeft (1 samples, 0.60%)</title><rect x="663.2" y="499.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="666.2" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 2.38%)</title><rect x="670.2" y="659.0" width="28.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="673.2" y="670.0">on..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.60%)</title><rect x="677.3" y="643.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="680.3" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.60%)</title><rect x="677.3" y="627.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="680.3" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 1.19%)</title><rect x="684.3" y="643.0" width="14.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="687.3" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.60%)</title><rect x="698.3" y="659.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="701.3" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.60%)</title><rect x="705.4" y="659.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="708.4" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.60%)</title><rect x="705.4" y="643.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="708.4" y="654.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (6 samples, 3.57%)</title><rect x="712.4" y="675.0" width="42.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="715.4" y="686.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (6 samples, 3.57%)</title><rect x="712.4" y="659.0" width="42.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="715.4" y="670.0">one/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (1 samples, 0.60%)</title><rect x="712.4" y="643.0" width="7.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="715.4" y="654.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.60%)</title><rect x="712.4" y="627.0" width="7.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="715.4" y="638.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.60%)</title><rect x="712.4" y="611.0" width="7.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="715.4" y="622.0"></text>
</g>
<g>
<title>__recv (4 samples, 2.38%)</title><rect x="719.4" y="643.0" width="28.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="722.4" y="654.0">__..</text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.60%)</title><rect x="747.5" y="643.0" width="7.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="750.5" y="654.0"></text>
</g>
<g>
<title>start_thread (62 samples, 36.90%)</title><rect x="754.5" y="723.0" width="435.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="757.5" y="734.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (62 samples, 36.90%)</title><rect x="754.5" y="707.0" width="435.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="757.5" y="718.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (62 samples, 36.90%)</title><rect x="754.5" y="691.0" width="435.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="757.5" y="702.0">Thread::call_run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (62 samples, 36.90%)</title><rect x="754.5" y="675.0" width="435.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="757.5" y="686.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (62 samples, 36.90%)</title><rect x="754.5" y="659.0" width="435.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="757.5" y="670.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (62 samples, 36.90%)</title><rect x="754.5" y="643.0" width="435.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="757.5" y="654.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (61 samples, 36.31%)</title><rect x="754.5" y="627.0" width="428.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="757.5" y="638.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, Directiv..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (61 samples, 36.31%)</title><rect x="754.5" y="611.0" width="428.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="757.5" y="622.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool,..</text>
</g>
<g>
<title>Compile::Code_Gen() (37 samples, 22.02%)</title><rect x="754.5" y="595.0" width="259.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="757.5" y="606.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.60%)</title><rect x="754.5" y="579.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="757.5" y="590.0"></text>
</g>
<g>
<title>string_compareLNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.60%)</title><rect x="754.5" y="563.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="757.5" y="574.0"></text>
</g>
<g>
<title>MacroAssembler::string_compare(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, XMMRegisterImpl*, int) (1 samples, 0.60%)</title><rect x="754.5" y="547.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="757.5" y="558.0"></text>
</g>
<g>
<title>Assembler::decl(RegisterImpl*) (1 samples, 0.60%)</title><rect x="754.5" y="531.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="757.5" y="542.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 2.38%)</title><rect x="761.5" y="579.0" width="28.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="764.5" y="590.0">Ma..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 2.38%)</title><rect x="761.5" y="563.0" width="28.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="764.5" y="574.0">Ma..</text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (2 samples, 1.19%)</title><rect x="761.5" y="547.0" width="14.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="764.5" y="558.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.60%)</title><rect x="768.6" y="531.0" width="7.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="771.6" y="542.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.60%)</title><rect x="775.6" y="547.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="778.6" y="558.0"></text>
</g>
<g>
<title>Node::rm_prec(unsigned int) (1 samples, 0.60%)</title><rect x="782.6" y="547.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="785.6" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.79%)</title><rect x="789.6" y="579.0" width="21.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="792.6" y="590.0">P..</text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.60%)</title><rect x="789.6" y="563.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="792.6" y="574.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.60%)</title><rect x="789.6" y="547.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="792.6" y="558.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.60%)</title><rect x="789.6" y="531.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="792.6" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.19%)</title><rect x="796.7" y="563.0" width="14.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="799.7" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.60%)</title><rect x="796.7" y="547.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="799.7" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.60%)</title><rect x="796.7" y="531.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="799.7" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.60%)</title><rect x="803.7" y="547.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="806.7" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.60%)</title><rect x="803.7" y="531.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="806.7" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.60%)</title><rect x="810.7" y="579.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="813.7" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (28 samples, 16.67%)</title><rect x="817.7" y="579.0" width="196.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="820.7" y="590.0">PhaseChaitin::Register_All..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.60%)</title><rect x="824.8" y="563.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="827.8" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.60%)</title><rect x="831.8" y="563.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="834.8" y="574.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.60%)</title><rect x="831.8" y="547.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="834.8" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.19%)</title><rect x="838.8" y="563.0" width="14.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="841.8" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.60%)</title><rect x="845.8" y="547.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="848.8" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 2.38%)</title><rect x="852.9" y="563.0" width="28.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="855.9" y="574.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.60%)</title><rect x="873.9" y="547.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="876.9" y="558.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.60%)</title><rect x="873.9" y="531.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="876.9" y="542.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.60%)</title><rect x="873.9" y="515.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="876.9" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 1.79%)</title><rect x="881.0" y="563.0" width="21.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="884.0" y="574.0">P..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.60%)</title><rect x="888.0" y="547.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="891.0" y="558.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.60%)</title><rect x="895.0" y="547.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="898.0" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 2.98%)</title><rect x="902.0" y="563.0" width="35.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="905.0" y="574.0">Pha..</text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.60%)</title><rect x="923.1" y="547.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="926.1" y="558.0"></text>
</g>
<g>
<title>castIINode::out_RegMask() const (1 samples, 0.60%)</title><rect x="930.1" y="547.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="933.1" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 3.57%)</title><rect x="937.1" y="563.0" width="42.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="940.1" y="574.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.79%)</title><rect x="958.2" y="547.0" width="21.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="961.2" y="558.0">P..</text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.60%)</title><rect x="979.3" y="563.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="982.3" y="574.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.60%)</title><rect x="979.3" y="547.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="982.3" y="558.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.60%)</title><rect x="979.3" y="531.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="982.3" y="542.0"></text>
</g>
<g>
<title>LRG::compute_degree(LRG&amp;) const (1 samples, 0.60%)</title><rect x="979.3" y="515.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="982.3" y="526.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.79%)</title><rect x="986.3" y="563.0" width="21.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="989.3" y="574.0">P..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.60%)</title><rect x="986.3" y="547.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="989.3" y="558.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.19%)</title><rect x="993.3" y="547.0" width="14.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="996.3" y="558.0"></text>
</g>
<g>
<title>compI_rRegNode::ideal_Opcode() const (1 samples, 0.60%)</title><rect x="1007.4" y="563.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1010.4" y="574.0"></text>
</g>
<g>
<title>Compile::Optimize() (17 samples, 10.12%)</title><rect x="1014.4" y="595.0" width="119.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1017.4" y="606.0">Compile::Optimi..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (7 samples, 4.17%)</title><rect x="1014.4" y="579.0" width="49.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1017.4" y="590.0">Compi..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (7 samples, 4.17%)</title><rect x="1014.4" y="563.0" width="49.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1017.4" y="574.0">Phase..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.60%)</title><rect x="1014.4" y="547.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1017.4" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 2.38%)</title><rect x="1021.4" y="547.0" width="28.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1024.4" y="558.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.79%)</title><rect x="1028.5" y="531.0" width="21.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1031.5" y="542.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 1.19%)</title><rect x="1035.5" y="515.0" width="14.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1038.5" y="526.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.60%)</title><rect x="1042.5" y="499.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.5" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.60%)</title><rect x="1049.5" y="547.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1052.5" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.60%)</title><rect x="1049.5" y="531.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1052.5" y="542.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.60%)</title><rect x="1056.5" y="547.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1059.5" y="558.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.60%)</title><rect x="1063.6" y="579.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1066.6" y="590.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.60%)</title><rect x="1070.6" y="579.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1073.6" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (4 samples, 2.38%)</title><rect x="1077.6" y="579.0" width="28.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.6" y="590.0">Ph..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.60%)</title><rect x="1077.6" y="563.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1080.6" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.60%)</title><rect x="1084.6" y="563.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.6" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.60%)</title><rect x="1084.6" y="547.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.6" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.60%)</title><rect x="1091.7" y="563.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1094.7" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.60%)</title><rect x="1091.7" y="547.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.7" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.60%)</title><rect x="1098.7" y="563.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.7" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.60%)</title><rect x="1098.7" y="547.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1101.7" y="558.0"></text>
</g>
<g>
<title>ConNNode::Opcode() const (1 samples, 0.60%)</title><rect x="1098.7" y="531.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1101.7" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (2 samples, 1.19%)</title><rect x="1105.7" y="579.0" width="14.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.7" y="590.0"></text>
</g>
<g>
<title>BarrierSetC2::has_load_barriers() const (1 samples, 0.60%)</title><rect x="1105.7" y="563.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.7" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.60%)</title><rect x="1112.7" y="563.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.7" y="574.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 1.19%)</title><rect x="1119.8" y="579.0" width="14.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.8" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.19%)</title><rect x="1119.8" y="563.0" width="14.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.8" y="574.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.60%)</title><rect x="1119.8" y="547.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.8" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.60%)</title><rect x="1126.8" y="547.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.8" y="558.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.60%)</title><rect x="1126.8" y="531.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.8" y="542.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.60%)</title><rect x="1126.8" y="515.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.8" y="526.0"></text>
</g>
<g>
<title>step_through_mergemem(PhaseGVN*, MergeMemNode*, TypePtr const*, TypePtr const*, outputStream*) (1 samples, 0.60%)</title><rect x="1126.8" y="499.0" width="7.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1129.8" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.60%)</title><rect x="1126.8" y="483.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.8" y="494.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.60%)</title><rect x="1126.8" y="467.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.57%)</title><rect x="1133.8" y="595.0" width="42.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.8" y="606.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.57%)</title><rect x="1133.8" y="579.0" width="42.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.8" y="590.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.57%)</title><rect x="1133.8" y="563.0" width="42.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.8" y="574.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.57%)</title><rect x="1133.8" y="547.0" width="42.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.8" y="558.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.57%)</title><rect x="1133.8" y="531.0" width="42.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.8" y="542.0">Pars..</text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.60%)</title><rect x="1133.8" y="515.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.8" y="526.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const*&amp;) (1 samples, 0.60%)</title><rect x="1133.8" y="499.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.8" y="510.0"></text>
</g>
<g>
<title>GraphKit::array_element_address(Node*, Node*, BasicType, TypeInt const*, Node*) (1 samples, 0.60%)</title><rect x="1133.8" y="483.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.8" y="494.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.60%)</title><rect x="1133.8" y="467.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.8" y="478.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseGVN*) const (1 samples, 0.60%)</title><rect x="1133.8" y="451.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.8" y="462.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.60%)</title><rect x="1133.8" y="435.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.8" y="446.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.60%)</title><rect x="1133.8" y="419.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.8" y="430.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.60%)</title><rect x="1133.8" y="403.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.98%)</title><rect x="1140.8" y="515.0" width="35.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.8" y="526.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.38%)</title><rect x="1140.8" y="499.0" width="28.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.8" y="510.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.38%)</title><rect x="1140.8" y="483.0" width="28.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.8" y="494.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.38%)</title><rect x="1140.8" y="467.0" width="28.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.8" y="478.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.38%)</title><rect x="1140.8" y="451.0" width="28.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.8" y="462.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.38%)</title><rect x="1140.8" y="435.0" width="28.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.8" y="446.0">Pa..</text>
</g>
<g>
<title>Parse::array_store(BasicType) (1 samples, 0.60%)</title><rect x="1140.8" y="419.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.8" y="430.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const*&amp;) (1 samples, 0.60%)</title><rect x="1140.8" y="403.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.8" y="414.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.60%)</title><rect x="1140.8" y="387.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.8" y="398.0"></text>
</g>
<g>
<title>SafePointNode::set_local(JVMState*, unsigned int, Node*) (1 samples, 0.60%)</title><rect x="1140.8" y="371.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.19%)</title><rect x="1147.9" y="419.0" width="14.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.19%)</title><rect x="1147.9" y="403.0" width="14.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.9" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.19%)</title><rect x="1147.9" y="387.0" width="14.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.19%)</title><rect x="1147.9" y="371.0" width="14.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.19%)</title><rect x="1147.9" y="355.0" width="14.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.19%)</title><rect x="1147.9" y="339.0" width="14.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.19%)</title><rect x="1147.9" y="323.0" width="14.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.9" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.19%)</title><rect x="1147.9" y="307.0" width="14.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.9" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.19%)</title><rect x="1147.9" y="291.0" width="14.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.19%)</title><rect x="1147.9" y="275.0" width="14.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.19%)</title><rect x="1147.9" y="259.0" width="14.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.19%)</title><rect x="1147.9" y="243.0" width="14.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.19%)</title><rect x="1147.9" y="227.0" width="14.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.9" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.19%)</title><rect x="1147.9" y="211.0" width="14.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.9" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.19%)</title><rect x="1147.9" y="195.0" width="14.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.19%)</title><rect x="1147.9" y="179.0" width="14.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.19%)</title><rect x="1147.9" y="163.0" width="14.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.19%)</title><rect x="1147.9" y="147.0" width="14.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.9" y="158.0"></text>
</g>
<g>
<title>GraphKit::push(Node*) (1 samples, 0.60%)</title><rect x="1147.9" y="131.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.60%)</title><rect x="1154.9" y="131.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.60%)</title><rect x="1154.9" y="115.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.9" y="126.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.60%)</title><rect x="1154.9" y="99.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.9" y="110.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.60%)</title><rect x="1154.9" y="83.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.9" y="94.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.60%)</title><rect x="1154.9" y="67.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.9" y="78.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.60%)</title><rect x="1154.9" y="51.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.9" y="62.0"></text>
</g>
<g>
<title>IdealKit::make_leaf_call(TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*, Node*) (1 samples, 0.60%)</title><rect x="1154.9" y="35.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.60%)</title><rect x="1161.9" y="419.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.60%)</title><rect x="1161.9" y="403.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.9" y="414.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.60%)</title><rect x="1161.9" y="387.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.9" y="398.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.60%)</title><rect x="1161.9" y="371.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.9" y="382.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.60%)</title><rect x="1161.9" y="355.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.9" y="366.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.60%)</title><rect x="1161.9" y="339.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.9" y="350.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool) (1 samples, 0.60%)</title><rect x="1161.9" y="323.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.9" y="334.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.60%)</title><rect x="1161.9" y="307.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.9" y="318.0"></text>
</g>
<g>
<title>LoadLNode::hash() const (1 samples, 0.60%)</title><rect x="1161.9" y="291.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.9" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1168.9" y="499.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1168.9" y="483.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1168.9" y="467.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1168.9" y="451.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1168.9" y="435.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.60%)</title><rect x="1168.9" y="419.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.60%)</title><rect x="1168.9" y="403.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1168.9" y="387.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.9" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1168.9" y="371.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1168.9" y="355.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1168.9" y="339.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.60%)</title><rect x="1168.9" y="323.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.60%)</title><rect x="1168.9" y="307.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1168.9" y="291.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1168.9" y="275.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1168.9" y="259.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1168.9" y="243.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.60%)</title><rect x="1168.9" y="227.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.60%)</title><rect x="1168.9" y="211.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.60%)</title><rect x="1168.9" y="195.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.9" y="206.0"></text>
</g>
<g>
<title>TypeOopPtr::singleton() const (1 samples, 0.60%)</title><rect x="1168.9" y="179.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.9" y="190.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.60%)</title><rect x="1176.0" y="595.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.0" y="606.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.60%)</title><rect x="1183.0" y="627.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.0" y="638.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.60%)</title><rect x="1183.0" y="611.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.0" y="622.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.60%)</title><rect x="1183.0" y="595.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.0" y="606.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.60%)</title><rect x="1183.0" y="579.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="590.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.60%)</title><rect x="1183.0" y="563.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="574.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.60%)</title><rect x="1183.0" y="547.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="558.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.60%)</title><rect x="1183.0" y="531.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.0" y="542.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.60%)</title><rect x="1183.0" y="515.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="526.0"></text>
</g>
</g>
</svg>
