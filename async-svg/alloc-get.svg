<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="677"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="677"> </text>
<g id="frames">
<g>
<title>all (76,106 samples, 100.00%)</title><rect x="10.0" y="643.0" width="1180.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="13.0" y="654.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (60,875 samples, 79.99%)</title><rect x="10.0" y="627.0" width="943.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="638.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (60,875 samples, 79.99%)</title><rect x="10.0" y="611.0" width="943.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="622.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (60,875 samples, 79.99%)</title><rect x="10.0" y="595.0" width="943.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="606.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (134 samples, 0.18%)</title><rect x="10.0" y="579.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (134 samples, 0.18%)</title><rect x="10.0" y="563.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (133 samples, 0.17%)</title><rect x="10.0" y="547.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (133 samples, 0.17%)</title><rect x="10.0" y="531.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (133 samples, 0.17%)</title><rect x="10.0" y="515.0" width="2.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$76/103907069.run (60,741 samples, 79.81%)</title><rect x="12.1" y="579.0" width="941.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.1" y="590.0">ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$76/103907069.run</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$asyncExecute$12 (60,741 samples, 79.81%)</title><rect x="12.1" y="563.0" width="941.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="15.1" y="574.0">ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$asyncExecute$12</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$107/1035757000.act (26,646 samples, 35.01%)</title><rect x="12.1" y="547.0" width="413.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.1" y="558.0">ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$107/..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replicasGet$3 (26,646 samples, 35.01%)</title><rect x="12.1" y="531.0" width="413.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.1" y="542.0">ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$repli..</text>
</g>
<g>
<title>java.util.ArrayList (206 samples, 0.27%)</title><rect x="12.1" y="515.0" width="3.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="15.1" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (29 samples, 0.04%)</title><rect x="15.3" y="515.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.3" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (29 samples, 0.04%)</title><rect x="15.3" y="499.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.3" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$110/2033032660.get$Lambda (29 samples, 0.04%)</title><rect x="15.3" y="483.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.3" y="494.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mrsandman5.ServiceImpl$$Lambda$110 (29 samples, 0.04%)</title><rect x="15.3" y="467.0" width="0.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="18.3" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (47 samples, 0.06%)</title><rect x="15.7" y="515.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.7" y="526.0"></text>
</g>
<g>
<title>java.lang.Object[] (47 samples, 0.06%)</title><rect x="15.7" y="499.0" width="0.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="18.7" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.replication (25,134 samples, 33.02%)</title><rect x="16.4" y="515.0" width="389.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.4" y="526.0">ru/mail/polis/service/mrsandman5/ServiceImpl.replicat..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (30 samples, 0.04%)</title><rect x="16.4" y="499.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.4" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (30 samples, 0.04%)</title><rect x="16.4" y="483.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="19.4" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$85/1771982368.get$Lambda (30 samples, 0.04%)</title><rect x="16.4" y="467.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="19.4" y="478.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mrsandman5.ServiceImpl$$Lambda$85 (30 samples, 0.04%)</title><rect x="16.4" y="451.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="19.4" y="462.0"></text>
</g>
<g>
<title>java/util/Collection.stream (152 samples, 0.20%)</title><rect x="16.9" y="499.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="19.9" y="510.0"></text>
</g>
<g>
<title>java/util/HashSet.spliterator (66 samples, 0.09%)</title><rect x="16.9" y="483.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.9" y="494.0"></text>
</g>
<g>
<title>java.util.HashMap$KeySpliterator (66 samples, 0.09%)</title><rect x="16.9" y="467.0" width="1.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="19.9" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (86 samples, 0.11%)</title><rect x="17.9" y="483.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.9" y="494.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (86 samples, 0.11%)</title><rect x="17.9" y="467.0" width="1.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="20.9" y="478.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (40 samples, 0.05%)</title><rect x="19.3" y="499.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.3" y="510.0"></text>
</g>
<g>
<title>java.util.stream.Collectors$CollectorImpl (40 samples, 0.05%)</title><rect x="19.3" y="483.0" width="0.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="22.3" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (23,836 samples, 31.32%)</title><rect x="19.9" y="499.0" width="369.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.9" y="510.0">java/util/stream/ReferencePipeline.collect</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (23,793 samples, 31.26%)</title><rect x="19.9" y="483.0" width="368.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.9" y="494.0">java/util/stream/AbstractPipeline.evaluate</text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (23,793 samples, 31.26%)</title><rect x="19.9" y="467.0" width="368.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="22.9" y="478.0">java/util/stream/ReduceOps$ReduceOp.evaluateSequen..</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (23,737 samples, 31.19%)</title><rect x="19.9" y="451.0" width="368.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.9" y="462.0">java/util/stream/AbstractPipeline.wrapAndCopyInto</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (23,710 samples, 31.15%)</title><rect x="19.9" y="435.0" width="367.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.9" y="446.0">java/util/stream/AbstractPipeline.copyInto</text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (23,677 samples, 31.11%)</title><rect x="19.9" y="419.0" width="367.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.9" y="430.0">java/util/HashMap$KeySpliterator.forEachRemaining</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (23,677 samples, 31.11%)</title><rect x="19.9" y="403.0" width="367.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.9" y="414.0">java/util/stream/ReferencePipeline$3$1.accept</text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (30 samples, 0.04%)</title><rect x="19.9" y="387.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.9" y="398.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$91/1488832228.accept (30 samples, 0.04%)</title><rect x="19.9" y="371.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.9" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (30 samples, 0.04%)</title><rect x="19.9" y="355.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.9" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (30 samples, 0.04%)</title><rect x="19.9" y="339.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="22.9" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (30 samples, 0.04%)</title><rect x="19.9" y="323.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="22.9" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (30 samples, 0.04%)</title><rect x="19.9" y="307.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="22.9" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (30 samples, 0.04%)</title><rect x="19.9" y="291.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.9" y="302.0"></text>
</g>
<g>
<title>java.lang.Object[] (30 samples, 0.04%)</title><rect x="19.9" y="275.0" width="0.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="22.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$85/1771982368.apply (23,647 samples, 31.07%)</title><rect x="20.4" y="387.0" width="366.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.4" y="398.0">ru/mail/polis/service/mrsandman5/ServiceImpl$$Lamb..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replication$0 (23,647 samples, 31.07%)</title><rect x="20.4" y="371.0" width="366.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.4" y="382.0">ru/mail/polis/service/mrsandman5/ServiceImpl.lambd..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$110/2033032660.act (7,970 samples, 10.47%)</title><rect x="20.4" y="355.0" width="123.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.4" y="366.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replicasGet$2 (7,970 samples, 10.47%)</title><rect x="20.4" y="339.0" width="123.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.4" y="350.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/SimpleRequests.get (7,970 samples, 10.47%)</title><rect x="20.4" y="323.0" width="123.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.4" y="334.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.entryFromBytes (7,837 samples, 10.30%)</title><rect x="20.4" y="307.0" width="121.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.4" y="318.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (289 samples, 0.38%)</title><rect x="20.4" y="291.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.4" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (192 samples, 0.25%)</title><rect x="20.4" y="275.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="23.4" y="286.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (39 samples, 0.05%)</title><rect x="20.4" y="259.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.4" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (39 samples, 0.05%)</title><rect x="20.4" y="243.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.4" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (39 samples, 0.05%)</title><rect x="20.4" y="227.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.4" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (39 samples, 0.05%)</title><rect x="20.4" y="211.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.4" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (39 samples, 0.05%)</title><rect x="20.4" y="195.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.4" y="206.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (39 samples, 0.05%)</title><rect x="20.4" y="179.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.4" y="190.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (39 samples, 0.05%)</title><rect x="20.4" y="163.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (39 samples, 0.05%)</title><rect x="20.4" y="147.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.4" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (39 samples, 0.05%)</title><rect x="20.4" y="131.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (39 samples, 0.05%)</title><rect x="20.4" y="115.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="23.4" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (24 samples, 0.03%)</title><rect x="20.4" y="99.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.4" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (24 samples, 0.03%)</title><rect x="20.4" y="83.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="23.4" y="94.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (153 samples, 0.20%)</title><rect x="21.0" y="259.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.0" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (153 samples, 0.20%)</title><rect x="21.0" y="243.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.0" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (153 samples, 0.20%)</title><rect x="21.0" y="227.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.0" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (153 samples, 0.20%)</title><rect x="21.0" y="211.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.0" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (153 samples, 0.20%)</title><rect x="21.0" y="195.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.0" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (153 samples, 0.20%)</title><rect x="21.0" y="179.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.0" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (118 samples, 0.16%)</title><rect x="21.0" y="163.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (107 samples, 0.14%)</title><rect x="21.1" y="147.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (107 samples, 0.14%)</title><rect x="21.1" y="131.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.1" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (107 samples, 0.14%)</title><rect x="21.1" y="115.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.1" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (44 samples, 0.06%)</title><rect x="21.3" y="99.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.3" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (44 samples, 0.06%)</title><rect x="21.3" y="83.0" width="0.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="24.3" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (34 samples, 0.04%)</title><rect x="22.3" y="99.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.3" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (21 samples, 0.03%)</title><rect x="22.5" y="83.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.5" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (21 samples, 0.03%)</title><rect x="22.5" y="67.0" width="0.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="25.5" y="78.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (35 samples, 0.05%)</title><rect x="22.8" y="163.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.8" y="174.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (35 samples, 0.05%)</title><rect x="22.8" y="147.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (35 samples, 0.05%)</title><rect x="22.8" y="131.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="25.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (35 samples, 0.05%)</title><rect x="22.8" y="115.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="25.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (35 samples, 0.05%)</title><rect x="22.8" y="99.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.8" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (19 samples, 0.02%)</title><rect x="22.8" y="83.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.8" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (19 samples, 0.02%)</title><rect x="22.8" y="67.0" width="0.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="25.8" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils$$Lambda$119/797602181.apply (97 samples, 0.13%)</title><rect x="23.3" y="275.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.3" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (97 samples, 0.13%)</title><rect x="23.3" y="259.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.3" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (39 samples, 0.05%)</title><rect x="23.3" y="243.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.3" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (39 samples, 0.05%)</title><rect x="23.3" y="227.0" width="0.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="26.3" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (45 samples, 0.06%)</title><rect x="23.9" y="243.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.9" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (45 samples, 0.06%)</title><rect x="23.9" y="227.0" width="0.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="26.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (47 samples, 0.06%)</title><rect x="24.8" y="291.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.8" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (26 samples, 0.03%)</title><rect x="24.8" y="275.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="27.8" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (26 samples, 0.03%)</title><rect x="24.8" y="259.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="27.8" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (21 samples, 0.03%)</title><rect x="25.2" y="275.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="28.2" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (21 samples, 0.03%)</title><rect x="25.2" y="259.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="28.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Value.getData (56 samples, 0.07%)</title><rect x="25.6" y="291.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.6" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (20 samples, 0.03%)</title><rect x="25.6" y="275.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.6" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (20 samples, 0.03%)</title><rect x="25.6" y="259.0" width="0.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="28.6" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (36 samples, 0.05%)</title><rect x="25.9" y="275.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.9" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (36 samples, 0.05%)</title><rect x="25.9" y="259.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="28.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.present (24 samples, 0.03%)</title><rect x="26.4" y="291.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils.entryIterators (7,405 samples, 9.73%)</title><rect x="27.1" y="291.0" width="114.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.1" y="302.0">ru/mail/polis/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (1,177 samples, 1.55%)</title><rect x="27.1" y="275.0" width="18.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="30.1" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (1,176 samples, 1.55%)</title><rect x="27.1" y="259.0" width="18.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="30.1" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (37 samples, 0.05%)</title><rect x="27.1" y="243.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.1" y="254.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (37 samples, 0.05%)</title><rect x="27.1" y="227.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="30.1" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,139 samples, 1.50%)</title><rect x="27.6" y="243.0" width="17.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.6" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,139 samples, 1.50%)</title><rect x="27.6" y="227.0" width="17.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="30.6" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,124 samples, 1.48%)</title><rect x="27.9" y="211.0" width="17.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.9" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,124 samples, 1.48%)</title><rect x="27.9" y="195.0" width="17.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.9" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,124 samples, 1.48%)</title><rect x="27.9" y="179.0" width="17.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="30.9" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,124 samples, 1.48%)</title><rect x="27.9" y="163.0" width="17.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.9" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1,007 samples, 1.32%)</title><rect x="27.9" y="147.0" width="15.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="30.9" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (1,005 samples, 1.32%)</title><rect x="27.9" y="131.0" width="15.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="30.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (1,005 samples, 1.32%)</title><rect x="27.9" y="115.0" width="15.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="30.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (1,005 samples, 1.32%)</title><rect x="27.9" y="99.0" width="15.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.9" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (137 samples, 0.18%)</title><rect x="27.9" y="83.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.9" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (137 samples, 0.18%)</title><rect x="27.9" y="67.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.9" y="78.0"></text>
</g>
<g>
<title>byte[] (137 samples, 0.18%)</title><rect x="27.9" y="51.0" width="2.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="30.9" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (362 samples, 0.48%)</title><rect x="30.0" y="83.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="33.0" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (362 samples, 0.48%)</title><rect x="30.0" y="67.0" width="5.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="33.0" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Cell (19 samples, 0.02%)</title><rect x="35.6" y="83.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="38.6" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Value (32 samples, 0.04%)</title><rect x="35.9" y="83.0" width="0.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="38.9" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (455 samples, 0.60%)</title><rect x="36.4" y="83.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="39.4" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (186 samples, 0.24%)</title><rect x="36.4" y="67.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.4" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (124 samples, 0.16%)</title><rect x="36.4" y="51.0" width="2.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="39.4" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (62 samples, 0.08%)</title><rect x="38.4" y="51.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="41.4" y="62.0"></text>
</g>
<g>
<title>byte[] (62 samples, 0.08%)</title><rect x="38.4" y="35.0" width="0.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="41.4" y="46.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (269 samples, 0.35%)</title><rect x="39.3" y="67.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="42.3" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (269 samples, 0.35%)</title><rect x="39.3" y="51.0" width="4.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="42.3" y="62.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (117 samples, 0.15%)</title><rect x="43.5" y="147.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.5" y="158.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (117 samples, 0.15%)</title><rect x="43.5" y="131.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="46.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (117 samples, 0.15%)</title><rect x="43.5" y="115.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.5" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (117 samples, 0.15%)</title><rect x="43.5" y="99.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="46.5" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (117 samples, 0.15%)</title><rect x="43.5" y="83.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.5" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (52 samples, 0.07%)</title><rect x="43.5" y="67.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="46.5" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (52 samples, 0.07%)</title><rect x="43.5" y="51.0" width="0.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="46.5" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (65 samples, 0.09%)</title><rect x="44.3" y="67.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.3" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (65 samples, 0.09%)</title><rect x="44.3" y="51.0" width="1.0" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="47.3" y="62.0"></text>
</g>
<g>
<title>java.util.ArrayList (29 samples, 0.04%)</title><rect x="45.3" y="275.0" width="0.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="48.3" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (35 samples, 0.05%)</title><rect x="45.8" y="275.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.8" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (35 samples, 0.05%)</title><rect x="45.8" y="259.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="48.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils$$Lambda$115/1902819636.get$Lambda (35 samples, 0.05%)</title><rect x="45.8" y="243.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="48.8" y="254.0"></text>
</g>
<g>
<title>ru.mail.polis.utils.IteratorUtils$$Lambda$115 (35 samples, 0.05%)</title><rect x="45.8" y="227.0" width="0.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="48.8" y="238.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (79 samples, 0.10%)</title><rect x="46.3" y="275.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.3" y="286.0"></text>
</g>
<g>
<title>java.lang.Object[] (79 samples, 0.10%)</title><rect x="46.3" y="259.0" width="1.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="49.3" y="270.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (6,007 samples, 7.89%)</title><rect x="47.5" y="275.0" width="93.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="50.5" y="286.0">java/util/C..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (6,007 samples, 7.89%)</title><rect x="47.5" y="259.0" width="93.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="50.5" y="270.0">java/lang/I..</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (56 samples, 0.07%)</title><rect x="47.5" y="243.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.5" y="254.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (56 samples, 0.07%)</title><rect x="47.5" y="227.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="50.5" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (56 samples, 0.07%)</title><rect x="47.5" y="211.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.5" y="222.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (56 samples, 0.07%)</title><rect x="47.5" y="195.0" width="0.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="50.5" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils$$Lambda$115/1902819636.accept (5,951 samples, 7.82%)</title><rect x="48.4" y="243.0" width="92.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="51.4" y="254.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils.lambda$entryIterators$3 (5,951 samples, 7.82%)</title><rect x="48.4" y="227.0" width="92.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="51.4" y="238.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.iterator (5,951 samples, 7.82%)</title><rect x="48.4" y="211.0" width="92.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.4" y="222.0">ru/mail/pol..</text>
</g>
<g>
<title>ru.mail.polis.dao.impl.tables.SSTable$1 (66 samples, 0.09%)</title><rect x="48.4" y="195.0" width="1.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="51.4" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt; (5,885 samples, 7.73%)</title><rect x="49.4" y="195.0" width="91.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="52.4" y="206.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getPosition (5,885 samples, 7.73%)</title><rect x="49.4" y="179.0" width="91.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="52.4" y="190.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.keyAt (5,885 samples, 7.73%)</title><rect x="49.4" y="163.0" width="91.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="52.4" y="174.0">ru/mail/pol..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,632 samples, 3.46%)</title><rect x="49.4" y="147.0" width="40.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="52.4" y="158.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,356 samples, 1.78%)</title><rect x="49.4" y="131.0" width="21.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="52.4" y="142.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1,276 samples, 1.68%)</title><rect x="70.4" y="131.0" width="19.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="73.4" y="142.0"></text>
</g>
<g>
<title>byte[] (1,276 samples, 1.68%)</title><rect x="70.4" y="115.0" width="19.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="73.4" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2,555 samples, 3.36%)</title><rect x="90.2" y="147.0" width="39.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.2" y="158.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2,555 samples, 3.36%)</title><rect x="90.2" y="131.0" width="39.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="93.2" y="142.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (698 samples, 0.92%)</title><rect x="129.8" y="147.0" width="10.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="132.8" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (698 samples, 0.92%)</title><rect x="129.8" y="131.0" width="10.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.8" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (698 samples, 0.92%)</title><rect x="129.8" y="115.0" width="10.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="132.8" y="126.0"></text>
</g>
<g>
<title>byte[] (698 samples, 0.92%)</title><rect x="129.8" y="99.0" width="10.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="132.8" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (65 samples, 0.09%)</title><rect x="140.9" y="275.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="143.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (60 samples, 0.08%)</title><rect x="140.9" y="259.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="143.9" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (60 samples, 0.08%)</title><rect x="140.9" y="243.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="143.9" y="254.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (24 samples, 0.03%)</title><rect x="140.9" y="227.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="143.9" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (24 samples, 0.03%)</title><rect x="140.9" y="211.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="143.9" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (24 samples, 0.03%)</title><rect x="140.9" y="195.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="143.9" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (24 samples, 0.03%)</title><rect x="140.9" y="179.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="143.9" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (24 samples, 0.03%)</title><rect x="140.9" y="163.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="143.9" y="174.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (24 samples, 0.03%)</title><rect x="140.9" y="147.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="143.9" y="158.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (24 samples, 0.03%)</title><rect x="140.9" y="131.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="143.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (24 samples, 0.03%)</title><rect x="140.9" y="115.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="143.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (24 samples, 0.03%)</title><rect x="140.9" y="99.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="143.9" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (24 samples, 0.03%)</title><rect x="140.9" y="83.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="143.9" y="94.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (36 samples, 0.05%)</title><rect x="141.3" y="227.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="144.3" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (36 samples, 0.05%)</title><rect x="141.3" y="211.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="144.3" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (36 samples, 0.05%)</title><rect x="141.3" y="195.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="144.3" y="206.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (36 samples, 0.05%)</title><rect x="141.3" y="179.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="144.3" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (36 samples, 0.05%)</title><rect x="141.3" y="163.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="144.3" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (36 samples, 0.05%)</title><rect x="141.3" y="147.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="144.3" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (33 samples, 0.04%)</title><rect x="141.3" y="131.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="144.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (33 samples, 0.04%)</title><rect x="141.3" y="115.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="144.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (33 samples, 0.04%)</title><rect x="141.3" y="99.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="144.3" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (33 samples, 0.04%)</title><rect x="141.3" y="83.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="144.3" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (18 samples, 0.02%)</title><rect x="141.5" y="67.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="144.5" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.entryToResponse (133 samples, 0.17%)</title><rect x="141.9" y="307.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="144.9" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/298782942.linkToTargetMethod (38 samples, 0.05%)</title><rect x="141.9" y="291.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="144.9" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1686042773.invoke (38 samples, 0.05%)</title><rect x="141.9" y="275.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="144.9" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (38 samples, 0.05%)</title><rect x="141.9" y="259.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="144.9" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (27 samples, 0.04%)</title><rect x="142.0" y="243.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="145.0" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (27 samples, 0.04%)</title><rect x="142.0" y="227.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="145.0" y="238.0"></text>
</g>
<g>
<title>byte[] (27 samples, 0.04%)</title><rect x="142.0" y="211.0" width="0.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="145.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.getData (17 samples, 0.02%)</title><rect x="142.5" y="291.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="145.5" y="302.0"></text>
</g>
<g>
<title>byte[] (17 samples, 0.02%)</title><rect x="142.5" y="275.0" width="0.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="145.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.nonemptyResponse (78 samples, 0.10%)</title><rect x="142.7" y="291.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="145.7" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (64 samples, 0.08%)</title><rect x="142.9" y="275.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="145.9" y="286.0"></text>
</g>
<g>
<title>byte[] (31 samples, 0.04%)</title><rect x="142.9" y="259.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="145.9" y="270.0"></text>
</g>
<g>
<title>java.lang.String[] (17 samples, 0.02%)</title><rect x="143.4" y="259.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="146.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.proxy (15,677 samples, 20.60%)</title><rect x="143.9" y="355.0" width="243.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="146.9" y="366.0">ru/mail/polis/service/mrsandman5..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (162 samples, 0.21%)</title><rect x="143.9" y="339.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="146.9" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/360207322.invoke (162 samples, 0.21%)</title><rect x="143.9" y="323.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="146.9" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (162 samples, 0.21%)</title><rect x="143.9" y="307.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.9" y="318.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (49 samples, 0.06%)</title><rect x="143.9" y="291.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="146.9" y="302.0"></text>
</g>
<g>
<title>java.lang.String (49 samples, 0.06%)</title><rect x="143.9" y="275.0" width="0.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="146.9" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (113 samples, 0.15%)</title><rect x="144.7" y="291.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="147.7" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (113 samples, 0.15%)</title><rect x="144.7" y="275.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="147.7" y="286.0"></text>
</g>
<g>
<title>byte[] (113 samples, 0.15%)</title><rect x="144.7" y="259.0" width="1.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="147.7" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (15,515 samples, 20.39%)</title><rect x="146.4" y="339.0" width="240.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="149.4" y="350.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (15,515 samples, 20.39%)</title><rect x="146.4" y="323.0" width="240.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="149.4" y="334.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (79 samples, 0.10%)</title><rect x="146.4" y="307.0" width="1.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="149.4" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (14,576 samples, 19.15%)</title><rect x="147.7" y="307.0" width="226.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="150.7" y="318.0">one/nio/http/HttpClient$Respon..</text>
</g>
<g>
<title>byte[] (1,497 samples, 1.97%)</title><rect x="147.7" y="291.0" width="23.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="150.7" y="302.0">b..</text>
</g>
<g>
<title>byte[] (13,079 samples, 17.19%)</title><rect x="170.9" y="291.0" width="202.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="173.9" y="302.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (370 samples, 0.49%)</title><rect x="373.7" y="307.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="376.7" y="318.0"></text>
</g>
<g>
<title>byte[] (72 samples, 0.09%)</title><rect x="373.7" y="291.0" width="1.1" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="376.7" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (204 samples, 0.27%)</title><rect x="375.0" y="291.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="378.0" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (204 samples, 0.27%)</title><rect x="375.0" y="275.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="378.0" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (204 samples, 0.27%)</title><rect x="375.0" y="259.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="378.0" y="270.0"></text>
</g>
<g>
<title>char[] (171 samples, 0.22%)</title><rect x="375.0" y="243.0" width="2.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="378.0" y="254.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (17 samples, 0.02%)</title><rect x="377.9" y="243.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="380.9" y="254.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (17 samples, 0.02%)</title><rect x="377.9" y="227.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="380.9" y="238.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (17 samples, 0.02%)</title><rect x="377.9" y="211.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="380.9" y="222.0"></text>
</g>
<g>
<title>byte[] (17 samples, 0.02%)</title><rect x="377.9" y="195.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="380.9" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (73 samples, 0.10%)</title><rect x="378.3" y="291.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="381.3" y="302.0"></text>
</g>
<g>
<title>java/lang/String.substring (73 samples, 0.10%)</title><rect x="378.3" y="275.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="381.3" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (73 samples, 0.10%)</title><rect x="378.3" y="259.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="381.3" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (57 samples, 0.07%)</title><rect x="378.5" y="243.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="381.5" y="254.0"></text>
</g>
<g>
<title>byte[] (57 samples, 0.07%)</title><rect x="378.5" y="227.0" width="0.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="381.5" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (287 samples, 0.38%)</title><rect x="379.4" y="307.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="382.4" y="318.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (287 samples, 0.38%)</title><rect x="379.4" y="291.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="382.4" y="302.0"></text>
</g>
<g>
<title>byte[] (287 samples, 0.38%)</title><rect x="379.4" y="275.0" width="4.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="382.4" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (140 samples, 0.18%)</title><rect x="383.8" y="307.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="386.8" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (140 samples, 0.18%)</title><rect x="383.8" y="291.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="386.8" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (140 samples, 0.18%)</title><rect x="383.8" y="275.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="386.8" y="286.0"></text>
</g>
<g>
<title>java.lang.String (63 samples, 0.08%)</title><rect x="383.8" y="259.0" width="1.0" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="386.8" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (77 samples, 0.10%)</title><rect x="384.8" y="259.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="387.8" y="270.0"></text>
</g>
<g>
<title>byte[] (77 samples, 0.10%)</title><rect x="384.8" y="243.0" width="1.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="387.8" y="254.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (63 samples, 0.08%)</title><rect x="386.0" y="307.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="389.0" y="318.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (63 samples, 0.08%)</title><rect x="386.0" y="291.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="389.0" y="302.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (63 samples, 0.08%)</title><rect x="386.0" y="275.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="389.0" y="286.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (63 samples, 0.08%)</title><rect x="386.0" y="259.0" width="1.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="389.0" y="270.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (33 samples, 0.04%)</title><rect x="387.0" y="419.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="390.0" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (33 samples, 0.04%)</title><rect x="387.0" y="403.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="390.0" y="414.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$88/1779221538.get (33 samples, 0.04%)</title><rect x="387.0" y="387.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="390.0" y="398.0"></text>
</g>
<g>
<title>java.util.ArrayList (33 samples, 0.04%)</title><rect x="387.0" y="371.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="390.0" y="382.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (27 samples, 0.04%)</title><rect x="387.5" y="435.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="390.5" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (27 samples, 0.04%)</title><rect x="387.5" y="419.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="390.5" y="430.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (27 samples, 0.04%)</title><rect x="387.5" y="403.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="390.5" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (56 samples, 0.07%)</title><rect x="387.9" y="451.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="390.9" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (56 samples, 0.07%)</title><rect x="387.9" y="435.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="390.9" y="446.0"></text>
</g>
<g>
<title>java.util.stream.ReduceOps$3ReducingSink (56 samples, 0.07%)</title><rect x="387.9" y="419.0" width="0.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="390.9" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps.makeRef (43 samples, 0.06%)</title><rect x="388.8" y="483.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="391.8" y="494.0"></text>
</g>
<g>
<title>java.util.stream.ReduceOps$3 (43 samples, 0.06%)</title><rect x="388.8" y="467.0" width="0.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="391.8" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (87 samples, 0.11%)</title><rect x="389.5" y="499.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="392.5" y="510.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (87 samples, 0.11%)</title><rect x="389.5" y="483.0" width="1.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="392.5" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/clustering/ConsistentHashingTopology.replicasFor (989 samples, 1.30%)</title><rect x="390.8" y="499.0" width="15.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="393.8" y="510.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.hashBytes (315 samples, 0.41%)</title><rect x="390.8" y="483.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.8" y="494.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.newHasher (199 samples, 0.26%)</title><rect x="390.8" y="467.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="393.8" y="478.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction.newHasher (199 samples, 0.26%)</title><rect x="390.8" y="451.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="393.8" y="462.0"></text>
</g>
<g>
<title>com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher (80 samples, 0.11%)</title><rect x="390.8" y="435.0" width="1.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="393.8" y="446.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.&lt;init&gt; (119 samples, 0.16%)</title><rect x="392.1" y="435.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="395.1" y="446.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (119 samples, 0.16%)</title><rect x="392.1" y="419.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="395.1" y="430.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (119 samples, 0.16%)</title><rect x="392.1" y="403.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="395.1" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (119 samples, 0.16%)</title><rect x="392.1" y="387.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="395.1" y="398.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (64 samples, 0.08%)</title><rect x="392.1" y="371.0" width="0.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="395.1" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (55 samples, 0.07%)</title><rect x="393.0" y="371.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="396.0" y="382.0"></text>
</g>
<g>
<title>byte[] (55 samples, 0.07%)</title><rect x="393.0" y="355.0" width="0.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="396.0" y="366.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.hash (116 samples, 0.15%)</title><rect x="393.9" y="467.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="396.9" y="478.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.makeHash (116 samples, 0.15%)</title><rect x="393.9" y="451.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="396.9" y="462.0"></text>
</g>
<g>
<title>byte[] (58 samples, 0.08%)</title><rect x="393.9" y="435.0" width="0.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="396.9" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (58 samples, 0.08%)</title><rect x="394.8" y="435.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="397.8" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (58 samples, 0.08%)</title><rect x="394.8" y="419.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="397.8" y="430.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (58 samples, 0.08%)</title><rect x="394.8" y="403.0" width="0.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="397.8" y="414.0"></text>
</g>
<g>
<title>java.util.HashSet (27 samples, 0.04%)</title><rect x="395.7" y="483.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="398.7" y="494.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (35 samples, 0.05%)</title><rect x="396.1" y="483.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="399.1" y="494.0"></text>
</g>
<g>
<title>java.lang.Long (35 samples, 0.05%)</title><rect x="396.1" y="467.0" width="0.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="399.1" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (62 samples, 0.08%)</title><rect x="396.7" y="483.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="399.7" y="494.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (62 samples, 0.08%)</title><rect x="396.7" y="467.0" width="0.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="399.7" y="478.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (168 samples, 0.22%)</title><rect x="397.6" y="483.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="400.6" y="494.0"></text>
</g>
<g>
<title>java.util.AbstractMap$2$1 (35 samples, 0.05%)</title><rect x="397.6" y="467.0" width="0.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="400.6" y="478.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (133 samples, 0.17%)</title><rect x="398.2" y="467.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="401.2" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (80 samples, 0.11%)</title><rect x="398.2" y="451.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="401.2" y="462.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$SubMapEntryIterator (80 samples, 0.11%)</title><rect x="398.2" y="435.0" width="1.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="401.2" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (53 samples, 0.07%)</title><rect x="399.4" y="451.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="402.4" y="462.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap$AscendingEntrySetView (53 samples, 0.07%)</title><rect x="399.4" y="435.0" width="0.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="402.4" y="446.0"></text>
</g>
<g>
<title>java/util/AbstractMap.values (23 samples, 0.03%)</title><rect x="400.2" y="483.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="403.2" y="494.0"></text>
</g>
<g>
<title>java.util.AbstractMap$2 (23 samples, 0.03%)</title><rect x="400.2" y="467.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="403.2" y="478.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (72 samples, 0.09%)</title><rect x="400.6" y="483.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="403.6" y="494.0"></text>
</g>
<g>
<title>java.util.HashMap (72 samples, 0.09%)</title><rect x="400.6" y="467.0" width="1.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="403.6" y="478.0"></text>
</g>
<g>
<title>java/util/HashSet.add (229 samples, 0.30%)</title><rect x="401.7" y="483.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="404.7" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.put (229 samples, 0.30%)</title><rect x="401.7" y="467.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="404.7" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (229 samples, 0.30%)</title><rect x="401.7" y="451.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="404.7" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (125 samples, 0.16%)</title><rect x="401.7" y="435.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="404.7" y="446.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (125 samples, 0.16%)</title><rect x="401.7" y="419.0" width="1.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="404.7" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (104 samples, 0.14%)</title><rect x="403.6" y="435.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="406.6" y="446.0"></text>
</g>
<g>
<title>java.util.HashMap$Node[] (104 samples, 0.14%)</title><rect x="403.6" y="419.0" width="1.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="406.6" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (58 samples, 0.08%)</title><rect x="405.2" y="483.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="408.2" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (58 samples, 0.08%)</title><rect x="405.2" y="467.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="408.2" y="478.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (58 samples, 0.08%)</title><rect x="405.2" y="451.0" width="0.9" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="408.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.entryToResponse (319 samples, 0.42%)</title><rect x="406.1" y="515.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="409.1" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/298782942.linkToTargetMethod (104 samples, 0.14%)</title><rect x="406.1" y="499.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="409.1" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1686042773.invoke (104 samples, 0.14%)</title><rect x="406.1" y="483.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="409.1" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (104 samples, 0.14%)</title><rect x="406.1" y="467.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="409.1" y="478.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (35 samples, 0.05%)</title><rect x="406.1" y="451.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="409.1" y="462.0"></text>
</g>
<g>
<title>java.lang.String (35 samples, 0.05%)</title><rect x="406.1" y="435.0" width="0.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="409.1" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (69 samples, 0.09%)</title><rect x="406.7" y="451.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="409.7" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (69 samples, 0.09%)</title><rect x="406.7" y="435.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="409.7" y="446.0"></text>
</g>
<g>
<title>byte[] (69 samples, 0.09%)</title><rect x="406.7" y="419.0" width="1.1" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="409.7" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.getData (34 samples, 0.04%)</title><rect x="407.8" y="499.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="410.8" y="510.0"></text>
</g>
<g>
<title>byte[] (34 samples, 0.04%)</title><rect x="407.8" y="483.0" width="0.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="410.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.nonemptyResponse (181 samples, 0.24%)</title><rect x="408.3" y="499.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="411.3" y="510.0"></text>
</g>
<g>
<title>one.nio.http.Response (42 samples, 0.06%)</title><rect x="408.3" y="483.0" width="0.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="411.3" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (139 samples, 0.18%)</title><rect x="408.9" y="483.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="411.9" y="494.0"></text>
</g>
<g>
<title>byte[] (54 samples, 0.07%)</title><rect x="408.9" y="467.0" width="0.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="411.9" y="478.0"></text>
</g>
<g>
<title>java.lang.String[] (43 samples, 0.06%)</title><rect x="409.8" y="467.0" width="0.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="412.8" y="478.0"></text>
</g>
<g>
<title>java.lang.String (42 samples, 0.06%)</title><rect x="410.4" y="467.0" width="0.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="413.4" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.mergeEntries (428 samples, 0.56%)</title><rect x="411.1" y="515.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="414.1" y="526.0"></text>
</g>
<g>
<title>java/util/Collection.stream (123 samples, 0.16%)</title><rect x="411.1" y="499.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="414.1" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.spliterator (41 samples, 0.05%)</title><rect x="411.1" y="483.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="414.1" y="494.0"></text>
</g>
<g>
<title>java.util.ArrayList$ArrayListSpliterator (41 samples, 0.05%)</title><rect x="411.1" y="467.0" width="0.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="414.1" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (82 samples, 0.11%)</title><rect x="411.7" y="483.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="414.7" y="494.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (82 samples, 0.11%)</title><rect x="411.7" y="467.0" width="1.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="414.7" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.comparingLong (22 samples, 0.03%)</title><rect x="413.0" y="499.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="416.0" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (22 samples, 0.03%)</title><rect x="413.0" y="483.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="416.0" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (22 samples, 0.03%)</title><rect x="413.0" y="467.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="416.0" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$124/914238395.get$Lambda (22 samples, 0.03%)</title><rect x="413.0" y="451.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="416.0" y="462.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$124 (22 samples, 0.03%)</title><rect x="413.0" y="435.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="416.0" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (110 samples, 0.14%)</title><rect x="413.3" y="499.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="416.3" y="510.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$2 (110 samples, 0.14%)</title><rect x="413.3" y="483.0" width="1.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="416.3" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (173 samples, 0.23%)</title><rect x="415.0" y="499.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="418.0" y="510.0"></text>
</g>
<g>
<title>java/util/function/BinaryOperator.maxBy (33 samples, 0.04%)</title><rect x="415.0" y="483.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="418.0" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (33 samples, 0.04%)</title><rect x="415.0" y="467.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="418.0" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (33 samples, 0.04%)</title><rect x="415.0" y="451.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="418.0" y="462.0"></text>
</g>
<g>
<title>java/util/function/BinaryOperator$$Lambda$126/1564099363.get$Lambda (33 samples, 0.04%)</title><rect x="415.0" y="435.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="418.0" y="446.0"></text>
</g>
<g>
<title>java.util.function.BinaryOperator$$Lambda$126 (33 samples, 0.04%)</title><rect x="415.0" y="419.0" width="0.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="418.0" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (140 samples, 0.18%)</title><rect x="415.6" y="483.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="418.6" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (109 samples, 0.14%)</title><rect x="415.6" y="467.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="418.6" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (109 samples, 0.14%)</title><rect x="415.6" y="451.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="418.6" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (40 samples, 0.05%)</title><rect x="415.6" y="435.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="418.6" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (40 samples, 0.05%)</title><rect x="415.6" y="419.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="418.6" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (40 samples, 0.05%)</title><rect x="415.6" y="403.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="418.6" y="414.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$2$1 (40 samples, 0.05%)</title><rect x="415.6" y="387.0" width="0.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="418.6" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2.makeSink (46 samples, 0.06%)</title><rect x="416.2" y="435.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="419.2" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2.makeSink (46 samples, 0.06%)</title><rect x="416.2" y="419.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="419.2" y="430.0"></text>
</g>
<g>
<title>java.util.stream.ReduceOps$2ReducingSink (46 samples, 0.06%)</title><rect x="416.2" y="403.0" width="0.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="419.2" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2ReducingSink.get (23 samples, 0.03%)</title><rect x="416.9" y="435.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="419.9" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2ReducingSink.get (23 samples, 0.03%)</title><rect x="416.9" y="419.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="419.9" y="430.0"></text>
</g>
<g>
<title>java/util/Optional.of (23 samples, 0.03%)</title><rect x="416.9" y="403.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="419.9" y="414.0"></text>
</g>
<g>
<title>java.util.Optional (23 samples, 0.03%)</title><rect x="416.9" y="387.0" width="0.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="419.9" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps.makeRef (31 samples, 0.04%)</title><rect x="417.2" y="467.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="420.2" y="478.0"></text>
</g>
<g>
<title>java.util.stream.ReduceOps$2 (31 samples, 0.04%)</title><rect x="417.2" y="451.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="420.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.responseToEntry (483 samples, 0.63%)</title><rect x="417.7" y="515.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="420.7" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (241 samples, 0.32%)</title><rect x="417.7" y="499.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="420.7" y="510.0"></text>
</g>
<g>
<title>java/lang/String.substring (241 samples, 0.32%)</title><rect x="417.7" y="483.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="420.7" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (241 samples, 0.32%)</title><rect x="417.7" y="467.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="420.7" y="478.0"></text>
</g>
<g>
<title>java.lang.String (119 samples, 0.16%)</title><rect x="417.7" y="451.0" width="1.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="420.7" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (122 samples, 0.16%)</title><rect x="419.6" y="451.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="422.6" y="462.0"></text>
</g>
<g>
<title>byte[] (122 samples, 0.16%)</title><rect x="419.6" y="435.0" width="1.9" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="422.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.present (242 samples, 0.32%)</title><rect x="421.5" y="499.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="424.5" y="510.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mrsandman5.replication.Entry (150 samples, 0.20%)</title><rect x="421.5" y="483.0" width="2.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="424.5" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.&lt;init&gt; (92 samples, 0.12%)</title><rect x="423.8" y="483.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="426.8" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (92 samples, 0.12%)</title><rect x="423.8" y="467.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="426.8" y="478.0"></text>
</g>
<g>
<title>byte[] (92 samples, 0.12%)</title><rect x="423.8" y="451.0" width="1.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="426.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$120/254200562.act (33,738 samples, 44.33%)</title><rect x="425.2" y="547.0" width="523.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="428.2" y="558.0">ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$120/254200562.act</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replicasGet$1 (33,738 samples, 44.33%)</title><rect x="425.2" y="531.0" width="523.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="428.2" y="542.0">ru/mail/polis/service/mrsandman5/ServiceImpl.lambda$replicasGet$1</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/SimpleRequests.get (33,738 samples, 44.33%)</title><rect x="425.2" y="515.0" width="523.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="428.2" y="526.0">ru/mail/polis/service/mrsandman5/replication/SimpleRequests.get</text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.entryFromBytes (33,579 samples, 44.12%)</title><rect x="425.2" y="499.0" width="520.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="428.2" y="510.0">ru/mail/polis/service/mrsandman5/replication/Entry.entryFromBytes</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (4,525 samples, 5.95%)</title><rect x="425.2" y="483.0" width="70.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="428.2" y="494.0">ru/mail/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3,863 samples, 5.08%)</title><rect x="425.2" y="467.0" width="59.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="428.2" y="478.0">com/go..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1,036 samples, 1.36%)</title><rect x="425.2" y="451.0" width="16.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="428.2" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1,036 samples, 1.36%)</title><rect x="425.2" y="435.0" width="16.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="428.2" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1,036 samples, 1.36%)</title><rect x="425.2" y="419.0" width="16.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="428.2" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,036 samples, 1.36%)</title><rect x="425.2" y="403.0" width="16.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="428.2" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,036 samples, 1.36%)</title><rect x="425.2" y="387.0" width="16.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="428.2" y="398.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1,036 samples, 1.36%)</title><rect x="425.2" y="371.0" width="16.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="428.2" y="382.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1,036 samples, 1.36%)</title><rect x="425.2" y="355.0" width="16.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="428.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (1,036 samples, 1.36%)</title><rect x="425.2" y="339.0" width="16.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="428.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (1,036 samples, 1.36%)</title><rect x="425.2" y="323.0" width="16.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="428.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (1,036 samples, 1.36%)</title><rect x="425.2" y="307.0" width="16.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="428.2" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (475 samples, 0.62%)</title><rect x="425.2" y="291.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="428.2" y="302.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (475 samples, 0.62%)</title><rect x="425.2" y="275.0" width="7.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="428.2" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (440 samples, 0.58%)</title><rect x="432.6" y="291.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="435.6" y="302.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (440 samples, 0.58%)</title><rect x="432.6" y="275.0" width="6.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="435.6" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (57 samples, 0.07%)</title><rect x="439.4" y="291.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="442.4" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (57 samples, 0.07%)</title><rect x="439.4" y="275.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="442.4" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (57 samples, 0.07%)</title><rect x="439.4" y="259.0" width="0.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="442.4" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (64 samples, 0.08%)</title><rect x="440.3" y="291.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="443.3" y="302.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (64 samples, 0.08%)</title><rect x="440.3" y="275.0" width="1.0" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="443.3" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2,827 samples, 3.71%)</title><rect x="441.3" y="451.0" width="43.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="444.3" y="462.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (2,827 samples, 3.71%)</title><rect x="441.3" y="435.0" width="43.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="444.3" y="446.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (2,827 samples, 3.71%)</title><rect x="441.3" y="419.0" width="43.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="444.3" y="430.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2,827 samples, 3.71%)</title><rect x="441.3" y="403.0" width="43.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="444.3" y="414.0">java..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,827 samples, 3.71%)</title><rect x="441.3" y="387.0" width="43.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="444.3" y="398.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,827 samples, 3.71%)</title><rect x="441.3" y="371.0" width="43.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="444.3" y="382.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (2,507 samples, 3.29%)</title><rect x="441.3" y="355.0" width="38.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="444.3" y="366.0">com..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (28 samples, 0.04%)</title><rect x="441.3" y="339.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="444.3" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (28 samples, 0.04%)</title><rect x="441.3" y="323.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="444.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable$$Lambda$103/2031520542.apply (28 samples, 0.04%)</title><rect x="441.3" y="307.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="444.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.lambda$iterator$0 (28 samples, 0.04%)</title><rect x="441.3" y="291.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="444.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (2,479 samples, 3.26%)</title><rect x="441.7" y="339.0" width="38.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="444.7" y="350.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (2,479 samples, 3.26%)</title><rect x="441.7" y="323.0" width="38.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="444.7" y="334.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (2,479 samples, 3.26%)</title><rect x="441.7" y="307.0" width="38.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="444.7" y="318.0">ru/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (336 samples, 0.44%)</title><rect x="441.7" y="291.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="444.7" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (336 samples, 0.44%)</title><rect x="441.7" y="275.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="444.7" y="286.0"></text>
</g>
<g>
<title>byte[] (336 samples, 0.44%)</title><rect x="441.7" y="259.0" width="5.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="444.7" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (916 samples, 1.20%)</title><rect x="446.9" y="291.0" width="14.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="449.9" y="302.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (916 samples, 1.20%)</title><rect x="446.9" y="275.0" width="14.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="449.9" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Cell (83 samples, 0.11%)</title><rect x="461.1" y="291.0" width="1.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="464.1" y="302.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Value (78 samples, 0.10%)</title><rect x="462.4" y="291.0" width="1.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="465.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (1,066 samples, 1.40%)</title><rect x="463.6" y="291.0" width="16.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="466.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (472 samples, 0.62%)</title><rect x="463.6" y="275.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="466.6" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (332 samples, 0.44%)</title><rect x="463.6" y="259.0" width="5.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="466.6" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (140 samples, 0.18%)</title><rect x="468.8" y="259.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="471.8" y="270.0"></text>
</g>
<g>
<title>byte[] (140 samples, 0.18%)</title><rect x="468.8" y="243.0" width="2.1" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="471.8" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (594 samples, 0.78%)</title><rect x="470.9" y="275.0" width="9.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="473.9" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (594 samples, 0.78%)</title><rect x="470.9" y="259.0" width="9.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="473.9" y="270.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (320 samples, 0.42%)</title><rect x="480.1" y="355.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="483.1" y="366.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (320 samples, 0.42%)</title><rect x="480.1" y="339.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="483.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (320 samples, 0.42%)</title><rect x="480.1" y="323.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="483.1" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (320 samples, 0.42%)</title><rect x="480.1" y="307.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="483.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (320 samples, 0.42%)</title><rect x="480.1" y="291.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="483.1" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (139 samples, 0.18%)</title><rect x="480.1" y="275.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="483.1" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (139 samples, 0.18%)</title><rect x="480.1" y="259.0" width="2.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="483.1" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (121 samples, 0.16%)</title><rect x="482.3" y="275.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="485.3" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (121 samples, 0.16%)</title><rect x="482.3" y="259.0" width="1.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="485.3" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (33 samples, 0.04%)</title><rect x="484.2" y="275.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="487.2" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (33 samples, 0.04%)</title><rect x="484.2" y="259.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="487.2" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (33 samples, 0.04%)</title><rect x="484.2" y="243.0" width="0.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="487.2" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (27 samples, 0.04%)</title><rect x="484.7" y="275.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="487.7" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (27 samples, 0.04%)</title><rect x="484.7" y="259.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="487.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils$$Lambda$119/797602181.apply (662 samples, 0.87%)</title><rect x="485.1" y="467.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="488.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (662 samples, 0.87%)</title><rect x="485.1" y="451.0" width="10.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="488.1" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (334 samples, 0.44%)</title><rect x="485.1" y="435.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="488.1" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (334 samples, 0.44%)</title><rect x="485.1" y="419.0" width="5.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="488.1" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (289 samples, 0.38%)</title><rect x="490.3" y="435.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="493.3" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (289 samples, 0.38%)</title><rect x="490.3" y="419.0" width="4.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="493.3" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (22 samples, 0.03%)</title><rect x="494.8" y="435.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="497.8" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (22 samples, 0.03%)</title><rect x="494.8" y="419.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="497.8" y="430.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (22 samples, 0.03%)</title><rect x="494.8" y="403.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="497.8" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (17 samples, 0.02%)</title><rect x="495.1" y="435.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="498.1" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (17 samples, 0.02%)</title><rect x="495.1" y="419.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="498.1" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (79 samples, 0.10%)</title><rect x="495.4" y="483.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="498.4" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (37 samples, 0.05%)</title><rect x="495.4" y="467.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="498.4" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (37 samples, 0.05%)</title><rect x="495.4" y="451.0" width="0.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="498.4" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (42 samples, 0.06%)</title><rect x="495.9" y="467.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="498.9" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (42 samples, 0.06%)</title><rect x="495.9" y="451.0" width="0.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="498.9" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Value.getData (103 samples, 0.14%)</title><rect x="496.6" y="483.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="499.6" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (53 samples, 0.07%)</title><rect x="496.6" y="467.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="499.6" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (53 samples, 0.07%)</title><rect x="496.6" y="451.0" width="0.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="499.6" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (50 samples, 0.07%)</title><rect x="497.4" y="467.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="500.4" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (50 samples, 0.07%)</title><rect x="497.4" y="451.0" width="0.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="500.4" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.present (46 samples, 0.06%)</title><rect x="498.2" y="483.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="501.2" y="494.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mrsandman5.replication.Entry (25 samples, 0.03%)</title><rect x="498.2" y="467.0" width="0.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="501.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.&lt;init&gt; (21 samples, 0.03%)</title><rect x="498.6" y="467.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="501.6" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (21 samples, 0.03%)</title><rect x="498.6" y="451.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="501.6" y="462.0"></text>
</g>
<g>
<title>byte[] (21 samples, 0.03%)</title><rect x="498.6" y="435.0" width="0.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="501.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ByteUtils.toByteArray (18 samples, 0.02%)</title><rect x="498.9" y="483.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="501.9" y="494.0"></text>
</g>
<g>
<title>byte[] (18 samples, 0.02%)</title><rect x="498.9" y="467.0" width="0.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="501.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils.entryIterators (28,808 samples, 37.85%)</title><rect x="499.2" y="483.0" width="446.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="502.2" y="494.0">ru/mail/polis/utils/IteratorUtils.entryIterators</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (4,540 samples, 5.97%)</title><rect x="499.2" y="467.0" width="70.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="502.2" y="478.0">com/goog..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (27 samples, 0.04%)</title><rect x="499.2" y="451.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="502.2" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (4,513 samples, 5.93%)</title><rect x="499.6" y="451.0" width="70.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="502.6" y="462.0">com/goo..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (30 samples, 0.04%)</title><rect x="499.6" y="435.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="502.6" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (131 samples, 0.17%)</title><rect x="500.1" y="435.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="503.1" y="446.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (131 samples, 0.17%)</title><rect x="500.1" y="419.0" width="2.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="503.1" y="430.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (42 samples, 0.06%)</title><rect x="502.1" y="435.0" width="0.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="505.1" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (25 samples, 0.03%)</title><rect x="502.8" y="435.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="505.8" y="446.0"></text>
</g>
<g>
<title>java.lang.Object[] (25 samples, 0.03%)</title><rect x="502.8" y="419.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="505.8" y="430.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (4,285 samples, 5.63%)</title><rect x="503.1" y="435.0" width="66.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="506.1" y="446.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (4,285 samples, 5.63%)</title><rect x="503.1" y="419.0" width="66.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="506.1" y="430.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (31 samples, 0.04%)</title><rect x="503.1" y="403.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="506.1" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (31 samples, 0.04%)</title><rect x="503.1" y="387.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="506.1" y="398.0"></text>
</g>
<g>
<title>java.lang.Object[] (31 samples, 0.04%)</title><rect x="503.1" y="371.0" width="0.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="506.1" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (4,254 samples, 5.59%)</title><rect x="503.6" y="403.0" width="66.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="506.6" y="414.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (4,254 samples, 5.59%)</title><rect x="503.6" y="387.0" width="66.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="506.6" y="398.0">java/ut..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4,254 samples, 5.59%)</title><rect x="503.6" y="371.0" width="66.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="506.6" y="382.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4,254 samples, 5.59%)</title><rect x="503.6" y="355.0" width="66.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="506.6" y="366.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (3,860 samples, 5.07%)</title><rect x="503.6" y="339.0" width="59.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="506.6" y="350.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (37 samples, 0.05%)</title><rect x="503.6" y="323.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="506.6" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (37 samples, 0.05%)</title><rect x="503.6" y="307.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="506.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable$$Lambda$103/2031520542.apply (37 samples, 0.05%)</title><rect x="503.6" y="291.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="506.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.lambda$iterator$0 (37 samples, 0.05%)</title><rect x="503.6" y="275.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="506.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (3,823 samples, 5.02%)</title><rect x="504.2" y="323.0" width="59.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="507.2" y="334.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (3,823 samples, 5.02%)</title><rect x="504.2" y="307.0" width="59.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="507.2" y="318.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (3,823 samples, 5.02%)</title><rect x="504.2" y="291.0" width="59.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="507.2" y="302.0">ru/mai..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (477 samples, 0.63%)</title><rect x="504.2" y="275.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="507.2" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (477 samples, 0.63%)</title><rect x="504.2" y="259.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="507.2" y="270.0"></text>
</g>
<g>
<title>byte[] (477 samples, 0.63%)</title><rect x="504.2" y="243.0" width="7.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="507.2" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1,430 samples, 1.88%)</title><rect x="511.6" y="275.0" width="22.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="514.6" y="286.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,430 samples, 1.88%)</title><rect x="511.6" y="259.0" width="22.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="514.6" y="270.0">j..</text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Cell (126 samples, 0.17%)</title><rect x="533.8" y="275.0" width="1.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="536.8" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Value (112 samples, 0.15%)</title><rect x="535.7" y="275.0" width="1.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="538.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (1,678 samples, 2.20%)</title><rect x="537.5" y="275.0" width="26.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="540.5" y="286.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (713 samples, 0.94%)</title><rect x="537.5" y="259.0" width="11.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="540.5" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (495 samples, 0.65%)</title><rect x="537.5" y="243.0" width="7.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="540.5" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (218 samples, 0.29%)</title><rect x="545.1" y="243.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="548.1" y="254.0"></text>
</g>
<g>
<title>byte[] (218 samples, 0.29%)</title><rect x="545.1" y="227.0" width="3.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="548.1" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (965 samples, 1.27%)</title><rect x="548.5" y="259.0" width="15.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="551.5" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (965 samples, 1.27%)</title><rect x="548.5" y="243.0" width="15.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="551.5" y="254.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (394 samples, 0.52%)</title><rect x="563.5" y="339.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="566.5" y="350.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (394 samples, 0.52%)</title><rect x="563.5" y="323.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="566.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (394 samples, 0.52%)</title><rect x="563.5" y="307.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="566.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (394 samples, 0.52%)</title><rect x="563.5" y="291.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="566.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (394 samples, 0.52%)</title><rect x="563.5" y="275.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="566.5" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (207 samples, 0.27%)</title><rect x="563.5" y="259.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="566.5" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (207 samples, 0.27%)</title><rect x="563.5" y="243.0" width="3.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="566.5" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (187 samples, 0.25%)</title><rect x="566.7" y="259.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="569.7" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (187 samples, 0.25%)</title><rect x="566.7" y="243.0" width="2.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="569.7" y="254.0"></text>
</g>
<g>
<title>java.util.ArrayList (537 samples, 0.71%)</title><rect x="569.6" y="467.0" width="8.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="572.6" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (23 samples, 0.03%)</title><rect x="577.9" y="467.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="580.9" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (23 samples, 0.03%)</title><rect x="577.9" y="451.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="580.9" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils$$Lambda$115/1902819636.get$Lambda (23 samples, 0.03%)</title><rect x="577.9" y="435.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="580.9" y="446.0"></text>
</g>
<g>
<title>ru.mail.polis.utils.IteratorUtils$$Lambda$115 (23 samples, 0.03%)</title><rect x="577.9" y="419.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="580.9" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (38 samples, 0.05%)</title><rect x="578.3" y="467.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="581.3" y="478.0"></text>
</g>
<g>
<title>java.lang.Object[] (38 samples, 0.05%)</title><rect x="578.3" y="451.0" width="0.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="581.3" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (22,443 samples, 29.49%)</title><rect x="578.9" y="467.0" width="347.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="581.9" y="478.0">java/util/Collections$UnmodifiableCollection.fo..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (22,443 samples, 29.49%)</title><rect x="578.9" y="451.0" width="347.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="581.9" y="462.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (34 samples, 0.04%)</title><rect x="578.9" y="435.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="581.9" y="446.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (34 samples, 0.04%)</title><rect x="578.9" y="419.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="581.9" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (34 samples, 0.04%)</title><rect x="578.9" y="403.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="581.9" y="414.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (34 samples, 0.04%)</title><rect x="578.9" y="387.0" width="0.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="581.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils$$Lambda$115/1902819636.accept (22,409 samples, 29.44%)</title><rect x="579.4" y="435.0" width="347.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="582.4" y="446.0">ru/mail/polis/utils/IteratorUtils$$Lambda$115/1..</text>
</g>
<g>
<title>ru/mail/polis/utils/IteratorUtils.lambda$entryIterators$3 (22,409 samples, 29.44%)</title><rect x="579.4" y="419.0" width="347.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="582.4" y="430.0">ru/mail/polis/utils/IteratorUtils.lambda$entryI..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.iterator (22,409 samples, 29.44%)</title><rect x="579.4" y="403.0" width="347.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="582.4" y="414.0">ru/mail/polis/dao/impl/tables/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.impl.tables.SSTable$1 (144 samples, 0.19%)</title><rect x="579.4" y="387.0" width="2.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="582.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt; (22,265 samples, 29.26%)</title><rect x="581.6" y="387.0" width="345.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="584.6" y="398.0">ru/mail/polis/dao/impl/tables/SSTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getPosition (22,265 samples, 29.26%)</title><rect x="581.6" y="371.0" width="345.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="584.6" y="382.0">ru/mail/polis/dao/impl/tables/SSTable.getPosition</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.keyAt (22,265 samples, 29.26%)</title><rect x="581.6" y="355.0" width="345.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="584.6" y="366.0">ru/mail/polis/dao/impl/tables/SSTable.keyAt</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (9,987 samples, 13.12%)</title><rect x="581.6" y="339.0" width="154.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="584.6" y="350.0">java/nio/ByteBuffer...</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4,950 samples, 6.50%)</title><rect x="581.6" y="323.0" width="76.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="584.6" y="334.0">java.nio..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5,037 samples, 6.62%)</title><rect x="658.4" y="323.0" width="78.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="661.4" y="334.0">java/nio/..</text>
</g>
<g>
<title>byte[] (5,037 samples, 6.62%)</title><rect x="658.4" y="307.0" width="78.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="661.4" y="318.0">byte[]</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (9,890 samples, 13.00%)</title><rect x="736.5" y="339.0" width="153.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="739.5" y="350.0">java/nio/HeapByteBu..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (9,890 samples, 13.00%)</title><rect x="736.5" y="323.0" width="153.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="739.5" y="334.0">java.nio.HeapByteBu..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (2,388 samples, 3.14%)</title><rect x="889.8" y="339.0" width="37.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="892.8" y="350.0">ru/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,388 samples, 3.14%)</title><rect x="889.8" y="323.0" width="37.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="892.8" y="334.0">jav..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2,388 samples, 3.14%)</title><rect x="889.8" y="307.0" width="37.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="892.8" y="318.0">jav..</text>
</g>
<g>
<title>byte[] (2,388 samples, 3.14%)</title><rect x="889.8" y="291.0" width="37.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="892.8" y="302.0">byt..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (1,074 samples, 1.41%)</title><rect x="927.0" y="467.0" width="16.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="930.0" y="478.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (24 samples, 0.03%)</title><rect x="927.0" y="451.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="930.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (1,050 samples, 1.38%)</title><rect x="927.4" y="451.0" width="16.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="930.4" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1,050 samples, 1.38%)</title><rect x="927.4" y="435.0" width="16.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="930.4" y="446.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (278 samples, 0.37%)</title><rect x="927.4" y="419.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="930.4" y="430.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (278 samples, 0.37%)</title><rect x="927.4" y="403.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="930.4" y="414.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (278 samples, 0.37%)</title><rect x="927.4" y="387.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="930.4" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (278 samples, 0.37%)</title><rect x="927.4" y="371.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="930.4" y="382.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (278 samples, 0.37%)</title><rect x="927.4" y="355.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="930.4" y="366.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (278 samples, 0.37%)</title><rect x="927.4" y="339.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="930.4" y="350.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (278 samples, 0.37%)</title><rect x="927.4" y="323.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="930.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (278 samples, 0.37%)</title><rect x="927.4" y="307.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="930.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (278 samples, 0.37%)</title><rect x="927.4" y="291.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="930.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (278 samples, 0.37%)</title><rect x="927.4" y="275.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="930.4" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (131 samples, 0.17%)</title><rect x="927.4" y="259.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="930.4" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (131 samples, 0.17%)</title><rect x="927.4" y="243.0" width="2.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="930.4" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (122 samples, 0.16%)</title><rect x="929.4" y="259.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="932.4" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (122 samples, 0.16%)</title><rect x="929.4" y="243.0" width="1.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="932.4" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (772 samples, 1.01%)</title><rect x="931.7" y="419.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="934.7" y="430.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (772 samples, 1.01%)</title><rect x="931.7" y="403.0" width="12.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="934.7" y="414.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (772 samples, 1.01%)</title><rect x="931.7" y="387.0" width="12.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="934.7" y="398.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (772 samples, 1.01%)</title><rect x="931.7" y="371.0" width="12.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="934.7" y="382.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (772 samples, 1.01%)</title><rect x="931.7" y="355.0" width="12.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="934.7" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (772 samples, 1.01%)</title><rect x="931.7" y="339.0" width="12.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="934.7" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (679 samples, 0.89%)</title><rect x="931.7" y="323.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="934.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (679 samples, 0.89%)</title><rect x="931.7" y="307.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="934.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable$1.next (679 samples, 0.89%)</title><rect x="931.7" y="291.0" width="10.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="934.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.cellAt (679 samples, 0.89%)</title><rect x="931.7" y="275.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="934.7" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (95 samples, 0.12%)</title><rect x="931.7" y="259.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="934.7" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (95 samples, 0.12%)</title><rect x="931.7" y="243.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="934.7" y="254.0"></text>
</g>
<g>
<title>byte[] (95 samples, 0.12%)</title><rect x="931.7" y="227.0" width="1.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="934.7" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (274 samples, 0.36%)</title><rect x="933.2" y="259.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="936.2" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (274 samples, 0.36%)</title><rect x="933.2" y="243.0" width="4.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="936.2" y="254.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.models.Value (26 samples, 0.03%)</title><rect x="937.6" y="259.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="940.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/SSTable.getOffset (271 samples, 0.36%)</title><rect x="938.0" y="259.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="941.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (110 samples, 0.14%)</title><rect x="938.0" y="243.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="941.0" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (76 samples, 0.10%)</title><rect x="938.0" y="227.0" width="1.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="941.0" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (34 samples, 0.04%)</title><rect x="939.2" y="227.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="942.2" y="238.0"></text>
</g>
<g>
<title>byte[] (34 samples, 0.04%)</title><rect x="939.2" y="211.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="942.2" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (161 samples, 0.21%)</title><rect x="939.7" y="243.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="942.7" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (161 samples, 0.21%)</title><rect x="939.7" y="227.0" width="2.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="942.7" y="238.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (93 samples, 0.12%)</title><rect x="942.2" y="323.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="945.2" y="334.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (93 samples, 0.12%)</title><rect x="942.2" y="307.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="945.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (93 samples, 0.12%)</title><rect x="942.2" y="291.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="945.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.compareTo (93 samples, 0.12%)</title><rect x="942.2" y="275.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="945.2" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/models/Cell.getKey (93 samples, 0.12%)</title><rect x="942.2" y="259.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="945.2" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (24 samples, 0.03%)</title><rect x="942.2" y="243.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="945.2" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (24 samples, 0.03%)</title><rect x="942.2" y="227.0" width="0.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="945.2" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (35 samples, 0.05%)</title><rect x="942.6" y="243.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="945.6" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (35 samples, 0.05%)</title><rect x="942.6" y="227.0" width="0.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="945.6" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (19 samples, 0.02%)</title><rect x="943.4" y="243.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="946.4" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (19 samples, 0.02%)</title><rect x="943.4" y="227.0" width="0.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="946.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/tables/MemTable.iterator (141 samples, 0.19%)</title><rect x="943.7" y="467.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="946.7" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (22 samples, 0.03%)</title><rect x="943.7" y="451.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="946.7" y="462.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (22 samples, 0.03%)</title><rect x="943.7" y="435.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="946.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (50 samples, 0.07%)</title><rect x="944.0" y="451.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="947.0" y="462.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (50 samples, 0.07%)</title><rect x="944.0" y="435.0" width="0.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="947.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (26 samples, 0.03%)</title><rect x="944.8" y="451.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="947.8" y="462.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (26 samples, 0.03%)</title><rect x="944.8" y="435.0" width="0.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="947.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (43 samples, 0.06%)</title><rect x="945.2" y="451.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="948.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (43 samples, 0.06%)</title><rect x="945.2" y="435.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="948.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (43 samples, 0.06%)</title><rect x="945.2" y="419.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="948.2" y="430.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (43 samples, 0.06%)</title><rect x="945.2" y="403.0" width="0.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="948.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.entryToResponse (159 samples, 0.21%)</title><rect x="945.8" y="499.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="948.8" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/298782942.linkToTargetMethod (36 samples, 0.05%)</title><rect x="945.8" y="483.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="948.8" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1686042773.invoke (36 samples, 0.05%)</title><rect x="945.8" y="467.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="948.8" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (36 samples, 0.05%)</title><rect x="945.8" y="451.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="948.8" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (22 samples, 0.03%)</title><rect x="946.1" y="435.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="949.1" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (22 samples, 0.03%)</title><rect x="946.1" y="419.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="949.1" y="430.0"></text>
</g>
<g>
<title>byte[] (22 samples, 0.03%)</title><rect x="946.1" y="403.0" width="0.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="949.1" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/replication/Entry.getData (20 samples, 0.03%)</title><rect x="946.4" y="483.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="949.4" y="494.0"></text>
</g>
<g>
<title>byte[] (20 samples, 0.03%)</title><rect x="946.4" y="467.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="949.4" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.nonemptyResponse (103 samples, 0.14%)</title><rect x="946.7" y="483.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="949.7" y="494.0"></text>
</g>
<g>
<title>one.nio.http.Response (23 samples, 0.03%)</title><rect x="946.7" y="467.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="949.7" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (80 samples, 0.11%)</title><rect x="947.1" y="467.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="950.1" y="478.0"></text>
</g>
<g>
<title>byte[] (32 samples, 0.04%)</title><rect x="947.1" y="451.0" width="0.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="950.1" y="462.0"></text>
</g>
<g>
<title>java.lang.String[] (29 samples, 0.04%)</title><rect x="947.6" y="451.0" width="0.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="950.6" y="462.0"></text>
</g>
<g>
<title>java.lang.String (19 samples, 0.02%)</title><rect x="948.0" y="451.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="951.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/utils/ResponseUtils.sendResponse (357 samples, 0.47%)</title><rect x="948.3" y="547.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="951.3" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (357 samples, 0.47%)</title><rect x="948.3" y="531.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="951.3" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (357 samples, 0.47%)</title><rect x="948.3" y="515.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="951.3" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (253 samples, 0.33%)</title><rect x="948.3" y="499.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="951.3" y="510.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (253 samples, 0.33%)</title><rect x="948.3" y="483.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="951.3" y="494.0"></text>
</g>
<g>
<title>byte[] (253 samples, 0.33%)</title><rect x="948.3" y="467.0" width="3.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="951.3" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (104 samples, 0.14%)</title><rect x="952.2" y="499.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="955.2" y="510.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (104 samples, 0.14%)</title><rect x="952.2" y="483.0" width="1.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="955.2" y="494.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (15,231 samples, 20.01%)</title><rect x="953.8" y="627.0" width="236.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="956.8" y="638.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (1,686 samples, 2.22%)</title><rect x="953.8" y="611.0" width="26.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="956.8" y="622.0">o..</text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (1,686 samples, 2.22%)</title><rect x="953.8" y="595.0" width="26.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="956.8" y="606.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.process (13,545 samples, 17.80%)</title><rect x="980.0" y="611.0" width="210.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="983.0" y="622.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (13,545 samples, 17.80%)</title><rect x="980.0" y="595.0" width="210.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="983.0" y="606.0">one/nio/http/HttpSession.pro..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (13,545 samples, 17.80%)</title><rect x="980.0" y="579.0" width="210.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="983.0" y="590.0">one/nio/http/HttpSession.pro..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (4,721 samples, 6.20%)</title><rect x="980.0" y="563.0" width="73.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="983.0" y="574.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4,721 samples, 6.20%)</title><rect x="980.0" y="547.0" width="73.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="983.0" y="558.0">one/nio/..</text>
</g>
<g>
<title>RequestHandler1_response.handleRequest (4,195 samples, 5.51%)</title><rect x="980.0" y="531.0" width="65.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="983.0" y="542.0">Request..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (409 samples, 0.54%)</title><rect x="980.0" y="515.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="983.0" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (409 samples, 0.54%)</title><rect x="980.0" y="499.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="983.0" y="510.0"></text>
</g>
<g>
<title>java/lang/String.substring (409 samples, 0.54%)</title><rect x="980.0" y="483.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="983.0" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (409 samples, 0.54%)</title><rect x="980.0" y="467.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="983.0" y="478.0"></text>
</g>
<g>
<title>java.lang.String (231 samples, 0.30%)</title><rect x="980.0" y="451.0" width="3.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="983.0" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (178 samples, 0.23%)</title><rect x="983.6" y="451.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="986.6" y="462.0"></text>
</g>
<g>
<title>byte[] (178 samples, 0.23%)</title><rect x="983.6" y="435.0" width="2.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="986.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.response (3,786 samples, 4.97%)</title><rect x="986.3" y="515.0" width="58.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="989.3" y="526.0">ru/mai..</text>
</g>
<g>
<title>java/lang/String.getBytes (27 samples, 0.04%)</title><rect x="986.3" y="499.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="989.3" y="510.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (27 samples, 0.04%)</title><rect x="986.3" y="483.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="989.3" y="494.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (27 samples, 0.04%)</title><rect x="986.3" y="467.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="989.3" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (27 samples, 0.04%)</title><rect x="986.3" y="451.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="989.3" y="462.0"></text>
</g>
<g>
<title>byte[] (27 samples, 0.04%)</title><rect x="986.3" y="435.0" width="0.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="989.3" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,768 samples, 2.32%)</title><rect x="986.7" y="499.0" width="27.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="989.7" y="510.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,768 samples, 2.32%)</title><rect x="986.7" y="483.0" width="27.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="989.7" y="494.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,768 samples, 2.32%)</title><rect x="986.7" y="467.0" width="27.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="989.7" y="478.0">j..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (514 samples, 0.68%)</title><rect x="1014.2" y="499.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1017.2" y="510.0"></text>
</g>
<g>
<title>java/lang/String.substring (514 samples, 0.68%)</title><rect x="1014.2" y="483.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1017.2" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (514 samples, 0.68%)</title><rect x="1014.2" y="467.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1017.2" y="478.0"></text>
</g>
<g>
<title>java.lang.String (225 samples, 0.30%)</title><rect x="1014.2" y="451.0" width="3.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1017.2" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (289 samples, 0.38%)</title><rect x="1017.6" y="451.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1020.6" y="462.0"></text>
</g>
<g>
<title>byte[] (289 samples, 0.38%)</title><rect x="1017.6" y="435.0" width="4.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1020.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.replicasGet (1,477 samples, 1.94%)</title><rect x="1022.1" y="499.0" width="22.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1025.1" y="510.0">r..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (674 samples, 0.89%)</title><rect x="1022.1" y="483.0" width="10.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1025.1" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (674 samples, 0.89%)</title><rect x="1022.1" y="467.0" width="10.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1025.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$107/1035757000.get$Lambda (454 samples, 0.60%)</title><rect x="1022.1" y="451.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1025.1" y="462.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mrsandman5.ServiceImpl$$Lambda$107 (454 samples, 0.60%)</title><rect x="1022.1" y="435.0" width="7.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1025.1" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$120/254200562.get$Lambda (220 samples, 0.29%)</title><rect x="1029.2" y="451.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1032.2" y="462.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mrsandman5.ServiceImpl$$Lambda$120 (220 samples, 0.29%)</title><rect x="1029.2" y="435.0" width="3.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1032.2" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl.asyncExecute (803 samples, 1.06%)</title><rect x="1032.6" y="483.0" width="12.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1035.6" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (797 samples, 1.05%)</title><rect x="1032.6" y="467.0" width="12.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1035.6" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (797 samples, 1.05%)</title><rect x="1032.6" y="451.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1035.6" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mrsandman5/ServiceImpl$$Lambda$76/103907069.get$Lambda (797 samples, 1.05%)</title><rect x="1032.6" y="435.0" width="12.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1035.6" y="446.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mrsandman5.ServiceImpl$$Lambda$76 (797 samples, 1.05%)</title><rect x="1032.6" y="419.0" width="12.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1035.6" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (526 samples, 0.69%)</title><rect x="1045.0" y="531.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1048.0" y="542.0"></text>
</g>
<g>
<title>java/lang/String.substring (526 samples, 0.69%)</title><rect x="1045.0" y="515.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1048.0" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (526 samples, 0.69%)</title><rect x="1045.0" y="499.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1048.0" y="510.0"></text>
</g>
<g>
<title>java.lang.String (356 samples, 0.47%)</title><rect x="1045.0" y="483.0" width="5.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1048.0" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (170 samples, 0.22%)</title><rect x="1050.6" y="483.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1053.6" y="494.0"></text>
</g>
<g>
<title>byte[] (170 samples, 0.22%)</title><rect x="1050.6" y="467.0" width="2.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1053.6" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3,127 samples, 4.11%)</title><rect x="1053.2" y="563.0" width="48.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1056.2" y="574.0">one/..</text>
</g>
<g>
<title>one.nio.http.Request (369 samples, 0.48%)</title><rect x="1053.2" y="547.0" width="5.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1056.2" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1,212 samples, 1.59%)</title><rect x="1058.9" y="547.0" width="18.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1061.9" y="558.0"></text>
</g>
<g>
<title>java.lang.String[] (424 samples, 0.56%)</title><rect x="1058.9" y="531.0" width="6.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1061.9" y="542.0"></text>
</g>
<g>
<title>java.lang.String[] (788 samples, 1.04%)</title><rect x="1065.5" y="531.0" width="12.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1068.5" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,546 samples, 2.03%)</title><rect x="1077.7" y="547.0" width="24.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1080.7" y="558.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,546 samples, 2.03%)</title><rect x="1077.7" y="531.0" width="24.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1080.7" y="542.0">o..</text>
</g>
<g>
<title>char[] (1,053 samples, 1.38%)</title><rect x="1077.7" y="515.0" width="16.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1080.7" y="526.0"></text>
</g>
<g>
<title>char[] (107 samples, 0.14%)</title><rect x="1094.0" y="515.0" width="1.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1097.0" y="526.0"></text>
</g>
<g>
<title>java.lang.String (25 samples, 0.03%)</title><rect x="1095.7" y="515.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1098.7" y="526.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (361 samples, 0.47%)</title><rect x="1096.1" y="515.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1099.1" y="526.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (361 samples, 0.47%)</title><rect x="1096.1" y="499.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1099.1" y="510.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (361 samples, 0.47%)</title><rect x="1096.1" y="483.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1099.1" y="494.0"></text>
</g>
<g>
<title>byte[] (361 samples, 0.47%)</title><rect x="1096.1" y="467.0" width="5.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1099.1" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,697 samples, 7.49%)</title><rect x="1101.7" y="563.0" width="88.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1104.7" y="574.0">one/nio/ut..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,697 samples, 7.49%)</title><rect x="1101.7" y="547.0" width="88.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1104.7" y="558.0">one/nio/ut..</text>
</g>
<g>
<title>char[] (1,347 samples, 1.77%)</title><rect x="1101.7" y="531.0" width="20.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1104.7" y="542.0"></text>
</g>
<g>
<title>char[] (662 samples, 0.87%)</title><rect x="1122.6" y="531.0" width="10.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1125.6" y="542.0"></text>
</g>
<g>
<title>java.lang.String (1,215 samples, 1.60%)</title><rect x="1132.8" y="531.0" width="18.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1135.8" y="542.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,473 samples, 3.25%)</title><rect x="1151.7" y="531.0" width="38.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1154.7" y="542.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,473 samples, 3.25%)</title><rect x="1151.7" y="515.0" width="38.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1154.7" y="526.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2,473 samples, 3.25%)</title><rect x="1151.7" y="499.0" width="38.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1154.7" y="510.0">jav..</text>
</g>
<g>
<title>byte[] (2,373 samples, 3.12%)</title><rect x="1151.7" y="483.0" width="36.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1154.7" y="494.0">byt..</text>
</g>
<g>
<title>byte[] (100 samples, 0.13%)</title><rect x="1188.4" y="483.0" width="1.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1191.4" y="494.0"></text>
</g>
</g>
</svg>
